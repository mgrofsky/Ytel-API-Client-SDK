/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class LetterApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * Create Letter
    * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
    * @param to The AddressId or an object structured when creating an address by addresses/Create. 
    * @param from The AddressId or an object structured when creating an address by addresses/Create. 
    * @param attachbyid Set an existing letter by attaching its LetterId. 
    * @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. 
    * @param color Specify if letter should be printed in color. 
    * @param description A description for the letter. (optional)
    * @param extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
    * @param doublesided Specify if letter should be printed on both sides. (optional)
    * @param template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
    * @param htmldata A string value that contains HTML markup. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun letterCreate(to: kotlin.String, from: kotlin.String, attachbyid: kotlin.String, file: kotlin.String, color: kotlin.String, description: kotlin.String, extraservice: kotlin.String, doublesided: kotlin.String, template: kotlin.String, htmldata: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("to" to "$to", "from" to "$from", "attachbyid" to "$attachbyid", "file" to "$file", "color" to "$color", "description" to "$description", "extraservice" to "$extraservice", "doublesided" to "$doublesided", "template" to "$template", "htmldata" to "$htmldata")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/letter/create.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Letter
    * Remove a letter object by its LetterId.
    * @param lettersid The unique identifier for a letter object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun letterDelete(lettersid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("lettersid" to "$lettersid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/letter/delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Letters
    * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize The count of objects to return per page. (optional, default to 10)
    * @param lettersid The unique identifier for a letter object. (optional)
    * @param dateCreated The date the letter was created. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun letterListsletter(page: kotlin.Int, pagesize: kotlin.Int, lettersid: kotlin.String, dateCreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "lettersid" to "$lettersid", "dateCreated" to "$dateCreated")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/letter/listsletter.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Letter
    * Retrieve a letter object by its LetterSid.
    * @param lettersid The unique identifier for a letter object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun letterViewletter(lettersid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("lettersid" to "$lettersid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/letter/viewletter.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
