/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.12
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class PostCardApi(basePath: kotlin.String = "https://api.ytel.com/api/v3") : ApiClient(basePath) {

    /**
    * Create Postcard
    * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
    * @param to The AddressId or an object structured when creating an address by addresses/Create. 
    * @param from The AddressId or an object structured when creating an address by addresses/Create. 
    * @param attachbyid Set an existing postcard by attaching its PostcardId. 
    * @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. 
    * @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you. 
    * @param message The message for the back of the postcard with a maximum of 350 characters. 
    * @param setting Code for the dimensions of the media to be printed. 
    * @param description A description for the postcard. (optional)
    * @param htmldata A string value that contains HTML markup. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun postcardCreatepostcard(to: kotlin.String, from: kotlin.String, attachbyid: kotlin.String, front: kotlin.String, back: kotlin.String, message: kotlin.String, setting: kotlin.String, description: kotlin.String, htmldata: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("to" to "$to", "from" to "$from", "attachbyid" to "$attachbyid", "front" to "$front", "back" to "$back", "message" to "$message", "setting" to "$setting", "description" to "$description", "htmldata" to "$htmldata")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/Postcard/createpostcard.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Postcard
    * Remove a postcard object.
    * @param postcardid The unique identifier of a postcard object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun postcardDeletepostcard(postcardid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("postcardid" to "$postcardid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/Postcard/deletepostcard.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Postcards
    * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize The count of objects to return per page. (optional, default to 10)
    * @param postcardid The unique identifier for a postcard object. (optional)
    * @param dateCreated The date the postcard was created. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun postcardListpostcard(page: kotlin.Int, pagesize: kotlin.Int, postcardid: kotlin.String, dateCreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "postcardid" to "$postcardid", "dateCreated" to "$dateCreated")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/Postcard/listpostcard.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Postcard
    * Retrieve a postcard object by its PostcardId.
    * @param postcardid The unique identifier for a postcard object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun postcardViewpostcard(postcardid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("postcardid" to "$postcardid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/Postcard/viewpostcard.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
