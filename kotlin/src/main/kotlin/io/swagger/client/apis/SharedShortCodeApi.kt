/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class SharedShortCodeApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * List Keywords
    * Retrieve a list of keywords associated with your Ytel account.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize Number of individual resources listed in the response per page (optional, default to 10)
    * @param keyword Only list keywords of keyword (optional)
    * @param shortcode Only list keywords of shortcode (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun keywordLists(page: kotlin.Int, pagesize: kotlin.Int, keyword: kotlin.String, shortcode: kotlin.Int) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "Keyword" to "$keyword", "Shortcode" to "$shortcode")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/keyword/lists.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Keyword
    * View a set of properties for a single keyword.
    * @param keywordid The unique identifier of each keyword 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun keywordView(keywordid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Keywordid" to "$keywordid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/keyword/view.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Inbound SMS
    * List All Inbound ShortCode
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize Number of individual resources listed in the response per page (optional, default to 10)
    * @param from From Number to Inbound ShortCode (optional)
    * @param shortcode Only list messages sent to this Short Code (optional)
    * @param datecreated Only list messages sent with the specified date (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeGetinboundsms(page: kotlin.Int, pagesize: kotlin.Int, from: kotlin.String, shortcode: kotlin.String, datecreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "from" to "$from", "Shortcode" to "$shortcode")
        val localVariableQuery: MultiValueMap = mapOf("datecreated" to listOf("$datecreated"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/getinboundsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Shortcodes
    * Retrieve a list of shortcode assignment associated with your Ytel account.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize Number of individual resources listed in the response per page (optional, default to 10)
    * @param shortcode Only list keywords of shortcode (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeListshortcode(page: kotlin.Int, pagesize: kotlin.Int, shortcode: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize")
        val localVariableQuery: MultiValueMap = mapOf("shortcode" to listOf("$shortcode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/listshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Send SMS
    * Send an SMS from a Ytel ShortCode
    * @param shortcode The Short Code number that is the sender of this message 
    * @param to A valid 10-digit number that should receive the message 
    * @param templateid The unique identifier for the template used for the message 
    * @param &#x60;data&#x60; format of your data, example: {companyname}:test,{otpcode}:1234 
    * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)
    * @param messageStatusCallback URL that can be requested to receive notification when Short Code message was sent. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeSendsms(shortcode: kotlin.String, to: kotlin.String, templateid: java.util.UUID, &#x60;data&#x60;: kotlin.String, method: kotlin.String, messageStatusCallback: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("shortcode" to "$shortcode", "to" to "$to", "templateid" to "$templateid", "data" to "$&#x60;data&#x60;", "Method" to "$method", "MessageStatusCallback" to "$messageStatusCallback")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/sendsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update Shortcode
    * Update Assignment
    * @param shortcode List of valid shortcode to your Ytel account 
    * @param friendlyName User generated name of the shortcode (optional)
    * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
    * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
    * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
    * @param fallbackUrlMethod Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeUpdateshortcode(shortcode: kotlin.String, friendlyName: kotlin.String, callbackUrl: kotlin.String, callbackMethod: kotlin.String, fallbackUrl: kotlin.String, fallbackUrlMethod: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode", "FriendlyName" to "$friendlyName", "CallbackUrl" to "$callbackUrl", "CallbackMethod" to "$callbackMethod", "FallbackUrl" to "$fallbackUrl", "FallbackUrlMethod" to "$fallbackUrlMethod")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/updateshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Shortcode
    * The response returned here contains all resource properties associated with the given Shortcode.
    * @param shortcode List of valid Shortcode to your Ytel account 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeViewshortcode(shortcode: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/viewshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Templates
    * List Shortcode Templates by Type
    * @param type The type (category) of template Valid values: marketing, authorization (optional, default to authorization)
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize The count of objects to return per page. (optional, default to 10)
    * @param shortcode Only list templates of type (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun templateLists(type: kotlin.String, page: kotlin.Int, pagesize: kotlin.Int, shortcode: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("type" to "$type", "page" to "$page", "pagesize" to "$pagesize", "Shortcode" to "$shortcode")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/template/lists.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Template
    * View a Shared ShortCode Template
    * @param templateId The unique identifier for a template object 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun templateView(templateId: java.util.UUID) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("TemplateId" to "$templateId")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/template/view.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
