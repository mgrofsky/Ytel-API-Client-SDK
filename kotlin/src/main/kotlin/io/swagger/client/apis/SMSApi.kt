/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class SMSApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * List Inbound SMS
    * Retrieve a list of Inbound SMS message objects.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pageSize The count of objects to return per page. (optional, default to 10)
    * @param from Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)
    * @param to Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)
    * @param dateSent Filter sms message objects by this date. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun smsGetinboundsms(page: kotlin.Int, pageSize: kotlin.Int, from: kotlin.String, to: kotlin.String, dateSent: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Page" to "$page", "PageSize" to "$pageSize", "From" to "$from", "To" to "$to", "DateSent" to "$dateSent")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sms/getinboundsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List SMS
    * Retrieve a list of Outbound SMS message objects.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pageSize Number of individual resources listed in the response per page (optional, default to 10)
    * @param from Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)
    * @param to Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)
    * @param dateSent Only list SMS messages sent in the specified date range (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun smsListsms(page: kotlin.Int, pageSize: kotlin.Int, from: kotlin.String, to: kotlin.String, dateSent: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Page" to "$page", "PageSize" to "$pageSize", "From" to "$from", "To" to "$to", "DateSent" to "$dateSent")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sms/listsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Send SMS
    * Send an SMS from a Ytel number
    * @param from The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent. 
    * @param to The 10-digit phone number (E.164 format) that will receive the message. 
    * @param body The body message that is to be sent in the text. 
    * @param method Specifies the HTTP method used to request the required URL once SMS sent. (optional)
    * @param messageStatusCallback URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)
    * @param smartsms Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)
    * @param deliveryStatus Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun smsSendsms(from: kotlin.String, to: kotlin.String, body: kotlin.String, method: kotlin.String, messageStatusCallback: kotlin.String, smartsms: kotlin.Boolean, deliveryStatus: kotlin.Boolean) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("From" to "$from", "To" to "$to", "Body" to "$body", "Method" to "$method", "MessageStatusCallback" to "$messageStatusCallback", "Smartsms" to "$smartsms", "DeliveryStatus" to "$deliveryStatus")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sms/sendsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View SMS
    * Retrieve a single SMS message object with details by its SmsSid.
    * @param messageSid The unique identifier for a sms message. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun smsViewdetailsms(messageSid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("MessageSid" to "$messageSid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sms/viewdetailsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View SMS
    * Retrieve a single SMS message object by its SmsSid.
    * @param messageSid The unique identifier for a sms message. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun smsViewsms(messageSid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("MessageSid" to "$messageSid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sms/viewsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
