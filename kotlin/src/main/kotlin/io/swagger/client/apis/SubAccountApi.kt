/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.11
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class SubAccountApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * Create Subaccount
    * Create a sub user account under the parent account
    * @param firstName Sub account user first name 
    * @param lastName sub account user last name 
    * @param email Sub account email address 
    * @param friendlyName Descriptive name of the sub account 
    * @param password The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun userCreatesubaccount(firstName: kotlin.String, lastName: kotlin.String, email: kotlin.String, friendlyName: kotlin.String, password: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("FirstName" to "$firstName", "LastName" to "$lastName", "Email" to "$email", "FriendlyName" to "$friendlyName", "Password" to "$password")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/user/createsubaccount.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Subaccount
    * Delete sub account or merge numbers into parent
    * @param subAccountSID The SubaccountSid to be deleted 
    * @param mergeNumber 0 to delete or 1 to merge numbers to parent account. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun userDeletesubaccount(subAccountSID: kotlin.String, mergeNumber: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("SubAccountSID" to "$subAccountSID", "MergeNumber" to "$mergeNumber")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/user/deletesubaccount.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Toggle Subaccount Status
    * Suspend or unsuspend
    * @param subAccountSID The SubaccountSid to be activated or suspended 
    * @param activate 0 to suspend or 1 to activate 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun userSubaccountactivation(subAccountSID: kotlin.String, activate: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("SubAccountSID" to "$subAccountSID", "Activate" to "$activate")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/user/subaccountactivation.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
