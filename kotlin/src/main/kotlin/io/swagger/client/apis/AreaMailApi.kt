/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.11
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class AreaMailApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * Create AreaMail
    * Create a new AreaMail object.
    * @param routes List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043 
    * @param attachbyid Set an existing areamail by attaching its AreamailId. 
    * @param front The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required 
    * @param back The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. 
    * @param description A string value to use as a description for this AreaMail item. (optional)
    * @param targettype The delivery location type. (optional)
    * @param htmldata A string value that contains HTML markup. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun areamailCreate(routes: kotlin.String, attachbyid: kotlin.String, front: kotlin.String, back: kotlin.String, description: kotlin.String, targettype: kotlin.String, htmldata: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("routes" to "$routes", "attachbyid" to "$attachbyid", "front" to "$front", "back" to "$back", "description" to "$description", "targettype" to "$targettype", "htmldata" to "$htmldata")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/areamail/create.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete AreaMail
    * Remove an AreaMail object by its AreaMailId.
    * @param areamailid The unique identifier for an AreaMail object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun areamailDelete(areamailid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("areamailid" to "$areamailid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/areamail/delete.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List AreaMails
    * Retrieve a list of AreaMail objects.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize The count of objects to return per page. (optional, default to 10)
    * @param areamailsid The unique identifier for an AreaMail object. (optional)
    * @param dateCreated The date the AreaMail was created. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun areamailLists(page: kotlin.Int, pagesize: kotlin.Int, areamailsid: kotlin.String, dateCreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "areamailsid" to "$areamailsid", "dateCreated" to "$dateCreated")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/areamail/lists.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View AreaMail
    * Retrieve an AreaMail object by its AreaMailId.
    * @param areamailid The unique identifier for an AreaMail object. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun areamailView(areamailid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("areamailid" to "$areamailid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/areamail/view.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
