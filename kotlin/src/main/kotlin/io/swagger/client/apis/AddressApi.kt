/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class AddressApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * Create Address
    * To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
    * @param name Name of user 
    * @param address Address of user. 
    * @param country Must be a 2 letter country short-name code (ISO 3166) 
    * @param state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. 
    * @param city City Name. 
    * @param zip Zip code of city. 
    * @param description Description of addresses. (optional)
    * @param email Email Id of user. (optional)
    * @param phone Phone number of user. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun addressCreateaddress(name: kotlin.String, address: kotlin.String, country: kotlin.String, state: kotlin.String, city: kotlin.String, zip: kotlin.String, description: kotlin.String, email: kotlin.String, phone: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Name" to "$name", "Address" to "$address", "Country" to "$country", "State" to "$state", "City" to "$city", "Zip" to "$zip", "Description" to "$description", "email" to "$email", "Phone" to "$phone")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/address/createaddress.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete Address
    * To delete Address to your address book
    * @param addressid The identifier of the address to be deleted. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun addressDeleteaddress(addressid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("addressid" to "$addressid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/address/deleteaddress.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Addresses
    * List All Address 
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
    * @param addressid addresses Sid (optional)
    * @param dateCreated date created address. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun addressListaddress(page: kotlin.Int, pagesize: kotlin.Int, addressid: kotlin.String, dateCreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "addressid" to "$addressid", "dateCreated" to "$dateCreated")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/address/listaddress.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Verify Address
    * Validates an address given.
    * @param addressid The identifier of the address to be verified. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun addressVerifyaddress(addressid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("addressid" to "$addressid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/address/verifyaddress.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View Address
    * View Address Specific address Book by providing the address id
    * @param addressid The identifier of the address to be retrieved. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun addressViewaddress(addressid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("addressid" to "$addressid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/address/viewaddress.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
