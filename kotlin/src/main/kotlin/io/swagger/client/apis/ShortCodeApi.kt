/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis


import io.swagger.client.infrastructure.*

class ShortCodeApi(basePath: kotlin.String = "https://api.message360.com/api/v3/") : ApiClient(basePath) {

    /**
    * List Inbound SMS
    * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pagesize Number of individual resources listed in the response per page (optional, default to 10)
    * @param from Only list SMS messages sent from this number (optional)
    * @param shortcode Only list SMS messages sent to Shortcode (optional)
    * @param datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun dedicatedshortcodeGetinboundsms(page: kotlin.Int, pagesize: kotlin.Int, from: kotlin.String, shortcode: kotlin.String, datecreated: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("page" to "$page", "pagesize" to "$pagesize", "From" to "$from", "Shortcode" to "$shortcode", "Datecreated" to "$datecreated")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/dedicatedshortcode/getinboundsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Shortcodes
    * Retrieve a list of Short Code assignment associated with your Ytel account.
    * @param shortcode Only list Short Code Assignment sent from this Short Code (optional)
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
    * @param pagesize The count of objects to return per page. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun dedicatedshortcodeListshortcode(shortcode: kotlin.String, page: kotlin.String, pagesize: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode", "page" to "$page", "pagesize" to "$pagesize")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/dedicatedshortcode/listshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Send SMS
    * Send Dedicated Shortcode
    * @param shortcode Your dedicated shortcode 
    * @param to The number to send your SMS to 
    * @param body The body of your message 
    * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
    * @param messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun dedicatedshortcodeSendsms(shortcode: kotlin.Int, to: kotlin.Double, body: kotlin.String, method: kotlin.String, messagestatuscallback: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("shortcode" to "$shortcode", "to" to "$to", "body" to "$body", "method" to "$method", "messagestatuscallback" to "$messagestatuscallback")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/dedicatedshortcode/sendsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Update Shortcode
    * Update a dedicated shortcode.
    * @param shortcode List of valid dedicated shortcode to your Ytel account. 
    * @param friendlyName User generated name of the dedicated shortcode. (optional)
    * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
    * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
    * @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
    * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun dedicatedshortcodeUpdateshortcode(shortcode: kotlin.String, friendlyName: kotlin.String, callbackMethod: kotlin.String, callbackUrl: kotlin.String, fallbackMethod: kotlin.String, fallbackUrl: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode", "FriendlyName" to "$friendlyName", "CallbackMethod" to "$callbackMethod", "CallbackUrl" to "$callbackUrl", "FallbackMethod" to "$fallbackMethod", "FallbackUrl" to "$fallbackUrl")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/dedicatedshortcode/updateshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View SMS
    * Retrieve a single Short Code object by its shortcode assignment.
    * @param shortcode List of valid Dedicated Short Code to your Ytel account 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun dedicatedshortcodeViewshortcode(shortcode: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/dedicatedshortcode/viewshortcode.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List SMS
    * Retrieve a list of Short Code messages.
    * @param shortcode Only list messages sent from this Short Code (optional)
    * @param to Only list messages sent to this number (optional)
    * @param dateSent Only list messages sent with the specified date (optional)
    * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
    * @param pageSize The count of objects to return per page. (optional, default to 10)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeListsms(shortcode: kotlin.String, to: kotlin.String, dateSent: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("Shortcode" to "$shortcode", "To" to "$to", "DateSent" to "$dateSent", "Page" to "$page", "PageSize" to "$pageSize")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/listsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * View SMS
    * View a single Sms Short Code message.
    * @param messageSid The unique identifier for the sms resource 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun shortcodeViewsms(messageSid: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("MessageSid" to "$messageSid")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/shortcode/viewsms.json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
