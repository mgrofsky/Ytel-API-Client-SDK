/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object PostCardApi {

  /**
   * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param to The AddressId or an object structured when creating an address by addresses/Create.
   * @param from The AddressId or an object structured when creating an address by addresses/Create.
   * @param attachbyid Set an existing postcard by attaching its PostcardId.
   * @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
   * @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
   * @param message The message for the back of the postcard with a maximum of 350 characters.
   * @param setting Code for the dimensions of the media to be printed.
   * @param description A description for the postcard.
   * @param htmldata A string value that contains HTML markup.
   */
  def postcardCreatepostcard(to: String, from: String, attachbyid: String, front: String, back: String, message: String, setting: String, description: Option[String] = None, htmldata: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/Postcard/createpostcard.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("to", to)
      .withFormParam("from", from)
      .withFormParam("attachbyid", attachbyid)
      .withFormParam("front", front)
      .withFormParam("back", back)
      .withFormParam("message", message)
      .withFormParam("setting", setting)
      .withFormParam("description", description)
      .withFormParam("htmldata", htmldata)
      .withSuccessResponse[String](200)
        /**
   * Remove a postcard object.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param postcardid The unique identifier of a postcard object.
   */
  def postcardDeletepostcard(postcardid: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/Postcard/deletepostcard.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("postcardid", postcardid)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param postcardid The unique identifier for a postcard object.
   * @param dateCreated The date the postcard was created.
   */
  def postcardListpostcard(page: Option[Int], pagesize: Option[Int], postcardid: Option[String] = None, dateCreated: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/Postcard/listpostcard.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("page", page)
      .withFormParam("pagesize", pagesize)
      .withFormParam("postcardid", postcardid)
      .withFormParam("dateCreated", dateCreated)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a postcard object by its PostcardId.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param postcardid The unique identifier for a postcard object.
   */
  def postcardViewpostcard(postcardid: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/Postcard/viewpostcard.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("postcardid", postcardid)
      .withSuccessResponse[String](200)
      

}

