/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object EmailApi {

  /**
   * Add an email to the unsubscribe list
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email A valid email address that is to be added to the unsubscribe list
   */
  def emailAddunsubscribesemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/addunsubscribesemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("email", email)
      .withSuccessResponse[String](200)
        /**
   * Remove an email from blocked emails list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email The email address to be remove from the blocked list.
   */
  def emailDeleteblocksemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/deleteblocksemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Email", email)
      .withSuccessResponse[String](200)
        /**
   * Remove an email address from the bounced list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email The email address to be remove from the bounced email list.
   */
  def emailDeletebouncesemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/deletebouncesemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Email", email)
      .withSuccessResponse[String](200)
        /**
   * Remove an email from the invalid email list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email A valid email address that is to be remove from the invalid email list.
   */
  def emailDeleteinvalidemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/deleteinvalidemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Email", email)
      .withSuccessResponse[String](200)
        /**
   * Remove an email from the spam email list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email A valid email address that is to be remove from the spam list.
   */
  def emailDeletespamemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/deletespamemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Email", email)
      .withSuccessResponse[String](200)
        /**
   * Remove an email address from the list of unsubscribed emails.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param email A valid email address that is to be remove from the unsubscribe list.
   */
  def emailDeleteunsubscribedemail(email: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/deleteunsubscribedemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("email", email)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of emails that have been blocked.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param offset The starting point of the list of blocked emails that should be returned.
   * @param limit The count of results that should be returned.
   */
  def emailListblockemail(offset: Option[String] = None, limit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/listblockemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Offset", offset)
      .withFormParam("Limit", limit)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of emails that have bounced.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param offset The starting point of the list of bounced emails that should be returned.
   * @param limit The count of results that should be returned.
   */
  def emailListbounceemail(offset: Option[String] = None, limit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/listbounceemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Offset", offset)
      .withFormParam("Limit", limit)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of invalid email addresses.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param offset The starting point of the list of invalid emails that should be returned.
   * @param limit The count of results that should be returned.
   */
  def emailListinvalidemail(offset: Option[String] = None, limit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/listinvalidemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Offset", offset)
      .withFormParam("Limit", limit)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of emails that are on the spam list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param offset The starting point of the list of spam emails that should be returned.
   * @param limit The count of results that should be returned.
   */
  def emailListspamemail(offset: Option[String] = None, limit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/listspamemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Offset", offset)
      .withFormParam("Limit", limit)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of email addresses from the unsubscribe list.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param offset The starting point of the list of unsubscribed emails that should be returned.
   * @param limit The count of results that should be returned.
   */
  def emailListunsubscribedemail(offset: Option[String] = None, limit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/listunsubscribedemail.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("Offset", offset)
      .withFormParam("Limit", limit)
      .withSuccessResponse[String](200)
        /**
   * Create and submit an email message to one or more email addresses.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param to A valid address that will receive the email. Multiple addresses can be separated by using commas.
   * @param `type` Specifies the type of email to be sent
   * @param subject The subject of the mail. Must be a valid string.
   * @param message The email message that is to be sent in the text.
   * @param from A valid address that will send the email.
   * @param cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
   * @param bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
   * @param attachment A file that is attached to the email. Must be less than 7 MB in size.
   */
  def emailSendemails(to: String, `type`: String, subject: String, message: String, from: Option[String] = None, cc: Option[String] = None, bcc: Option[String] = None, attachment: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.ytel.com/api/v3", "/email/sendemails.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("To", to)
      .withFormParam("Type", `type`)
      .withFormParam("Subject", subject)
      .withFormParam("Message", message)
      .withFormParam("From", from)
      .withFormParam("Cc", cc)
      .withFormParam("Bcc", bcc)
      .withFormParam("Attachment", attachment)
      .withSuccessResponse[String](200)
      

}

