/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object LetterApi {

  /**
   * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param to The AddressId or an object structured when creating an address by addresses/Create.
   * @param from The AddressId or an object structured when creating an address by addresses/Create.
   * @param attachbyid Set an existing letter by attaching its LetterId.
   * @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.
   * @param color Specify if letter should be printed in color.
   * @param description A description for the letter.
   * @param extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
   * @param doublesided Specify if letter should be printed on both sides.
   * @param template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
   * @param htmldata A string value that contains HTML markup.
   */
  def letterCreate(to: String, from: String, attachbyid: String, file: String, color: String, description: Option[String] = None, extraservice: Option[String] = None, doublesided: Option[String] = None, template: Option[String] = None, htmldata: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/letter/create.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("to", to)
      .withFormParam("from", from)
      .withFormParam("attachbyid", attachbyid)
      .withFormParam("file", file)
      .withFormParam("color", color)
      .withFormParam("description", description)
      .withFormParam("extraservice", extraservice)
      .withFormParam("doublesided", doublesided)
      .withFormParam("template", template)
      .withFormParam("htmldata", htmldata)
      .withSuccessResponse[String](200)
        /**
   * Remove a letter object by its LetterId.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param lettersid The unique identifier for a letter object.
   */
  def letterDelete(lettersid: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/letter/delete.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("lettersid", lettersid)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param lettersid The unique identifier for a letter object.
   * @param dateCreated The date the letter was created.
   */
  def letterListsletter(page: Option[Int], pagesize: Option[Int], lettersid: Option[String] = None, dateCreated: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/letter/listsletter.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("page", page)
      .withFormParam("pagesize", pagesize)
      .withFormParam("lettersid", lettersid)
      .withFormParam("dateCreated", dateCreated)
      .withSuccessResponse[String](200)
        /**
   * Retrieve a letter object by its LetterSid.
   * 
   * Expected answers:
   *   code 200 : String 
   * 
   * Available security schemes:
   *   auth (basic)
   * 
   * @param lettersid The unique identifier for a letter object.
   */
  def letterViewletter(lettersid: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.message360.com/api/v3/", "/letter/viewletter.json", "application/x-www-form-urlencoded")
      .withCredentials(basicAuth)
      .withFormParam("lettersid", lettersid)
      .withSuccessResponse[String](200)
      

}

