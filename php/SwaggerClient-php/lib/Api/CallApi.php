<?php
/**
 * CallApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CallApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation callsGroupcall
     *
     * Group Call
     *
     * @param  string $from This number to display on Caller ID as calling (required)
     * @param  string $to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
     * @param  string $group_confirm_file Specify the audio file you want to play when the called party picks up the call (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) we should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  string $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsGroupcall($from, $to, $url, $group_confirm_key, $group_confirm_file, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null)
    {
        list($response) = $this->callsGroupcallWithHttpInfo($from, $to, $url, $group_confirm_key, $group_confirm_file, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url);
        return $response;
    }

    /**
     * Operation callsGroupcallWithHttpInfo
     *
     * Group Call
     *
     * @param  string $from This number to display on Caller ID as calling (required)
     * @param  string $to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
     * @param  string $group_confirm_file Specify the audio file you want to play when the called party picks up the call (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) we should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  string $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsGroupcallWithHttpInfo($from, $to, $url, $group_confirm_key, $group_confirm_file, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null)
    {
        $returnType = 'string';
        $request = $this->callsGroupcallRequest($from, $to, $url, $group_confirm_key, $group_confirm_file, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsGroupcallAsync
     *
     * Group Call
     *
     * @param  string $from This number to display on Caller ID as calling (required)
     * @param  string $to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
     * @param  string $group_confirm_file Specify the audio file you want to play when the called party picks up the call (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) we should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  string $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsGroupcallAsync($from, $to, $url, $group_confirm_key, $group_confirm_file, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null)
    {
        return $this->callsGroupcallAsyncWithHttpInfo($from, $to, $url, $group_confirm_key, $group_confirm_file, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsGroupcallAsyncWithHttpInfo
     *
     * Group Call
     *
     * @param  string $from This number to display on Caller ID as calling (required)
     * @param  string $to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
     * @param  string $group_confirm_file Specify the audio file you want to play when the called party picks up the call (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) we should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  string $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsGroupcallAsyncWithHttpInfo($from, $to, $url, $group_confirm_key, $group_confirm_file, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null)
    {
        $returnType = 'string';
        $request = $this->callsGroupcallRequest($from, $to, $url, $group_confirm_key, $group_confirm_file, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsGroupcall'
     *
     * @param  string $from This number to display on Caller ID as calling (required)
     * @param  string $to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
     * @param  string $group_confirm_file Specify the audio file you want to play when the called party picks up the call (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) we should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  string $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsGroupcallRequest($from, $to, $url, $group_confirm_key, $group_confirm_file, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling callsGroupcall'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling callsGroupcall'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling callsGroupcall'
            );
        }
        // verify the required parameter 'group_confirm_key' is set
        if ($group_confirm_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_confirm_key when calling callsGroupcall'
            );
        }
        // verify the required parameter 'group_confirm_file' is set
        if ($group_confirm_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_confirm_file when calling callsGroupcall'
            );
        }

        $resourcePath = '/calls/groupcall.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($from !== null) {
            $formParams['From'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($to !== null) {
            $formParams['To'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($url !== null) {
            $formParams['Url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($group_confirm_key !== null) {
            $formParams['GroupConfirmKey'] = ObjectSerializer::toFormValue($group_confirm_key);
        }
        // form params
        if ($group_confirm_file !== null) {
            $formParams['GroupConfirmFile'] = ObjectSerializer::toFormValue($group_confirm_file);
        }
        // form params
        if ($method !== null) {
            $formParams['Method'] = ObjectSerializer::toFormValue($method);
        }
        // form params
        if ($status_call_back_url !== null) {
            $formParams['StatusCallBackUrl'] = ObjectSerializer::toFormValue($status_call_back_url);
        }
        // form params
        if ($status_call_back_method !== null) {
            $formParams['StatusCallBackMethod'] = ObjectSerializer::toFormValue($status_call_back_method);
        }
        // form params
        if ($fall_back_url !== null) {
            $formParams['FallBackUrl'] = ObjectSerializer::toFormValue($fall_back_url);
        }
        // form params
        if ($fall_back_method !== null) {
            $formParams['FallBackMethod'] = ObjectSerializer::toFormValue($fall_back_method);
        }
        // form params
        if ($heart_beat_url !== null) {
            $formParams['HeartBeatUrl'] = ObjectSerializer::toFormValue($heart_beat_url);
        }
        // form params
        if ($heart_beat_method !== null) {
            $formParams['HeartBeatMethod'] = ObjectSerializer::toFormValue($heart_beat_method);
        }
        // form params
        if ($timeout !== null) {
            $formParams['Timeout'] = ObjectSerializer::toFormValue($timeout);
        }
        // form params
        if ($play_dtmf !== null) {
            $formParams['PlayDtmf'] = ObjectSerializer::toFormValue($play_dtmf);
        }
        // form params
        if ($hide_caller_id !== null) {
            $formParams['HideCallerId'] = ObjectSerializer::toFormValue($hide_caller_id);
        }
        // form params
        if ($record !== null) {
            $formParams['Record'] = ObjectSerializer::toFormValue($record);
        }
        // form params
        if ($record_call_back_url !== null) {
            $formParams['RecordCallBackUrl'] = ObjectSerializer::toFormValue($record_call_back_url);
        }
        // form params
        if ($record_call_back_method !== null) {
            $formParams['RecordCallBackMethod'] = ObjectSerializer::toFormValue($record_call_back_method);
        }
        // form params
        if ($transcribe !== null) {
            $formParams['Transcribe'] = ObjectSerializer::toFormValue($transcribe);
        }
        // form params
        if ($transcribe_call_back_url !== null) {
            $formParams['TranscribeCallBackUrl'] = ObjectSerializer::toFormValue($transcribe_call_back_url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsInterruptcalls
     *
     * Interrupt Call
     *
     * @param  string $call_sid The unique identifier for voice call that is in progress. (required)
     * @param  string $url URL the in-progress call will be redirected to (optional)
     * @param  string $method The method used to request the above Url parameter (optional)
     * @param  string $status Status to set the in-progress call to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsInterruptcalls($call_sid, $url = null, $method = null, $status = null)
    {
        list($response) = $this->callsInterruptcallsWithHttpInfo($call_sid, $url, $method, $status);
        return $response;
    }

    /**
     * Operation callsInterruptcallsWithHttpInfo
     *
     * Interrupt Call
     *
     * @param  string $call_sid The unique identifier for voice call that is in progress. (required)
     * @param  string $url URL the in-progress call will be redirected to (optional)
     * @param  string $method The method used to request the above Url parameter (optional)
     * @param  string $status Status to set the in-progress call to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsInterruptcallsWithHttpInfo($call_sid, $url = null, $method = null, $status = null)
    {
        $returnType = 'string';
        $request = $this->callsInterruptcallsRequest($call_sid, $url, $method, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsInterruptcallsAsync
     *
     * Interrupt Call
     *
     * @param  string $call_sid The unique identifier for voice call that is in progress. (required)
     * @param  string $url URL the in-progress call will be redirected to (optional)
     * @param  string $method The method used to request the above Url parameter (optional)
     * @param  string $status Status to set the in-progress call to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsInterruptcallsAsync($call_sid, $url = null, $method = null, $status = null)
    {
        return $this->callsInterruptcallsAsyncWithHttpInfo($call_sid, $url, $method, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsInterruptcallsAsyncWithHttpInfo
     *
     * Interrupt Call
     *
     * @param  string $call_sid The unique identifier for voice call that is in progress. (required)
     * @param  string $url URL the in-progress call will be redirected to (optional)
     * @param  string $method The method used to request the above Url parameter (optional)
     * @param  string $status Status to set the in-progress call to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsInterruptcallsAsyncWithHttpInfo($call_sid, $url = null, $method = null, $status = null)
    {
        $returnType = 'string';
        $request = $this->callsInterruptcallsRequest($call_sid, $url, $method, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsInterruptcalls'
     *
     * @param  string $call_sid The unique identifier for voice call that is in progress. (required)
     * @param  string $url URL the in-progress call will be redirected to (optional)
     * @param  string $method The method used to request the above Url parameter (optional)
     * @param  string $status Status to set the in-progress call to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsInterruptcallsRequest($call_sid, $url = null, $method = null, $status = null)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsInterruptcalls'
            );
        }

        $resourcePath = '/calls/interruptcalls.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['CallSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // form params
        if ($url !== null) {
            $formParams['Url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($method !== null) {
            $formParams['Method'] = ObjectSerializer::toFormValue($method);
        }
        // form params
        if ($status !== null) {
            $formParams['Status'] = ObjectSerializer::toFormValue($status);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsListcalls
     *
     * List Calls
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $to Filter calls that were sent to this 10-digit number (E.164 format). (optional)
     * @param  string $from Filter calls that were sent from this 10-digit number (E.164 format). (optional)
     * @param  string $date_created Return calls that are from a specified date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsListcalls($page = '1', $page_size = '10', $to = null, $from = null, $date_created = null)
    {
        list($response) = $this->callsListcallsWithHttpInfo($page, $page_size, $to, $from, $date_created);
        return $response;
    }

    /**
     * Operation callsListcallsWithHttpInfo
     *
     * List Calls
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $to Filter calls that were sent to this 10-digit number (E.164 format). (optional)
     * @param  string $from Filter calls that were sent from this 10-digit number (E.164 format). (optional)
     * @param  string $date_created Return calls that are from a specified date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsListcallsWithHttpInfo($page = '1', $page_size = '10', $to = null, $from = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->callsListcallsRequest($page, $page_size, $to, $from, $date_created);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsListcallsAsync
     *
     * List Calls
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $to Filter calls that were sent to this 10-digit number (E.164 format). (optional)
     * @param  string $from Filter calls that were sent from this 10-digit number (E.164 format). (optional)
     * @param  string $date_created Return calls that are from a specified date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsListcallsAsync($page = '1', $page_size = '10', $to = null, $from = null, $date_created = null)
    {
        return $this->callsListcallsAsyncWithHttpInfo($page, $page_size, $to, $from, $date_created)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsListcallsAsyncWithHttpInfo
     *
     * List Calls
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $to Filter calls that were sent to this 10-digit number (E.164 format). (optional)
     * @param  string $from Filter calls that were sent from this 10-digit number (E.164 format). (optional)
     * @param  string $date_created Return calls that are from a specified date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsListcallsAsyncWithHttpInfo($page = '1', $page_size = '10', $to = null, $from = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->callsListcallsRequest($page, $page_size, $to, $from, $date_created);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsListcalls'
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $to Filter calls that were sent to this 10-digit number (E.164 format). (optional)
     * @param  string $from Filter calls that were sent from this 10-digit number (E.164 format). (optional)
     * @param  string $date_created Return calls that are from a specified date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsListcallsRequest($page = '1', $page_size = '10', $to = null, $from = null, $date_created = null)
    {

        $resourcePath = '/calls/listcalls.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page !== null) {
            $formParams['Page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($page_size !== null) {
            $formParams['PageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($to !== null) {
            $formParams['To'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($from !== null) {
            $formParams['From'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($date_created !== null) {
            $formParams['DateCreated'] = ObjectSerializer::toFormValue($date_created);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsMakecall
     *
     * Make Call
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $to To number (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  bool $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     * @param  string $if_machine How Ytel should handle the receiving numbers voicemail machine (optional)
     * @param  string $if_machine_url URL requested when IfMachine&#x3D;continue (optional)
     * @param  string $if_machine_method Method used to request the IfMachineUrl. (optional)
     * @param  bool $feedback Specify if survey should be enable or not (optional)
     * @param  string $survey_id The unique identifier for the survey. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsMakecall($from, $to, $url, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null, $if_machine = null, $if_machine_url = null, $if_machine_method = null, $feedback = null, $survey_id = null)
    {
        list($response) = $this->callsMakecallWithHttpInfo($from, $to, $url, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url, $if_machine, $if_machine_url, $if_machine_method, $feedback, $survey_id);
        return $response;
    }

    /**
     * Operation callsMakecallWithHttpInfo
     *
     * Make Call
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $to To number (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  bool $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     * @param  string $if_machine How Ytel should handle the receiving numbers voicemail machine (optional)
     * @param  string $if_machine_url URL requested when IfMachine&#x3D;continue (optional)
     * @param  string $if_machine_method Method used to request the IfMachineUrl. (optional)
     * @param  bool $feedback Specify if survey should be enable or not (optional)
     * @param  string $survey_id The unique identifier for the survey. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsMakecallWithHttpInfo($from, $to, $url, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null, $if_machine = null, $if_machine_url = null, $if_machine_method = null, $feedback = null, $survey_id = null)
    {
        $returnType = 'string';
        $request = $this->callsMakecallRequest($from, $to, $url, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url, $if_machine, $if_machine_url, $if_machine_method, $feedback, $survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsMakecallAsync
     *
     * Make Call
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $to To number (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  bool $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     * @param  string $if_machine How Ytel should handle the receiving numbers voicemail machine (optional)
     * @param  string $if_machine_url URL requested when IfMachine&#x3D;continue (optional)
     * @param  string $if_machine_method Method used to request the IfMachineUrl. (optional)
     * @param  bool $feedback Specify if survey should be enable or not (optional)
     * @param  string $survey_id The unique identifier for the survey. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsMakecallAsync($from, $to, $url, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null, $if_machine = null, $if_machine_url = null, $if_machine_method = null, $feedback = null, $survey_id = null)
    {
        return $this->callsMakecallAsyncWithHttpInfo($from, $to, $url, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url, $if_machine, $if_machine_url, $if_machine_method, $feedback, $survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsMakecallAsyncWithHttpInfo
     *
     * Make Call
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $to To number (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  bool $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     * @param  string $if_machine How Ytel should handle the receiving numbers voicemail machine (optional)
     * @param  string $if_machine_url URL requested when IfMachine&#x3D;continue (optional)
     * @param  string $if_machine_method Method used to request the IfMachineUrl. (optional)
     * @param  bool $feedback Specify if survey should be enable or not (optional)
     * @param  string $survey_id The unique identifier for the survey. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsMakecallAsyncWithHttpInfo($from, $to, $url, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null, $if_machine = null, $if_machine_url = null, $if_machine_method = null, $feedback = null, $survey_id = null)
    {
        $returnType = 'string';
        $request = $this->callsMakecallRequest($from, $to, $url, $method, $status_call_back_url, $status_call_back_method, $fall_back_url, $fall_back_method, $heart_beat_url, $heart_beat_method, $timeout, $play_dtmf, $hide_caller_id, $record, $record_call_back_url, $record_call_back_method, $transcribe, $transcribe_call_back_url, $if_machine, $if_machine_url, $if_machine_method, $feedback, $survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsMakecall'
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $to To number (required)
     * @param  string $url URL requested once the call connects (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
     * @param  string $fall_back_url URL requested if the initial Url parameter fails or encounters an error (optional)
     * @param  string $fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)
     * @param  string $heart_beat_method Specifies the HTTP method used to request HeartbeatUrl. (optional)
     * @param  int $timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)
     * @param  string $play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)
     * @param  bool $hide_caller_id Specifies if the caller id will be hidden (optional)
     * @param  bool $record Specifies if the call should be recorded (optional)
     * @param  string $record_call_back_url Recording parameters will be sent here upon completion (optional)
     * @param  string $record_call_back_method Method used to request the RecordCallback URL. (optional)
     * @param  bool $transcribe Specifies if the call recording should be transcribed (optional)
     * @param  string $transcribe_call_back_url Transcription parameters will be sent here upon completion (optional)
     * @param  string $if_machine How Ytel should handle the receiving numbers voicemail machine (optional)
     * @param  string $if_machine_url URL requested when IfMachine&#x3D;continue (optional)
     * @param  string $if_machine_method Method used to request the IfMachineUrl. (optional)
     * @param  bool $feedback Specify if survey should be enable or not (optional)
     * @param  string $survey_id The unique identifier for the survey. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsMakecallRequest($from, $to, $url, $method = null, $status_call_back_url = null, $status_call_back_method = null, $fall_back_url = null, $fall_back_method = null, $heart_beat_url = null, $heart_beat_method = null, $timeout = null, $play_dtmf = null, $hide_caller_id = null, $record = null, $record_call_back_url = null, $record_call_back_method = null, $transcribe = null, $transcribe_call_back_url = null, $if_machine = null, $if_machine_url = null, $if_machine_method = null, $feedback = null, $survey_id = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling callsMakecall'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling callsMakecall'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling callsMakecall'
            );
        }

        $resourcePath = '/calls/makecall.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($from !== null) {
            $formParams['From'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($to !== null) {
            $formParams['To'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($url !== null) {
            $formParams['Url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($method !== null) {
            $formParams['Method'] = ObjectSerializer::toFormValue($method);
        }
        // form params
        if ($status_call_back_url !== null) {
            $formParams['StatusCallBackUrl'] = ObjectSerializer::toFormValue($status_call_back_url);
        }
        // form params
        if ($status_call_back_method !== null) {
            $formParams['StatusCallBackMethod'] = ObjectSerializer::toFormValue($status_call_back_method);
        }
        // form params
        if ($fall_back_url !== null) {
            $formParams['FallBackUrl'] = ObjectSerializer::toFormValue($fall_back_url);
        }
        // form params
        if ($fall_back_method !== null) {
            $formParams['FallBackMethod'] = ObjectSerializer::toFormValue($fall_back_method);
        }
        // form params
        if ($heart_beat_url !== null) {
            $formParams['HeartBeatUrl'] = ObjectSerializer::toFormValue($heart_beat_url);
        }
        // form params
        if ($heart_beat_method !== null) {
            $formParams['HeartBeatMethod'] = ObjectSerializer::toFormValue($heart_beat_method);
        }
        // form params
        if ($timeout !== null) {
            $formParams['Timeout'] = ObjectSerializer::toFormValue($timeout);
        }
        // form params
        if ($play_dtmf !== null) {
            $formParams['PlayDtmf'] = ObjectSerializer::toFormValue($play_dtmf);
        }
        // form params
        if ($hide_caller_id !== null) {
            $formParams['HideCallerId'] = ObjectSerializer::toFormValue($hide_caller_id);
        }
        // form params
        if ($record !== null) {
            $formParams['Record'] = ObjectSerializer::toFormValue($record);
        }
        // form params
        if ($record_call_back_url !== null) {
            $formParams['RecordCallBackUrl'] = ObjectSerializer::toFormValue($record_call_back_url);
        }
        // form params
        if ($record_call_back_method !== null) {
            $formParams['RecordCallBackMethod'] = ObjectSerializer::toFormValue($record_call_back_method);
        }
        // form params
        if ($transcribe !== null) {
            $formParams['Transcribe'] = ObjectSerializer::toFormValue($transcribe);
        }
        // form params
        if ($transcribe_call_back_url !== null) {
            $formParams['TranscribeCallBackUrl'] = ObjectSerializer::toFormValue($transcribe_call_back_url);
        }
        // form params
        if ($if_machine !== null) {
            $formParams['IfMachine'] = ObjectSerializer::toFormValue($if_machine);
        }
        // form params
        if ($if_machine_url !== null) {
            $formParams['IfMachineUrl'] = ObjectSerializer::toFormValue($if_machine_url);
        }
        // form params
        if ($if_machine_method !== null) {
            $formParams['IfMachineMethod'] = ObjectSerializer::toFormValue($if_machine_method);
        }
        // form params
        if ($feedback !== null) {
            $formParams['Feedback'] = ObjectSerializer::toFormValue($feedback);
        }
        // form params
        if ($survey_id !== null) {
            $formParams['SurveyId'] = ObjectSerializer::toFormValue($survey_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsMakervm
     *
     * Send RVM
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $rvm_caller_id A required secondary Caller ID for RVM to work. (required)
     * @param  string $to A valid number (E.164 format) that will receive the phone call. (required)
     * @param  string $voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsMakervm($from, $rvm_caller_id, $to, $voice_mail_url, $method = 'GET', $status_call_back_url = null, $stats_call_back_method = null)
    {
        list($response) = $this->callsMakervmWithHttpInfo($from, $rvm_caller_id, $to, $voice_mail_url, $method, $status_call_back_url, $stats_call_back_method);
        return $response;
    }

    /**
     * Operation callsMakervmWithHttpInfo
     *
     * Send RVM
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $rvm_caller_id A required secondary Caller ID for RVM to work. (required)
     * @param  string $to A valid number (E.164 format) that will receive the phone call. (required)
     * @param  string $voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsMakervmWithHttpInfo($from, $rvm_caller_id, $to, $voice_mail_url, $method = 'GET', $status_call_back_url = null, $stats_call_back_method = null)
    {
        $returnType = 'string';
        $request = $this->callsMakervmRequest($from, $rvm_caller_id, $to, $voice_mail_url, $method, $status_call_back_url, $stats_call_back_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsMakervmAsync
     *
     * Send RVM
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $rvm_caller_id A required secondary Caller ID for RVM to work. (required)
     * @param  string $to A valid number (E.164 format) that will receive the phone call. (required)
     * @param  string $voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsMakervmAsync($from, $rvm_caller_id, $to, $voice_mail_url, $method = 'GET', $status_call_back_url = null, $stats_call_back_method = null)
    {
        return $this->callsMakervmAsyncWithHttpInfo($from, $rvm_caller_id, $to, $voice_mail_url, $method, $status_call_back_url, $stats_call_back_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsMakervmAsyncWithHttpInfo
     *
     * Send RVM
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $rvm_caller_id A required secondary Caller ID for RVM to work. (required)
     * @param  string $to A valid number (E.164 format) that will receive the phone call. (required)
     * @param  string $voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsMakervmAsyncWithHttpInfo($from, $rvm_caller_id, $to, $voice_mail_url, $method = 'GET', $status_call_back_url = null, $stats_call_back_method = null)
    {
        $returnType = 'string';
        $request = $this->callsMakervmRequest($from, $rvm_caller_id, $to, $voice_mail_url, $method, $status_call_back_url, $stats_call_back_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsMakervm'
     *
     * @param  string $from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
     * @param  string $rvm_caller_id A required secondary Caller ID for RVM to work. (required)
     * @param  string $to A valid number (E.164 format) that will receive the phone call. (required)
     * @param  string $voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)
     * @param  string $status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsMakervmRequest($from, $rvm_caller_id, $to, $voice_mail_url, $method = 'GET', $status_call_back_url = null, $stats_call_back_method = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling callsMakervm'
            );
        }
        // verify the required parameter 'rvm_caller_id' is set
        if ($rvm_caller_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rvm_caller_id when calling callsMakervm'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling callsMakervm'
            );
        }
        // verify the required parameter 'voice_mail_url' is set
        if ($voice_mail_url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voice_mail_url when calling callsMakervm'
            );
        }

        $resourcePath = '/calls/makervm.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($from !== null) {
            $formParams['From'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($rvm_caller_id !== null) {
            $formParams['RVMCallerId'] = ObjectSerializer::toFormValue($rvm_caller_id);
        }
        // form params
        if ($to !== null) {
            $formParams['To'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($voice_mail_url !== null) {
            $formParams['VoiceMailURL'] = ObjectSerializer::toFormValue($voice_mail_url);
        }
        // form params
        if ($method !== null) {
            $formParams['Method'] = ObjectSerializer::toFormValue($method);
        }
        // form params
        if ($status_call_back_url !== null) {
            $formParams['StatusCallBackUrl'] = ObjectSerializer::toFormValue($status_call_back_url);
        }
        // form params
        if ($stats_call_back_method !== null) {
            $formParams['StatsCallBackMethod'] = ObjectSerializer::toFormValue($stats_call_back_method);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsPlayaudios
     *
     * Play Audio
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
     * @param  string $say_text Valid alphanumeric string that should be played to the In-progress call. (required)
     * @param  int $length Time limit in seconds for audio play back (optional)
     * @param  string $direction The leg of the call audio will be played to (optional)
     * @param  bool $mix If false, all other audio will be muted (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsPlayaudios($call_sid, $audio_url, $say_text, $length = null, $direction = null, $mix = null)
    {
        list($response) = $this->callsPlayaudiosWithHttpInfo($call_sid, $audio_url, $say_text, $length, $direction, $mix);
        return $response;
    }

    /**
     * Operation callsPlayaudiosWithHttpInfo
     *
     * Play Audio
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
     * @param  string $say_text Valid alphanumeric string that should be played to the In-progress call. (required)
     * @param  int $length Time limit in seconds for audio play back (optional)
     * @param  string $direction The leg of the call audio will be played to (optional)
     * @param  bool $mix If false, all other audio will be muted (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsPlayaudiosWithHttpInfo($call_sid, $audio_url, $say_text, $length = null, $direction = null, $mix = null)
    {
        $returnType = 'string';
        $request = $this->callsPlayaudiosRequest($call_sid, $audio_url, $say_text, $length, $direction, $mix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsPlayaudiosAsync
     *
     * Play Audio
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
     * @param  string $say_text Valid alphanumeric string that should be played to the In-progress call. (required)
     * @param  int $length Time limit in seconds for audio play back (optional)
     * @param  string $direction The leg of the call audio will be played to (optional)
     * @param  bool $mix If false, all other audio will be muted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsPlayaudiosAsync($call_sid, $audio_url, $say_text, $length = null, $direction = null, $mix = null)
    {
        return $this->callsPlayaudiosAsyncWithHttpInfo($call_sid, $audio_url, $say_text, $length, $direction, $mix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsPlayaudiosAsyncWithHttpInfo
     *
     * Play Audio
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
     * @param  string $say_text Valid alphanumeric string that should be played to the In-progress call. (required)
     * @param  int $length Time limit in seconds for audio play back (optional)
     * @param  string $direction The leg of the call audio will be played to (optional)
     * @param  bool $mix If false, all other audio will be muted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsPlayaudiosAsyncWithHttpInfo($call_sid, $audio_url, $say_text, $length = null, $direction = null, $mix = null)
    {
        $returnType = 'string';
        $request = $this->callsPlayaudiosRequest($call_sid, $audio_url, $say_text, $length, $direction, $mix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsPlayaudios'
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
     * @param  string $say_text Valid alphanumeric string that should be played to the In-progress call. (required)
     * @param  int $length Time limit in seconds for audio play back (optional)
     * @param  string $direction The leg of the call audio will be played to (optional)
     * @param  bool $mix If false, all other audio will be muted (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsPlayaudiosRequest($call_sid, $audio_url, $say_text, $length = null, $direction = null, $mix = null)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsPlayaudios'
            );
        }
        // verify the required parameter 'audio_url' is set
        if ($audio_url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $audio_url when calling callsPlayaudios'
            );
        }
        // verify the required parameter 'say_text' is set
        if ($say_text === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $say_text when calling callsPlayaudios'
            );
        }

        $resourcePath = '/calls/playaudios.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['CallSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // form params
        if ($audio_url !== null) {
            $formParams['AudioUrl'] = ObjectSerializer::toFormValue($audio_url);
        }
        // form params
        if ($say_text !== null) {
            $formParams['SayText'] = ObjectSerializer::toFormValue($say_text);
        }
        // form params
        if ($length !== null) {
            $formParams['Length'] = ObjectSerializer::toFormValue($length);
        }
        // form params
        if ($direction !== null) {
            $formParams['Direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($mix !== null) {
            $formParams['Mix'] = ObjectSerializer::toFormValue($mix);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsRecordcalls
     *
     * Record Call
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  bool $record Set true to initiate recording or false to terminate recording (required)
     * @param  string $direction The leg of the call to record (optional)
     * @param  int $time_limit Time in seconds the recording duration should not exceed (optional)
     * @param  string $call_back_url URL consulted after the recording completes (optional)
     * @param  string $fileformat Format of the recording file. Can be .mp3 or .wav (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsRecordcalls($call_sid, $record, $direction = null, $time_limit = null, $call_back_url = null, $fileformat = null)
    {
        list($response) = $this->callsRecordcallsWithHttpInfo($call_sid, $record, $direction, $time_limit, $call_back_url, $fileformat);
        return $response;
    }

    /**
     * Operation callsRecordcallsWithHttpInfo
     *
     * Record Call
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  bool $record Set true to initiate recording or false to terminate recording (required)
     * @param  string $direction The leg of the call to record (optional)
     * @param  int $time_limit Time in seconds the recording duration should not exceed (optional)
     * @param  string $call_back_url URL consulted after the recording completes (optional)
     * @param  string $fileformat Format of the recording file. Can be .mp3 or .wav (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsRecordcallsWithHttpInfo($call_sid, $record, $direction = null, $time_limit = null, $call_back_url = null, $fileformat = null)
    {
        $returnType = 'string';
        $request = $this->callsRecordcallsRequest($call_sid, $record, $direction, $time_limit, $call_back_url, $fileformat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsRecordcallsAsync
     *
     * Record Call
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  bool $record Set true to initiate recording or false to terminate recording (required)
     * @param  string $direction The leg of the call to record (optional)
     * @param  int $time_limit Time in seconds the recording duration should not exceed (optional)
     * @param  string $call_back_url URL consulted after the recording completes (optional)
     * @param  string $fileformat Format of the recording file. Can be .mp3 or .wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsRecordcallsAsync($call_sid, $record, $direction = null, $time_limit = null, $call_back_url = null, $fileformat = null)
    {
        return $this->callsRecordcallsAsyncWithHttpInfo($call_sid, $record, $direction, $time_limit, $call_back_url, $fileformat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsRecordcallsAsyncWithHttpInfo
     *
     * Record Call
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  bool $record Set true to initiate recording or false to terminate recording (required)
     * @param  string $direction The leg of the call to record (optional)
     * @param  int $time_limit Time in seconds the recording duration should not exceed (optional)
     * @param  string $call_back_url URL consulted after the recording completes (optional)
     * @param  string $fileformat Format of the recording file. Can be .mp3 or .wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsRecordcallsAsyncWithHttpInfo($call_sid, $record, $direction = null, $time_limit = null, $call_back_url = null, $fileformat = null)
    {
        $returnType = 'string';
        $request = $this->callsRecordcallsRequest($call_sid, $record, $direction, $time_limit, $call_back_url, $fileformat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsRecordcalls'
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  bool $record Set true to initiate recording or false to terminate recording (required)
     * @param  string $direction The leg of the call to record (optional)
     * @param  int $time_limit Time in seconds the recording duration should not exceed (optional)
     * @param  string $call_back_url URL consulted after the recording completes (optional)
     * @param  string $fileformat Format of the recording file. Can be .mp3 or .wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsRecordcallsRequest($call_sid, $record, $direction = null, $time_limit = null, $call_back_url = null, $fileformat = null)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsRecordcalls'
            );
        }
        // verify the required parameter 'record' is set
        if ($record === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record when calling callsRecordcalls'
            );
        }

        $resourcePath = '/calls/recordcalls.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['CallSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // form params
        if ($record !== null) {
            $formParams['Record'] = ObjectSerializer::toFormValue($record);
        }
        // form params
        if ($direction !== null) {
            $formParams['Direction'] = ObjectSerializer::toFormValue($direction);
        }
        // form params
        if ($time_limit !== null) {
            $formParams['TimeLimit'] = ObjectSerializer::toFormValue($time_limit);
        }
        // form params
        if ($call_back_url !== null) {
            $formParams['CallBackUrl'] = ObjectSerializer::toFormValue($call_back_url);
        }
        // form params
        if ($fileformat !== null) {
            $formParams['Fileformat'] = ObjectSerializer::toFormValue($fileformat);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsSenddigits
     *
     * Play DTMF
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w (required)
     * @param  string $play_dtmf_direction The leg of the call DTMF digits should be sent to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsSenddigits($call_sid, $play_dtmf, $play_dtmf_direction = null)
    {
        list($response) = $this->callsSenddigitsWithHttpInfo($call_sid, $play_dtmf, $play_dtmf_direction);
        return $response;
    }

    /**
     * Operation callsSenddigitsWithHttpInfo
     *
     * Play DTMF
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w (required)
     * @param  string $play_dtmf_direction The leg of the call DTMF digits should be sent to (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsSenddigitsWithHttpInfo($call_sid, $play_dtmf, $play_dtmf_direction = null)
    {
        $returnType = 'string';
        $request = $this->callsSenddigitsRequest($call_sid, $play_dtmf, $play_dtmf_direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsSenddigitsAsync
     *
     * Play DTMF
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w (required)
     * @param  string $play_dtmf_direction The leg of the call DTMF digits should be sent to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsSenddigitsAsync($call_sid, $play_dtmf, $play_dtmf_direction = null)
    {
        return $this->callsSenddigitsAsyncWithHttpInfo($call_sid, $play_dtmf, $play_dtmf_direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsSenddigitsAsyncWithHttpInfo
     *
     * Play DTMF
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w (required)
     * @param  string $play_dtmf_direction The leg of the call DTMF digits should be sent to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsSenddigitsAsyncWithHttpInfo($call_sid, $play_dtmf, $play_dtmf_direction = null)
    {
        $returnType = 'string';
        $request = $this->callsSenddigitsRequest($call_sid, $play_dtmf, $play_dtmf_direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsSenddigits'
     *
     * @param  string $call_sid The unique identifier of each call resource (required)
     * @param  string $play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w (required)
     * @param  string $play_dtmf_direction The leg of the call DTMF digits should be sent to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsSenddigitsRequest($call_sid, $play_dtmf, $play_dtmf_direction = null)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsSenddigits'
            );
        }
        // verify the required parameter 'play_dtmf' is set
        if ($play_dtmf === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $play_dtmf when calling callsSenddigits'
            );
        }

        $resourcePath = '/calls/senddigits.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['CallSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // form params
        if ($play_dtmf !== null) {
            $formParams['PlayDtmf'] = ObjectSerializer::toFormValue($play_dtmf);
        }
        // form params
        if ($play_dtmf_direction !== null) {
            $formParams['PlayDtmfDirection'] = ObjectSerializer::toFormValue($play_dtmf_direction);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsViewcalldetail
     *
     * View Call
     *
     * @param  string $call_sid The unique identifier for the voice call. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsViewcalldetail($call_sid)
    {
        list($response) = $this->callsViewcalldetailWithHttpInfo($call_sid);
        return $response;
    }

    /**
     * Operation callsViewcalldetailWithHttpInfo
     *
     * View Call
     *
     * @param  string $call_sid The unique identifier for the voice call. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsViewcalldetailWithHttpInfo($call_sid)
    {
        $returnType = 'string';
        $request = $this->callsViewcalldetailRequest($call_sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsViewcalldetailAsync
     *
     * View Call
     *
     * @param  string $call_sid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsViewcalldetailAsync($call_sid)
    {
        return $this->callsViewcalldetailAsyncWithHttpInfo($call_sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsViewcalldetailAsyncWithHttpInfo
     *
     * View Call
     *
     * @param  string $call_sid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsViewcalldetailAsyncWithHttpInfo($call_sid)
    {
        $returnType = 'string';
        $request = $this->callsViewcalldetailRequest($call_sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsViewcalldetail'
     *
     * @param  string $call_sid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsViewcalldetailRequest($call_sid)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsViewcalldetail'
            );
        }

        $resourcePath = '/calls/viewcalldetail.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['callSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsViewcalls
     *
     * View Call
     *
     * @param  string $callsid The unique identifier for the voice call. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsViewcalls($callsid)
    {
        list($response) = $this->callsViewcallsWithHttpInfo($callsid);
        return $response;
    }

    /**
     * Operation callsViewcallsWithHttpInfo
     *
     * View Call
     *
     * @param  string $callsid The unique identifier for the voice call. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsViewcallsWithHttpInfo($callsid)
    {
        $returnType = 'string';
        $request = $this->callsViewcallsRequest($callsid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsViewcallsAsync
     *
     * View Call
     *
     * @param  string $callsid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsViewcallsAsync($callsid)
    {
        return $this->callsViewcallsAsyncWithHttpInfo($callsid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsViewcallsAsyncWithHttpInfo
     *
     * View Call
     *
     * @param  string $callsid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsViewcallsAsyncWithHttpInfo($callsid)
    {
        $returnType = 'string';
        $request = $this->callsViewcallsRequest($callsid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsViewcalls'
     *
     * @param  string $callsid The unique identifier for the voice call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsViewcallsRequest($callsid)
    {
        // verify the required parameter 'callsid' is set
        if ($callsid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $callsid when calling callsViewcalls'
            );
        }

        $resourcePath = '/calls/viewcalls.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($callsid !== null) {
            $formParams['callsid'] = ObjectSerializer::toFormValue($callsid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation callsVoiceeffect
     *
     * Voice Effect
     *
     * @param  string $call_sid The unique identifier for the in-progress voice call. (required)
     * @param  string $audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)
     * @param  double $pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)
     * @param  double $pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1 (optional)
     * @param  double $pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)
     * @param  double $rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)
     * @param  double $tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function callsVoiceeffect($call_sid, $audio_direction = null, $pitch_semi_tones = null, $pitch_octaves = null, $pitch = null, $rate = null, $tempo = null)
    {
        list($response) = $this->callsVoiceeffectWithHttpInfo($call_sid, $audio_direction, $pitch_semi_tones, $pitch_octaves, $pitch, $rate, $tempo);
        return $response;
    }

    /**
     * Operation callsVoiceeffectWithHttpInfo
     *
     * Voice Effect
     *
     * @param  string $call_sid The unique identifier for the in-progress voice call. (required)
     * @param  string $audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)
     * @param  double $pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)
     * @param  double $pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1 (optional)
     * @param  double $pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)
     * @param  double $rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)
     * @param  double $tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function callsVoiceeffectWithHttpInfo($call_sid, $audio_direction = null, $pitch_semi_tones = null, $pitch_octaves = null, $pitch = null, $rate = null, $tempo = null)
    {
        $returnType = 'string';
        $request = $this->callsVoiceeffectRequest($call_sid, $audio_direction, $pitch_semi_tones, $pitch_octaves, $pitch, $rate, $tempo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation callsVoiceeffectAsync
     *
     * Voice Effect
     *
     * @param  string $call_sid The unique identifier for the in-progress voice call. (required)
     * @param  string $audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)
     * @param  double $pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)
     * @param  double $pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1 (optional)
     * @param  double $pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)
     * @param  double $rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)
     * @param  double $tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsVoiceeffectAsync($call_sid, $audio_direction = null, $pitch_semi_tones = null, $pitch_octaves = null, $pitch = null, $rate = null, $tempo = null)
    {
        return $this->callsVoiceeffectAsyncWithHttpInfo($call_sid, $audio_direction, $pitch_semi_tones, $pitch_octaves, $pitch, $rate, $tempo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callsVoiceeffectAsyncWithHttpInfo
     *
     * Voice Effect
     *
     * @param  string $call_sid The unique identifier for the in-progress voice call. (required)
     * @param  string $audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)
     * @param  double $pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)
     * @param  double $pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1 (optional)
     * @param  double $pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)
     * @param  double $rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)
     * @param  double $tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callsVoiceeffectAsyncWithHttpInfo($call_sid, $audio_direction = null, $pitch_semi_tones = null, $pitch_octaves = null, $pitch = null, $rate = null, $tempo = null)
    {
        $returnType = 'string';
        $request = $this->callsVoiceeffectRequest($call_sid, $audio_direction, $pitch_semi_tones, $pitch_octaves, $pitch, $rate, $tempo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callsVoiceeffect'
     *
     * @param  string $call_sid The unique identifier for the in-progress voice call. (required)
     * @param  string $audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)
     * @param  double $pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)
     * @param  double $pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1 (optional)
     * @param  double $pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)
     * @param  double $rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)
     * @param  double $tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function callsVoiceeffectRequest($call_sid, $audio_direction = null, $pitch_semi_tones = null, $pitch_octaves = null, $pitch = null, $rate = null, $tempo = null)
    {
        // verify the required parameter 'call_sid' is set
        if ($call_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_sid when calling callsVoiceeffect'
            );
        }

        $resourcePath = '/calls/voiceeffect.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($call_sid !== null) {
            $formParams['CallSid'] = ObjectSerializer::toFormValue($call_sid);
        }
        // form params
        if ($audio_direction !== null) {
            $formParams['AudioDirection'] = ObjectSerializer::toFormValue($audio_direction);
        }
        // form params
        if ($pitch_semi_tones !== null) {
            $formParams['PitchSemiTones'] = ObjectSerializer::toFormValue($pitch_semi_tones);
        }
        // form params
        if ($pitch_octaves !== null) {
            $formParams['PitchOctaves'] = ObjectSerializer::toFormValue($pitch_octaves);
        }
        // form params
        if ($pitch !== null) {
            $formParams['Pitch'] = ObjectSerializer::toFormValue($pitch);
        }
        // form params
        if ($rate !== null) {
            $formParams['Rate'] = ObjectSerializer::toFormValue($rate);
        }
        // form params
        if ($tempo !== null) {
            $formParams['Tempo'] = ObjectSerializer::toFormValue($tempo);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
