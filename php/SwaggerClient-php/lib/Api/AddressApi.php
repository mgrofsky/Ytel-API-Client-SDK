<?php
/**
 * AddressApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AddressApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addressCreateaddress
     *
     * Create Address
     *
     * @param  string $name Name of user (required)
     * @param  string $address Address of user. (required)
     * @param  string $country Must be a 2 letter country short-name code (ISO 3166) (required)
     * @param  string $state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
     * @param  string $city City Name. (required)
     * @param  string $zip Zip code of city. (required)
     * @param  string $description Description of addresses. (optional)
     * @param  string $email Email Id of user. (optional)
     * @param  string $phone Phone number of user. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addressCreateaddress($name, $address, $country, $state, $city, $zip, $description = null, $email = null, $phone = null)
    {
        list($response) = $this->addressCreateaddressWithHttpInfo($name, $address, $country, $state, $city, $zip, $description, $email, $phone);
        return $response;
    }

    /**
     * Operation addressCreateaddressWithHttpInfo
     *
     * Create Address
     *
     * @param  string $name Name of user (required)
     * @param  string $address Address of user. (required)
     * @param  string $country Must be a 2 letter country short-name code (ISO 3166) (required)
     * @param  string $state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
     * @param  string $city City Name. (required)
     * @param  string $zip Zip code of city. (required)
     * @param  string $description Description of addresses. (optional)
     * @param  string $email Email Id of user. (optional)
     * @param  string $phone Phone number of user. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addressCreateaddressWithHttpInfo($name, $address, $country, $state, $city, $zip, $description = null, $email = null, $phone = null)
    {
        $returnType = 'string';
        $request = $this->addressCreateaddressRequest($name, $address, $country, $state, $city, $zip, $description, $email, $phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addressCreateaddressAsync
     *
     * Create Address
     *
     * @param  string $name Name of user (required)
     * @param  string $address Address of user. (required)
     * @param  string $country Must be a 2 letter country short-name code (ISO 3166) (required)
     * @param  string $state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
     * @param  string $city City Name. (required)
     * @param  string $zip Zip code of city. (required)
     * @param  string $description Description of addresses. (optional)
     * @param  string $email Email Id of user. (optional)
     * @param  string $phone Phone number of user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressCreateaddressAsync($name, $address, $country, $state, $city, $zip, $description = null, $email = null, $phone = null)
    {
        return $this->addressCreateaddressAsyncWithHttpInfo($name, $address, $country, $state, $city, $zip, $description, $email, $phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addressCreateaddressAsyncWithHttpInfo
     *
     * Create Address
     *
     * @param  string $name Name of user (required)
     * @param  string $address Address of user. (required)
     * @param  string $country Must be a 2 letter country short-name code (ISO 3166) (required)
     * @param  string $state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
     * @param  string $city City Name. (required)
     * @param  string $zip Zip code of city. (required)
     * @param  string $description Description of addresses. (optional)
     * @param  string $email Email Id of user. (optional)
     * @param  string $phone Phone number of user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressCreateaddressAsyncWithHttpInfo($name, $address, $country, $state, $city, $zip, $description = null, $email = null, $phone = null)
    {
        $returnType = 'string';
        $request = $this->addressCreateaddressRequest($name, $address, $country, $state, $city, $zip, $description, $email, $phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addressCreateaddress'
     *
     * @param  string $name Name of user (required)
     * @param  string $address Address of user. (required)
     * @param  string $country Must be a 2 letter country short-name code (ISO 3166) (required)
     * @param  string $state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
     * @param  string $city City Name. (required)
     * @param  string $zip Zip code of city. (required)
     * @param  string $description Description of addresses. (optional)
     * @param  string $email Email Id of user. (optional)
     * @param  string $phone Phone number of user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addressCreateaddressRequest($name, $address, $country, $state, $city, $zip, $description = null, $email = null, $phone = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling addressCreateaddress'
            );
        }
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling addressCreateaddress'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling addressCreateaddress'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling addressCreateaddress'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling addressCreateaddress'
            );
        }
        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip when calling addressCreateaddress'
            );
        }

        $resourcePath = '/address/createaddress.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($address !== null) {
            $formParams['Address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($country !== null) {
            $formParams['Country'] = ObjectSerializer::toFormValue($country);
        }
        // form params
        if ($state !== null) {
            $formParams['State'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($zip !== null) {
            $formParams['Zip'] = ObjectSerializer::toFormValue($zip);
        }
        // form params
        if ($description !== null) {
            $formParams['Description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($phone !== null) {
            $formParams['Phone'] = ObjectSerializer::toFormValue($phone);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addressDeleteaddress
     *
     * Delete Address
     *
     * @param  string $addressid The identifier of the address to be deleted. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addressDeleteaddress($addressid)
    {
        list($response) = $this->addressDeleteaddressWithHttpInfo($addressid);
        return $response;
    }

    /**
     * Operation addressDeleteaddressWithHttpInfo
     *
     * Delete Address
     *
     * @param  string $addressid The identifier of the address to be deleted. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addressDeleteaddressWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressDeleteaddressRequest($addressid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addressDeleteaddressAsync
     *
     * Delete Address
     *
     * @param  string $addressid The identifier of the address to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressDeleteaddressAsync($addressid)
    {
        return $this->addressDeleteaddressAsyncWithHttpInfo($addressid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addressDeleteaddressAsyncWithHttpInfo
     *
     * Delete Address
     *
     * @param  string $addressid The identifier of the address to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressDeleteaddressAsyncWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressDeleteaddressRequest($addressid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addressDeleteaddress'
     *
     * @param  string $addressid The identifier of the address to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addressDeleteaddressRequest($addressid)
    {
        // verify the required parameter 'addressid' is set
        if ($addressid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressid when calling addressDeleteaddress'
            );
        }

        $resourcePath = '/address/deleteaddress.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($addressid !== null) {
            $formParams['addressid'] = ObjectSerializer::toFormValue($addressid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addressListaddress
     *
     * List Addresses
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
     * @param  string $addressid addresses Sid (optional)
     * @param  string $date_created date created address. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addressListaddress($page = '1', $pagesize = '10', $addressid = null, $date_created = null)
    {
        list($response) = $this->addressListaddressWithHttpInfo($page, $pagesize, $addressid, $date_created);
        return $response;
    }

    /**
     * Operation addressListaddressWithHttpInfo
     *
     * List Addresses
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
     * @param  string $addressid addresses Sid (optional)
     * @param  string $date_created date created address. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addressListaddressWithHttpInfo($page = '1', $pagesize = '10', $addressid = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->addressListaddressRequest($page, $pagesize, $addressid, $date_created);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addressListaddressAsync
     *
     * List Addresses
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
     * @param  string $addressid addresses Sid (optional)
     * @param  string $date_created date created address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressListaddressAsync($page = '1', $pagesize = '10', $addressid = null, $date_created = null)
    {
        return $this->addressListaddressAsyncWithHttpInfo($page, $pagesize, $addressid, $date_created)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addressListaddressAsyncWithHttpInfo
     *
     * List Addresses
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
     * @param  string $addressid addresses Sid (optional)
     * @param  string $date_created date created address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressListaddressAsyncWithHttpInfo($page = '1', $pagesize = '10', $addressid = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->addressListaddressRequest($page, $pagesize, $addressid, $date_created);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addressListaddress'
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)
     * @param  string $addressid addresses Sid (optional)
     * @param  string $date_created date created address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addressListaddressRequest($page = '1', $pagesize = '10', $addressid = null, $date_created = null)
    {

        $resourcePath = '/address/listaddress.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($pagesize !== null) {
            $formParams['pagesize'] = ObjectSerializer::toFormValue($pagesize);
        }
        // form params
        if ($addressid !== null) {
            $formParams['addressid'] = ObjectSerializer::toFormValue($addressid);
        }
        // form params
        if ($date_created !== null) {
            $formParams['dateCreated'] = ObjectSerializer::toFormValue($date_created);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addressVerifyaddress
     *
     * Verify Address
     *
     * @param  string $addressid The identifier of the address to be verified. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addressVerifyaddress($addressid)
    {
        list($response) = $this->addressVerifyaddressWithHttpInfo($addressid);
        return $response;
    }

    /**
     * Operation addressVerifyaddressWithHttpInfo
     *
     * Verify Address
     *
     * @param  string $addressid The identifier of the address to be verified. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addressVerifyaddressWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressVerifyaddressRequest($addressid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addressVerifyaddressAsync
     *
     * Verify Address
     *
     * @param  string $addressid The identifier of the address to be verified. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressVerifyaddressAsync($addressid)
    {
        return $this->addressVerifyaddressAsyncWithHttpInfo($addressid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addressVerifyaddressAsyncWithHttpInfo
     *
     * Verify Address
     *
     * @param  string $addressid The identifier of the address to be verified. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressVerifyaddressAsyncWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressVerifyaddressRequest($addressid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addressVerifyaddress'
     *
     * @param  string $addressid The identifier of the address to be verified. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addressVerifyaddressRequest($addressid)
    {
        // verify the required parameter 'addressid' is set
        if ($addressid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressid when calling addressVerifyaddress'
            );
        }

        $resourcePath = '/address/verifyaddress.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($addressid !== null) {
            $formParams['addressid'] = ObjectSerializer::toFormValue($addressid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addressViewaddress
     *
     * View Address
     *
     * @param  string $addressid The identifier of the address to be retrieved. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function addressViewaddress($addressid)
    {
        list($response) = $this->addressViewaddressWithHttpInfo($addressid);
        return $response;
    }

    /**
     * Operation addressViewaddressWithHttpInfo
     *
     * View Address
     *
     * @param  string $addressid The identifier of the address to be retrieved. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addressViewaddressWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressViewaddressRequest($addressid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addressViewaddressAsync
     *
     * View Address
     *
     * @param  string $addressid The identifier of the address to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressViewaddressAsync($addressid)
    {
        return $this->addressViewaddressAsyncWithHttpInfo($addressid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addressViewaddressAsyncWithHttpInfo
     *
     * View Address
     *
     * @param  string $addressid The identifier of the address to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addressViewaddressAsyncWithHttpInfo($addressid)
    {
        $returnType = 'string';
        $request = $this->addressViewaddressRequest($addressid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addressViewaddress'
     *
     * @param  string $addressid The identifier of the address to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addressViewaddressRequest($addressid)
    {
        // verify the required parameter 'addressid' is set
        if ($addressid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressid when calling addressViewaddress'
            );
        }

        $resourcePath = '/address/viewaddress.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($addressid !== null) {
            $formParams['addressid'] = ObjectSerializer::toFormValue($addressid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
