<?php
/**
 * LetterApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * LetterApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LetterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation letterCreate
     *
     * Create Letter
     *
     * @param  string $to The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $from The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $attachbyid Set an existing letter by attaching its LetterId. (required)
     * @param  string $file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. (required)
     * @param  string $color Specify if letter should be printed in color. (required)
     * @param  string $description A description for the letter. (optional)
     * @param  string $extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
     * @param  string $doublesided Specify if letter should be printed on both sides. (optional)
     * @param  string $template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
     * @param  string $htmldata A string value that contains HTML markup. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function letterCreate($to, $from, $attachbyid, $file, $color, $description = null, $extraservice = null, $doublesided = null, $template = null, $htmldata = null)
    {
        list($response) = $this->letterCreateWithHttpInfo($to, $from, $attachbyid, $file, $color, $description, $extraservice, $doublesided, $template, $htmldata);
        return $response;
    }

    /**
     * Operation letterCreateWithHttpInfo
     *
     * Create Letter
     *
     * @param  string $to The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $from The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $attachbyid Set an existing letter by attaching its LetterId. (required)
     * @param  string $file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. (required)
     * @param  string $color Specify if letter should be printed in color. (required)
     * @param  string $description A description for the letter. (optional)
     * @param  string $extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
     * @param  string $doublesided Specify if letter should be printed on both sides. (optional)
     * @param  string $template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
     * @param  string $htmldata A string value that contains HTML markup. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function letterCreateWithHttpInfo($to, $from, $attachbyid, $file, $color, $description = null, $extraservice = null, $doublesided = null, $template = null, $htmldata = null)
    {
        $returnType = 'string';
        $request = $this->letterCreateRequest($to, $from, $attachbyid, $file, $color, $description, $extraservice, $doublesided, $template, $htmldata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation letterCreateAsync
     *
     * Create Letter
     *
     * @param  string $to The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $from The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $attachbyid Set an existing letter by attaching its LetterId. (required)
     * @param  string $file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. (required)
     * @param  string $color Specify if letter should be printed in color. (required)
     * @param  string $description A description for the letter. (optional)
     * @param  string $extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
     * @param  string $doublesided Specify if letter should be printed on both sides. (optional)
     * @param  string $template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
     * @param  string $htmldata A string value that contains HTML markup. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterCreateAsync($to, $from, $attachbyid, $file, $color, $description = null, $extraservice = null, $doublesided = null, $template = null, $htmldata = null)
    {
        return $this->letterCreateAsyncWithHttpInfo($to, $from, $attachbyid, $file, $color, $description, $extraservice, $doublesided, $template, $htmldata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation letterCreateAsyncWithHttpInfo
     *
     * Create Letter
     *
     * @param  string $to The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $from The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $attachbyid Set an existing letter by attaching its LetterId. (required)
     * @param  string $file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. (required)
     * @param  string $color Specify if letter should be printed in color. (required)
     * @param  string $description A description for the letter. (optional)
     * @param  string $extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
     * @param  string $doublesided Specify if letter should be printed on both sides. (optional)
     * @param  string $template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
     * @param  string $htmldata A string value that contains HTML markup. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterCreateAsyncWithHttpInfo($to, $from, $attachbyid, $file, $color, $description = null, $extraservice = null, $doublesided = null, $template = null, $htmldata = null)
    {
        $returnType = 'string';
        $request = $this->letterCreateRequest($to, $from, $attachbyid, $file, $color, $description, $extraservice, $doublesided, $template, $htmldata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'letterCreate'
     *
     * @param  string $to The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $from The AddressId or an object structured when creating an address by addresses/Create. (required)
     * @param  string $attachbyid Set an existing letter by attaching its LetterId. (required)
     * @param  string $file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file. (required)
     * @param  string $color Specify if letter should be printed in color. (required)
     * @param  string $description A description for the letter. (optional)
     * @param  string $extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)
     * @param  string $doublesided Specify if letter should be printed on both sides. (optional)
     * @param  string $template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)
     * @param  string $htmldata A string value that contains HTML markup. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function letterCreateRequest($to, $from, $attachbyid, $file, $color, $description = null, $extraservice = null, $doublesided = null, $template = null, $htmldata = null)
    {
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling letterCreate'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling letterCreate'
            );
        }
        // verify the required parameter 'attachbyid' is set
        if ($attachbyid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachbyid when calling letterCreate'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling letterCreate'
            );
        }
        // verify the required parameter 'color' is set
        if ($color === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $color when calling letterCreate'
            );
        }

        $resourcePath = '/letter/create.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($to !== null) {
            $formParams['to'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($from !== null) {
            $formParams['from'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($attachbyid !== null) {
            $formParams['attachbyid'] = ObjectSerializer::toFormValue($attachbyid);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = ObjectSerializer::toFormValue($color);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($extraservice !== null) {
            $formParams['extraservice'] = ObjectSerializer::toFormValue($extraservice);
        }
        // form params
        if ($doublesided !== null) {
            $formParams['doublesided'] = ObjectSerializer::toFormValue($doublesided);
        }
        // form params
        if ($template !== null) {
            $formParams['template'] = ObjectSerializer::toFormValue($template);
        }
        // form params
        if ($htmldata !== null) {
            $formParams['htmldata'] = ObjectSerializer::toFormValue($htmldata);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation letterDelete
     *
     * Delete Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function letterDelete($lettersid)
    {
        list($response) = $this->letterDeleteWithHttpInfo($lettersid);
        return $response;
    }

    /**
     * Operation letterDeleteWithHttpInfo
     *
     * Delete Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function letterDeleteWithHttpInfo($lettersid)
    {
        $returnType = 'string';
        $request = $this->letterDeleteRequest($lettersid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation letterDeleteAsync
     *
     * Delete Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterDeleteAsync($lettersid)
    {
        return $this->letterDeleteAsyncWithHttpInfo($lettersid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation letterDeleteAsyncWithHttpInfo
     *
     * Delete Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterDeleteAsyncWithHttpInfo($lettersid)
    {
        $returnType = 'string';
        $request = $this->letterDeleteRequest($lettersid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'letterDelete'
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function letterDeleteRequest($lettersid)
    {
        // verify the required parameter 'lettersid' is set
        if ($lettersid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lettersid when calling letterDelete'
            );
        }

        $resourcePath = '/letter/delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($lettersid !== null) {
            $formParams['lettersid'] = ObjectSerializer::toFormValue($lettersid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation letterListsletter
     *
     * List Letters
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize The count of objects to return per page. (optional, default to 10)
     * @param  string $lettersid The unique identifier for a letter object. (optional)
     * @param  string $date_created The date the letter was created. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function letterListsletter($page = '1', $pagesize = '10', $lettersid = null, $date_created = null)
    {
        list($response) = $this->letterListsletterWithHttpInfo($page, $pagesize, $lettersid, $date_created);
        return $response;
    }

    /**
     * Operation letterListsletterWithHttpInfo
     *
     * List Letters
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize The count of objects to return per page. (optional, default to 10)
     * @param  string $lettersid The unique identifier for a letter object. (optional)
     * @param  string $date_created The date the letter was created. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function letterListsletterWithHttpInfo($page = '1', $pagesize = '10', $lettersid = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->letterListsletterRequest($page, $pagesize, $lettersid, $date_created);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation letterListsletterAsync
     *
     * List Letters
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize The count of objects to return per page. (optional, default to 10)
     * @param  string $lettersid The unique identifier for a letter object. (optional)
     * @param  string $date_created The date the letter was created. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterListsletterAsync($page = '1', $pagesize = '10', $lettersid = null, $date_created = null)
    {
        return $this->letterListsletterAsyncWithHttpInfo($page, $pagesize, $lettersid, $date_created)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation letterListsletterAsyncWithHttpInfo
     *
     * List Letters
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize The count of objects to return per page. (optional, default to 10)
     * @param  string $lettersid The unique identifier for a letter object. (optional)
     * @param  string $date_created The date the letter was created. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterListsletterAsyncWithHttpInfo($page = '1', $pagesize = '10', $lettersid = null, $date_created = null)
    {
        $returnType = 'string';
        $request = $this->letterListsletterRequest($page, $pagesize, $lettersid, $date_created);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'letterListsletter'
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize The count of objects to return per page. (optional, default to 10)
     * @param  string $lettersid The unique identifier for a letter object. (optional)
     * @param  string $date_created The date the letter was created. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function letterListsletterRequest($page = '1', $pagesize = '10', $lettersid = null, $date_created = null)
    {

        $resourcePath = '/letter/listsletter.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($pagesize !== null) {
            $formParams['pagesize'] = ObjectSerializer::toFormValue($pagesize);
        }
        // form params
        if ($lettersid !== null) {
            $formParams['lettersid'] = ObjectSerializer::toFormValue($lettersid);
        }
        // form params
        if ($date_created !== null) {
            $formParams['dateCreated'] = ObjectSerializer::toFormValue($date_created);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation letterViewletter
     *
     * View Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function letterViewletter($lettersid)
    {
        list($response) = $this->letterViewletterWithHttpInfo($lettersid);
        return $response;
    }

    /**
     * Operation letterViewletterWithHttpInfo
     *
     * View Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function letterViewletterWithHttpInfo($lettersid)
    {
        $returnType = 'string';
        $request = $this->letterViewletterRequest($lettersid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation letterViewletterAsync
     *
     * View Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterViewletterAsync($lettersid)
    {
        return $this->letterViewletterAsyncWithHttpInfo($lettersid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation letterViewletterAsyncWithHttpInfo
     *
     * View Letter
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function letterViewletterAsyncWithHttpInfo($lettersid)
    {
        $returnType = 'string';
        $request = $this->letterViewletterRequest($lettersid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'letterViewletter'
     *
     * @param  string $lettersid The unique identifier for a letter object. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function letterViewletterRequest($lettersid)
    {
        // verify the required parameter 'lettersid' is set
        if ($lettersid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lettersid when calling letterViewletter'
            );
        }

        $resourcePath = '/letter/viewletter.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($lettersid !== null) {
            $formParams['lettersid'] = ObjectSerializer::toFormValue($lettersid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
