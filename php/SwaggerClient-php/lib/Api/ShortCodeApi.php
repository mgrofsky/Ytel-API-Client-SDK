<?php
/**
 * ShortCodeApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ShortCodeApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShortCodeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dedicatedshortcodeGetinboundsms
     *
     * List Inbound SMS
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $from Only list SMS messages sent from this number (optional)
     * @param  string $shortcode Only list SMS messages sent to Shortcode (optional)
     * @param  string $datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dedicatedshortcodeGetinboundsms($page = '1', $pagesize = '10', $from = null, $shortcode = null, $datecreated = null)
    {
        list($response) = $this->dedicatedshortcodeGetinboundsmsWithHttpInfo($page, $pagesize, $from, $shortcode, $datecreated);
        return $response;
    }

    /**
     * Operation dedicatedshortcodeGetinboundsmsWithHttpInfo
     *
     * List Inbound SMS
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $from Only list SMS messages sent from this number (optional)
     * @param  string $shortcode Only list SMS messages sent to Shortcode (optional)
     * @param  string $datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dedicatedshortcodeGetinboundsmsWithHttpInfo($page = '1', $pagesize = '10', $from = null, $shortcode = null, $datecreated = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeGetinboundsmsRequest($page, $pagesize, $from, $shortcode, $datecreated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dedicatedshortcodeGetinboundsmsAsync
     *
     * List Inbound SMS
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $from Only list SMS messages sent from this number (optional)
     * @param  string $shortcode Only list SMS messages sent to Shortcode (optional)
     * @param  string $datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeGetinboundsmsAsync($page = '1', $pagesize = '10', $from = null, $shortcode = null, $datecreated = null)
    {
        return $this->dedicatedshortcodeGetinboundsmsAsyncWithHttpInfo($page, $pagesize, $from, $shortcode, $datecreated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dedicatedshortcodeGetinboundsmsAsyncWithHttpInfo
     *
     * List Inbound SMS
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $from Only list SMS messages sent from this number (optional)
     * @param  string $shortcode Only list SMS messages sent to Shortcode (optional)
     * @param  string $datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeGetinboundsmsAsyncWithHttpInfo($page = '1', $pagesize = '10', $from = null, $shortcode = null, $datecreated = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeGetinboundsmsRequest($page, $pagesize, $from, $shortcode, $datecreated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dedicatedshortcodeGetinboundsms'
     *
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $pagesize Number of individual resources listed in the response per page (optional, default to 10)
     * @param  string $from Only list SMS messages sent from this number (optional)
     * @param  string $shortcode Only list SMS messages sent to Shortcode (optional)
     * @param  string $datecreated Only list SMS messages sent in the specified date MAKE REQUEST (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dedicatedshortcodeGetinboundsmsRequest($page = '1', $pagesize = '10', $from = null, $shortcode = null, $datecreated = null)
    {

        $resourcePath = '/dedicatedshortcode/getinboundsms.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($pagesize !== null) {
            $formParams['pagesize'] = ObjectSerializer::toFormValue($pagesize);
        }
        // form params
        if ($from !== null) {
            $formParams['From'] = ObjectSerializer::toFormValue($from);
        }
        // form params
        if ($shortcode !== null) {
            $formParams['Shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // form params
        if ($datecreated !== null) {
            $formParams['Datecreated'] = ObjectSerializer::toFormValue($datecreated);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dedicatedshortcodeListshortcode
     *
     * List Shortcodes
     *
     * @param  string $shortcode Only list Short Code Assignment sent from this Short Code (optional)
     * @param  string $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
     * @param  string $pagesize The count of objects to return per page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dedicatedshortcodeListshortcode($shortcode = null, $page = null, $pagesize = null)
    {
        list($response) = $this->dedicatedshortcodeListshortcodeWithHttpInfo($shortcode, $page, $pagesize);
        return $response;
    }

    /**
     * Operation dedicatedshortcodeListshortcodeWithHttpInfo
     *
     * List Shortcodes
     *
     * @param  string $shortcode Only list Short Code Assignment sent from this Short Code (optional)
     * @param  string $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
     * @param  string $pagesize The count of objects to return per page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dedicatedshortcodeListshortcodeWithHttpInfo($shortcode = null, $page = null, $pagesize = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeListshortcodeRequest($shortcode, $page, $pagesize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dedicatedshortcodeListshortcodeAsync
     *
     * List Shortcodes
     *
     * @param  string $shortcode Only list Short Code Assignment sent from this Short Code (optional)
     * @param  string $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
     * @param  string $pagesize The count of objects to return per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeListshortcodeAsync($shortcode = null, $page = null, $pagesize = null)
    {
        return $this->dedicatedshortcodeListshortcodeAsyncWithHttpInfo($shortcode, $page, $pagesize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dedicatedshortcodeListshortcodeAsyncWithHttpInfo
     *
     * List Shortcodes
     *
     * @param  string $shortcode Only list Short Code Assignment sent from this Short Code (optional)
     * @param  string $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
     * @param  string $pagesize The count of objects to return per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeListshortcodeAsyncWithHttpInfo($shortcode = null, $page = null, $pagesize = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeListshortcodeRequest($shortcode, $page, $pagesize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dedicatedshortcodeListshortcode'
     *
     * @param  string $shortcode Only list Short Code Assignment sent from this Short Code (optional)
     * @param  string $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)
     * @param  string $pagesize The count of objects to return per page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dedicatedshortcodeListshortcodeRequest($shortcode = null, $page = null, $pagesize = null)
    {

        $resourcePath = '/dedicatedshortcode/listshortcode.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($shortcode !== null) {
            $formParams['Shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // form params
        if ($page !== null) {
            $formParams['page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($pagesize !== null) {
            $formParams['pagesize'] = ObjectSerializer::toFormValue($pagesize);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dedicatedshortcodeSendsms
     *
     * Send SMS
     *
     * @param  int $shortcode Your dedicated shortcode (required)
     * @param  double $to The number to send your SMS to (required)
     * @param  string $body The body of your message (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
     * @param  string $messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dedicatedshortcodeSendsms($shortcode, $to, $body, $method = null, $messagestatuscallback = null)
    {
        list($response) = $this->dedicatedshortcodeSendsmsWithHttpInfo($shortcode, $to, $body, $method, $messagestatuscallback);
        return $response;
    }

    /**
     * Operation dedicatedshortcodeSendsmsWithHttpInfo
     *
     * Send SMS
     *
     * @param  int $shortcode Your dedicated shortcode (required)
     * @param  double $to The number to send your SMS to (required)
     * @param  string $body The body of your message (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
     * @param  string $messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dedicatedshortcodeSendsmsWithHttpInfo($shortcode, $to, $body, $method = null, $messagestatuscallback = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeSendsmsRequest($shortcode, $to, $body, $method, $messagestatuscallback);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dedicatedshortcodeSendsmsAsync
     *
     * Send SMS
     *
     * @param  int $shortcode Your dedicated shortcode (required)
     * @param  double $to The number to send your SMS to (required)
     * @param  string $body The body of your message (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
     * @param  string $messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeSendsmsAsync($shortcode, $to, $body, $method = null, $messagestatuscallback = null)
    {
        return $this->dedicatedshortcodeSendsmsAsyncWithHttpInfo($shortcode, $to, $body, $method, $messagestatuscallback)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dedicatedshortcodeSendsmsAsyncWithHttpInfo
     *
     * Send SMS
     *
     * @param  int $shortcode Your dedicated shortcode (required)
     * @param  double $to The number to send your SMS to (required)
     * @param  string $body The body of your message (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
     * @param  string $messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeSendsmsAsyncWithHttpInfo($shortcode, $to, $body, $method = null, $messagestatuscallback = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeSendsmsRequest($shortcode, $to, $body, $method, $messagestatuscallback);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dedicatedshortcodeSendsms'
     *
     * @param  int $shortcode Your dedicated shortcode (required)
     * @param  double $to The number to send your SMS to (required)
     * @param  string $body The body of your message (required)
     * @param  string $method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)
     * @param  string $messagestatuscallback URL that can be requested to receive notification when Short Code message was sent. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dedicatedshortcodeSendsmsRequest($shortcode, $to, $body, $method = null, $messagestatuscallback = null)
    {
        // verify the required parameter 'shortcode' is set
        if ($shortcode === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shortcode when calling dedicatedshortcodeSendsms'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling dedicatedshortcodeSendsms'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling dedicatedshortcodeSendsms'
            );
        }

        $resourcePath = '/dedicatedshortcode/sendsms.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($shortcode !== null) {
            $formParams['shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // form params
        if ($to !== null) {
            $formParams['to'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($method !== null) {
            $formParams['method'] = ObjectSerializer::toFormValue($method);
        }
        // form params
        if ($messagestatuscallback !== null) {
            $formParams['messagestatuscallback'] = ObjectSerializer::toFormValue($messagestatuscallback);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dedicatedshortcodeUpdateshortcode
     *
     * Update Shortcode
     *
     * @param  string $shortcode List of valid dedicated shortcode to your Ytel account. (required)
     * @param  string $friendly_name User generated name of the dedicated shortcode. (optional)
     * @param  string $callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     * @param  string $callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dedicatedshortcodeUpdateshortcode($shortcode, $friendly_name = null, $callback_method = null, $callback_url = null, $fallback_method = null, $fallback_url = null)
    {
        list($response) = $this->dedicatedshortcodeUpdateshortcodeWithHttpInfo($shortcode, $friendly_name, $callback_method, $callback_url, $fallback_method, $fallback_url);
        return $response;
    }

    /**
     * Operation dedicatedshortcodeUpdateshortcodeWithHttpInfo
     *
     * Update Shortcode
     *
     * @param  string $shortcode List of valid dedicated shortcode to your Ytel account. (required)
     * @param  string $friendly_name User generated name of the dedicated shortcode. (optional)
     * @param  string $callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     * @param  string $callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dedicatedshortcodeUpdateshortcodeWithHttpInfo($shortcode, $friendly_name = null, $callback_method = null, $callback_url = null, $fallback_method = null, $fallback_url = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeUpdateshortcodeRequest($shortcode, $friendly_name, $callback_method, $callback_url, $fallback_method, $fallback_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dedicatedshortcodeUpdateshortcodeAsync
     *
     * Update Shortcode
     *
     * @param  string $shortcode List of valid dedicated shortcode to your Ytel account. (required)
     * @param  string $friendly_name User generated name of the dedicated shortcode. (optional)
     * @param  string $callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     * @param  string $callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeUpdateshortcodeAsync($shortcode, $friendly_name = null, $callback_method = null, $callback_url = null, $fallback_method = null, $fallback_url = null)
    {
        return $this->dedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo($shortcode, $friendly_name, $callback_method, $callback_url, $fallback_method, $fallback_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo
     *
     * Update Shortcode
     *
     * @param  string $shortcode List of valid dedicated shortcode to your Ytel account. (required)
     * @param  string $friendly_name User generated name of the dedicated shortcode. (optional)
     * @param  string $callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     * @param  string $callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo($shortcode, $friendly_name = null, $callback_method = null, $callback_url = null, $fallback_method = null, $fallback_url = null)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeUpdateshortcodeRequest($shortcode, $friendly_name, $callback_method, $callback_url, $fallback_method, $fallback_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dedicatedshortcodeUpdateshortcode'
     *
     * @param  string $shortcode List of valid dedicated shortcode to your Ytel account. (required)
     * @param  string $friendly_name User generated name of the dedicated shortcode. (optional)
     * @param  string $callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)
     * @param  string $callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)
     * @param  string $fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
     * @param  string $fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dedicatedshortcodeUpdateshortcodeRequest($shortcode, $friendly_name = null, $callback_method = null, $callback_url = null, $fallback_method = null, $fallback_url = null)
    {
        // verify the required parameter 'shortcode' is set
        if ($shortcode === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shortcode when calling dedicatedshortcodeUpdateshortcode'
            );
        }

        $resourcePath = '/dedicatedshortcode/updateshortcode.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($shortcode !== null) {
            $formParams['Shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // form params
        if ($friendly_name !== null) {
            $formParams['FriendlyName'] = ObjectSerializer::toFormValue($friendly_name);
        }
        // form params
        if ($callback_method !== null) {
            $formParams['CallbackMethod'] = ObjectSerializer::toFormValue($callback_method);
        }
        // form params
        if ($callback_url !== null) {
            $formParams['CallbackUrl'] = ObjectSerializer::toFormValue($callback_url);
        }
        // form params
        if ($fallback_method !== null) {
            $formParams['FallbackMethod'] = ObjectSerializer::toFormValue($fallback_method);
        }
        // form params
        if ($fallback_url !== null) {
            $formParams['FallbackUrl'] = ObjectSerializer::toFormValue($fallback_url);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dedicatedshortcodeViewshortcode
     *
     * View SMS
     *
     * @param  string $shortcode List of valid Dedicated Short Code to your Ytel account (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dedicatedshortcodeViewshortcode($shortcode)
    {
        list($response) = $this->dedicatedshortcodeViewshortcodeWithHttpInfo($shortcode);
        return $response;
    }

    /**
     * Operation dedicatedshortcodeViewshortcodeWithHttpInfo
     *
     * View SMS
     *
     * @param  string $shortcode List of valid Dedicated Short Code to your Ytel account (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dedicatedshortcodeViewshortcodeWithHttpInfo($shortcode)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeViewshortcodeRequest($shortcode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dedicatedshortcodeViewshortcodeAsync
     *
     * View SMS
     *
     * @param  string $shortcode List of valid Dedicated Short Code to your Ytel account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeViewshortcodeAsync($shortcode)
    {
        return $this->dedicatedshortcodeViewshortcodeAsyncWithHttpInfo($shortcode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dedicatedshortcodeViewshortcodeAsyncWithHttpInfo
     *
     * View SMS
     *
     * @param  string $shortcode List of valid Dedicated Short Code to your Ytel account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dedicatedshortcodeViewshortcodeAsyncWithHttpInfo($shortcode)
    {
        $returnType = 'string';
        $request = $this->dedicatedshortcodeViewshortcodeRequest($shortcode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dedicatedshortcodeViewshortcode'
     *
     * @param  string $shortcode List of valid Dedicated Short Code to your Ytel account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function dedicatedshortcodeViewshortcodeRequest($shortcode)
    {
        // verify the required parameter 'shortcode' is set
        if ($shortcode === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shortcode when calling dedicatedshortcodeViewshortcode'
            );
        }

        $resourcePath = '/dedicatedshortcode/viewshortcode.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($shortcode !== null) {
            $formParams['Shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shortcodeListsms
     *
     * List SMS
     *
     * @param  string $shortcode Only list messages sent from this Short Code (optional)
     * @param  string $to Only list messages sent to this number (optional)
     * @param  string $date_sent Only list messages sent with the specified date (optional)
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The count of objects to return per page. (optional, default to 10)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function shortcodeListsms($shortcode = null, $to = null, $date_sent = null, $page = '1', $page_size = '10')
    {
        list($response) = $this->shortcodeListsmsWithHttpInfo($shortcode, $to, $date_sent, $page, $page_size);
        return $response;
    }

    /**
     * Operation shortcodeListsmsWithHttpInfo
     *
     * List SMS
     *
     * @param  string $shortcode Only list messages sent from this Short Code (optional)
     * @param  string $to Only list messages sent to this number (optional)
     * @param  string $date_sent Only list messages sent with the specified date (optional)
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The count of objects to return per page. (optional, default to 10)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function shortcodeListsmsWithHttpInfo($shortcode = null, $to = null, $date_sent = null, $page = '1', $page_size = '10')
    {
        $returnType = 'string';
        $request = $this->shortcodeListsmsRequest($shortcode, $to, $date_sent, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shortcodeListsmsAsync
     *
     * List SMS
     *
     * @param  string $shortcode Only list messages sent from this Short Code (optional)
     * @param  string $to Only list messages sent to this number (optional)
     * @param  string $date_sent Only list messages sent with the specified date (optional)
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The count of objects to return per page. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shortcodeListsmsAsync($shortcode = null, $to = null, $date_sent = null, $page = '1', $page_size = '10')
    {
        return $this->shortcodeListsmsAsyncWithHttpInfo($shortcode, $to, $date_sent, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shortcodeListsmsAsyncWithHttpInfo
     *
     * List SMS
     *
     * @param  string $shortcode Only list messages sent from this Short Code (optional)
     * @param  string $to Only list messages sent to this number (optional)
     * @param  string $date_sent Only list messages sent with the specified date (optional)
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The count of objects to return per page. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shortcodeListsmsAsyncWithHttpInfo($shortcode = null, $to = null, $date_sent = null, $page = '1', $page_size = '10')
    {
        $returnType = 'string';
        $request = $this->shortcodeListsmsRequest($shortcode, $to, $date_sent, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shortcodeListsms'
     *
     * @param  string $shortcode Only list messages sent from this Short Code (optional)
     * @param  string $to Only list messages sent to this number (optional)
     * @param  string $date_sent Only list messages sent with the specified date (optional)
     * @param  int $page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The count of objects to return per page. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shortcodeListsmsRequest($shortcode = null, $to = null, $date_sent = null, $page = '1', $page_size = '10')
    {

        $resourcePath = '/shortcode/listsms.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($shortcode !== null) {
            $formParams['Shortcode'] = ObjectSerializer::toFormValue($shortcode);
        }
        // form params
        if ($to !== null) {
            $formParams['To'] = ObjectSerializer::toFormValue($to);
        }
        // form params
        if ($date_sent !== null) {
            $formParams['DateSent'] = ObjectSerializer::toFormValue($date_sent);
        }
        // form params
        if ($page !== null) {
            $formParams['Page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($page_size !== null) {
            $formParams['PageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shortcodeViewsms
     *
     * View SMS
     *
     * @param  string $message_sid The unique identifier for the sms resource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function shortcodeViewsms($message_sid)
    {
        list($response) = $this->shortcodeViewsmsWithHttpInfo($message_sid);
        return $response;
    }

    /**
     * Operation shortcodeViewsmsWithHttpInfo
     *
     * View SMS
     *
     * @param  string $message_sid The unique identifier for the sms resource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function shortcodeViewsmsWithHttpInfo($message_sid)
    {
        $returnType = 'string';
        $request = $this->shortcodeViewsmsRequest($message_sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shortcodeViewsmsAsync
     *
     * View SMS
     *
     * @param  string $message_sid The unique identifier for the sms resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shortcodeViewsmsAsync($message_sid)
    {
        return $this->shortcodeViewsmsAsyncWithHttpInfo($message_sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shortcodeViewsmsAsyncWithHttpInfo
     *
     * View SMS
     *
     * @param  string $message_sid The unique identifier for the sms resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shortcodeViewsmsAsyncWithHttpInfo($message_sid)
    {
        $returnType = 'string';
        $request = $this->shortcodeViewsmsRequest($message_sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shortcodeViewsms'
     *
     * @param  string $message_sid The unique identifier for the sms resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shortcodeViewsmsRequest($message_sid)
    {
        // verify the required parameter 'message_sid' is set
        if ($message_sid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_sid when calling shortcodeViewsms'
            );
        }

        $resourcePath = '/shortcode/viewsms.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($message_sid !== null) {
            $formParams['MessageSid'] = ObjectSerializer::toFormValue($message_sid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
