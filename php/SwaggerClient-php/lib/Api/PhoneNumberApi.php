<?php
/**
 * PhoneNumberApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PhoneNumberApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneNumberApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation incomingphoneAvailablenumber
     *
     * Available Numbers
     *
     * @param  string $numbertype Number type either SMS,Voice or all (required)
     * @param  string $areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  int $pagesize The count of objects to return. (optional, default to 10)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneAvailablenumber($numbertype, $areacode, $pagesize = '10')
    {
        list($response) = $this->incomingphoneAvailablenumberWithHttpInfo($numbertype, $areacode, $pagesize);
        return $response;
    }

    /**
     * Operation incomingphoneAvailablenumberWithHttpInfo
     *
     * Available Numbers
     *
     * @param  string $numbertype Number type either SMS,Voice or all (required)
     * @param  string $areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  int $pagesize The count of objects to return. (optional, default to 10)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneAvailablenumberWithHttpInfo($numbertype, $areacode, $pagesize = '10')
    {
        $returnType = 'string';
        $request = $this->incomingphoneAvailablenumberRequest($numbertype, $areacode, $pagesize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneAvailablenumberAsync
     *
     * Available Numbers
     *
     * @param  string $numbertype Number type either SMS,Voice or all (required)
     * @param  string $areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  int $pagesize The count of objects to return. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneAvailablenumberAsync($numbertype, $areacode, $pagesize = '10')
    {
        return $this->incomingphoneAvailablenumberAsyncWithHttpInfo($numbertype, $areacode, $pagesize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneAvailablenumberAsyncWithHttpInfo
     *
     * Available Numbers
     *
     * @param  string $numbertype Number type either SMS,Voice or all (required)
     * @param  string $areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  int $pagesize The count of objects to return. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneAvailablenumberAsyncWithHttpInfo($numbertype, $areacode, $pagesize = '10')
    {
        $returnType = 'string';
        $request = $this->incomingphoneAvailablenumberRequest($numbertype, $areacode, $pagesize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneAvailablenumber'
     *
     * @param  string $numbertype Number type either SMS,Voice or all (required)
     * @param  string $areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  int $pagesize The count of objects to return. (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneAvailablenumberRequest($numbertype, $areacode, $pagesize = '10')
    {
        // verify the required parameter 'numbertype' is set
        if ($numbertype === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numbertype when calling incomingphoneAvailablenumber'
            );
        }
        // verify the required parameter 'areacode' is set
        if ($areacode === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $areacode when calling incomingphoneAvailablenumber'
            );
        }

        $resourcePath = '/incomingphone/availablenumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($numbertype !== null) {
            $formParams['numbertype'] = ObjectSerializer::toFormValue($numbertype);
        }
        // form params
        if ($areacode !== null) {
            $formParams['areacode'] = ObjectSerializer::toFormValue($areacode);
        }
        // form params
        if ($pagesize !== null) {
            $formParams['pagesize'] = ObjectSerializer::toFormValue($pagesize);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneBulkbuy
     *
     * Bulk Buy Numbers
     *
     * @param  string $number_type The capability the number supports. (required)
     * @param  string $area_code Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  string $quantity A positive integer that tells how many number you want to buy at a time. (required)
     * @param  string $leftover If desired quantity is unavailable purchase what is available . (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneBulkbuy($number_type, $area_code, $quantity, $leftover = null)
    {
        list($response) = $this->incomingphoneBulkbuyWithHttpInfo($number_type, $area_code, $quantity, $leftover);
        return $response;
    }

    /**
     * Operation incomingphoneBulkbuyWithHttpInfo
     *
     * Bulk Buy Numbers
     *
     * @param  string $number_type The capability the number supports. (required)
     * @param  string $area_code Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  string $quantity A positive integer that tells how many number you want to buy at a time. (required)
     * @param  string $leftover If desired quantity is unavailable purchase what is available . (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneBulkbuyWithHttpInfo($number_type, $area_code, $quantity, $leftover = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneBulkbuyRequest($number_type, $area_code, $quantity, $leftover);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneBulkbuyAsync
     *
     * Bulk Buy Numbers
     *
     * @param  string $number_type The capability the number supports. (required)
     * @param  string $area_code Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  string $quantity A positive integer that tells how many number you want to buy at a time. (required)
     * @param  string $leftover If desired quantity is unavailable purchase what is available . (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneBulkbuyAsync($number_type, $area_code, $quantity, $leftover = null)
    {
        return $this->incomingphoneBulkbuyAsyncWithHttpInfo($number_type, $area_code, $quantity, $leftover)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneBulkbuyAsyncWithHttpInfo
     *
     * Bulk Buy Numbers
     *
     * @param  string $number_type The capability the number supports. (required)
     * @param  string $area_code Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  string $quantity A positive integer that tells how many number you want to buy at a time. (required)
     * @param  string $leftover If desired quantity is unavailable purchase what is available . (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneBulkbuyAsyncWithHttpInfo($number_type, $area_code, $quantity, $leftover = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneBulkbuyRequest($number_type, $area_code, $quantity, $leftover);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneBulkbuy'
     *
     * @param  string $number_type The capability the number supports. (required)
     * @param  string $area_code Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
     * @param  string $quantity A positive integer that tells how many number you want to buy at a time. (required)
     * @param  string $leftover If desired quantity is unavailable purchase what is available . (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneBulkbuyRequest($number_type, $area_code, $quantity, $leftover = null)
    {
        // verify the required parameter 'number_type' is set
        if ($number_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_type when calling incomingphoneBulkbuy'
            );
        }
        // verify the required parameter 'area_code' is set
        if ($area_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area_code when calling incomingphoneBulkbuy'
            );
        }
        // verify the required parameter 'quantity' is set
        if ($quantity === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity when calling incomingphoneBulkbuy'
            );
        }

        $resourcePath = '/incomingphone/bulkbuy.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($number_type !== null) {
            $formParams['NumberType'] = ObjectSerializer::toFormValue($number_type);
        }
        // form params
        if ($area_code !== null) {
            $formParams['AreaCode'] = ObjectSerializer::toFormValue($area_code);
        }
        // form params
        if ($quantity !== null) {
            $formParams['Quantity'] = ObjectSerializer::toFormValue($quantity);
        }
        // form params
        if ($leftover !== null) {
            $formParams['Leftover'] = ObjectSerializer::toFormValue($leftover);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneBuynumber
     *
     * Purchase Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneBuynumber($phone_number)
    {
        list($response) = $this->incomingphoneBuynumberWithHttpInfo($phone_number);
        return $response;
    }

    /**
     * Operation incomingphoneBuynumberWithHttpInfo
     *
     * Purchase Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneBuynumberWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneBuynumberRequest($phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneBuynumberAsync
     *
     * Purchase Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneBuynumberAsync($phone_number)
    {
        return $this->incomingphoneBuynumberAsyncWithHttpInfo($phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneBuynumberAsyncWithHttpInfo
     *
     * Purchase Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneBuynumberAsyncWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneBuynumberRequest($phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneBuynumber'
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneBuynumberRequest($phone_number)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneBuynumber'
            );
        }

        $resourcePath = '/incomingphone/buynumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneGetdidscore
     *
     * Get DID Score
     *
     * @param  string $phonenumber Specifies the multiple phone numbers for check updated spamscore . (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneGetdidscore($phonenumber)
    {
        list($response) = $this->incomingphoneGetdidscoreWithHttpInfo($phonenumber);
        return $response;
    }

    /**
     * Operation incomingphoneGetdidscoreWithHttpInfo
     *
     * Get DID Score
     *
     * @param  string $phonenumber Specifies the multiple phone numbers for check updated spamscore . (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneGetdidscoreWithHttpInfo($phonenumber)
    {
        $returnType = 'string';
        $request = $this->incomingphoneGetdidscoreRequest($phonenumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneGetdidscoreAsync
     *
     * Get DID Score
     *
     * @param  string $phonenumber Specifies the multiple phone numbers for check updated spamscore . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneGetdidscoreAsync($phonenumber)
    {
        return $this->incomingphoneGetdidscoreAsyncWithHttpInfo($phonenumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneGetdidscoreAsyncWithHttpInfo
     *
     * Get DID Score
     *
     * @param  string $phonenumber Specifies the multiple phone numbers for check updated spamscore . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneGetdidscoreAsyncWithHttpInfo($phonenumber)
    {
        $returnType = 'string';
        $request = $this->incomingphoneGetdidscoreRequest($phonenumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneGetdidscore'
     *
     * @param  string $phonenumber Specifies the multiple phone numbers for check updated spamscore . (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneGetdidscoreRequest($phonenumber)
    {
        // verify the required parameter 'phonenumber' is set
        if ($phonenumber === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phonenumber when calling incomingphoneGetdidscore'
            );
        }

        $resourcePath = '/incomingphone/getdidscore.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phonenumber !== null) {
            $formParams['Phonenumber'] = ObjectSerializer::toFormValue($phonenumber);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneListnumber
     *
     * List Numbers
     *
     * @param  int $page Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)
     * @param  string $number_type The capability supported by the number.Number type either SMS,Voice or all (optional)
     * @param  string $friendly_name A human-readable label added to the number object. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneListnumber($page = '1', $page_size = '10', $number_type = null, $friendly_name = null)
    {
        list($response) = $this->incomingphoneListnumberWithHttpInfo($page, $page_size, $number_type, $friendly_name);
        return $response;
    }

    /**
     * Operation incomingphoneListnumberWithHttpInfo
     *
     * List Numbers
     *
     * @param  int $page Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)
     * @param  string $number_type The capability supported by the number.Number type either SMS,Voice or all (optional)
     * @param  string $friendly_name A human-readable label added to the number object. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneListnumberWithHttpInfo($page = '1', $page_size = '10', $number_type = null, $friendly_name = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneListnumberRequest($page, $page_size, $number_type, $friendly_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneListnumberAsync
     *
     * List Numbers
     *
     * @param  int $page Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)
     * @param  string $number_type The capability supported by the number.Number type either SMS,Voice or all (optional)
     * @param  string $friendly_name A human-readable label added to the number object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneListnumberAsync($page = '1', $page_size = '10', $number_type = null, $friendly_name = null)
    {
        return $this->incomingphoneListnumberAsyncWithHttpInfo($page, $page_size, $number_type, $friendly_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneListnumberAsyncWithHttpInfo
     *
     * List Numbers
     *
     * @param  int $page Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)
     * @param  string $number_type The capability supported by the number.Number type either SMS,Voice or all (optional)
     * @param  string $friendly_name A human-readable label added to the number object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneListnumberAsyncWithHttpInfo($page = '1', $page_size = '10', $number_type = null, $friendly_name = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneListnumberRequest($page, $page_size, $number_type, $friendly_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneListnumber'
     *
     * @param  int $page Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)
     * @param  int $page_size The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)
     * @param  string $number_type The capability supported by the number.Number type either SMS,Voice or all (optional)
     * @param  string $friendly_name A human-readable label added to the number object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneListnumberRequest($page = '1', $page_size = '10', $number_type = null, $friendly_name = null)
    {

        $resourcePath = '/incomingphone/listnumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($page !== null) {
            $formParams['Page'] = ObjectSerializer::toFormValue($page);
        }
        // form params
        if ($page_size !== null) {
            $formParams['PageSize'] = ObjectSerializer::toFormValue($page_size);
        }
        // form params
        if ($number_type !== null) {
            $formParams['NumberType'] = ObjectSerializer::toFormValue($number_type);
        }
        // form params
        if ($friendly_name !== null) {
            $formParams['FriendlyName'] = ObjectSerializer::toFormValue($friendly_name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneMassreleasenumber
     *
     * Bulk Release
     *
     * @param  string $phone_number A valid Ytel comma separated numbers (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneMassreleasenumber($phone_number)
    {
        list($response) = $this->incomingphoneMassreleasenumberWithHttpInfo($phone_number);
        return $response;
    }

    /**
     * Operation incomingphoneMassreleasenumberWithHttpInfo
     *
     * Bulk Release
     *
     * @param  string $phone_number A valid Ytel comma separated numbers (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneMassreleasenumberWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneMassreleasenumberRequest($phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneMassreleasenumberAsync
     *
     * Bulk Release
     *
     * @param  string $phone_number A valid Ytel comma separated numbers (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneMassreleasenumberAsync($phone_number)
    {
        return $this->incomingphoneMassreleasenumberAsyncWithHttpInfo($phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneMassreleasenumberAsyncWithHttpInfo
     *
     * Bulk Release
     *
     * @param  string $phone_number A valid Ytel comma separated numbers (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneMassreleasenumberAsyncWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneMassreleasenumberRequest($phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneMassreleasenumber'
     *
     * @param  string $phone_number A valid Ytel comma separated numbers (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneMassreleasenumberRequest($phone_number)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneMassreleasenumber'
            );
        }

        $resourcePath = '/incomingphone/massreleasenumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneMassupdatenumber
     *
     * Bulk Update Numbers
     *
     * @param  string $phone_number A valid comma(,) separated Ytel numbers. (E.164 format). (required)
     * @param  string $voice_url The URL returning InboundXML incoming calls should execute when connected. (required)
     * @param  string $friendly_name A human-readable value for labeling the number. (optional)
     * @param  string $voice_method Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)
     * @param  string $voice_fallback_url URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)
     * @param  string $voice_fallback_method Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)
     * @param  string $hangup_callback URL that can be requested to receive notification when and how incoming call has ended. (optional)
     * @param  string $hangup_callback_method The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)
     * @param  string $heartbeat_url URL that can be used to monitor the phone number. (optional)
     * @param  string $heartbeat_method The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)
     * @param  string $sms_url URL requested when an SMS is received. (optional)
     * @param  string $sms_method The HTTP method Ytel will use when requesting the SmsUrl. (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneMassupdatenumber($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        list($response) = $this->incomingphoneMassupdatenumberWithHttpInfo($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);
        return $response;
    }

    /**
     * Operation incomingphoneMassupdatenumberWithHttpInfo
     *
     * Bulk Update Numbers
     *
     * @param  string $phone_number A valid comma(,) separated Ytel numbers. (E.164 format). (required)
     * @param  string $voice_url The URL returning InboundXML incoming calls should execute when connected. (required)
     * @param  string $friendly_name A human-readable value for labeling the number. (optional)
     * @param  string $voice_method Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)
     * @param  string $voice_fallback_url URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)
     * @param  string $voice_fallback_method Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)
     * @param  string $hangup_callback URL that can be requested to receive notification when and how incoming call has ended. (optional)
     * @param  string $hangup_callback_method The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)
     * @param  string $heartbeat_url URL that can be used to monitor the phone number. (optional)
     * @param  string $heartbeat_method The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)
     * @param  string $sms_url URL requested when an SMS is received. (optional)
     * @param  string $sms_method The HTTP method Ytel will use when requesting the SmsUrl. (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneMassupdatenumberWithHttpInfo($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneMassupdatenumberRequest($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneMassupdatenumberAsync
     *
     * Bulk Update Numbers
     *
     * @param  string $phone_number A valid comma(,) separated Ytel numbers. (E.164 format). (required)
     * @param  string $voice_url The URL returning InboundXML incoming calls should execute when connected. (required)
     * @param  string $friendly_name A human-readable value for labeling the number. (optional)
     * @param  string $voice_method Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)
     * @param  string $voice_fallback_url URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)
     * @param  string $voice_fallback_method Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)
     * @param  string $hangup_callback URL that can be requested to receive notification when and how incoming call has ended. (optional)
     * @param  string $hangup_callback_method The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)
     * @param  string $heartbeat_url URL that can be used to monitor the phone number. (optional)
     * @param  string $heartbeat_method The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)
     * @param  string $sms_url URL requested when an SMS is received. (optional)
     * @param  string $sms_method The HTTP method Ytel will use when requesting the SmsUrl. (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneMassupdatenumberAsync($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        return $this->incomingphoneMassupdatenumberAsyncWithHttpInfo($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneMassupdatenumberAsyncWithHttpInfo
     *
     * Bulk Update Numbers
     *
     * @param  string $phone_number A valid comma(,) separated Ytel numbers. (E.164 format). (required)
     * @param  string $voice_url The URL returning InboundXML incoming calls should execute when connected. (required)
     * @param  string $friendly_name A human-readable value for labeling the number. (optional)
     * @param  string $voice_method Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)
     * @param  string $voice_fallback_url URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)
     * @param  string $voice_fallback_method Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)
     * @param  string $hangup_callback URL that can be requested to receive notification when and how incoming call has ended. (optional)
     * @param  string $hangup_callback_method The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)
     * @param  string $heartbeat_url URL that can be used to monitor the phone number. (optional)
     * @param  string $heartbeat_method The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)
     * @param  string $sms_url URL requested when an SMS is received. (optional)
     * @param  string $sms_method The HTTP method Ytel will use when requesting the SmsUrl. (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneMassupdatenumberAsyncWithHttpInfo($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneMassupdatenumberRequest($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneMassupdatenumber'
     *
     * @param  string $phone_number A valid comma(,) separated Ytel numbers. (E.164 format). (required)
     * @param  string $voice_url The URL returning InboundXML incoming calls should execute when connected. (required)
     * @param  string $friendly_name A human-readable value for labeling the number. (optional)
     * @param  string $voice_method Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)
     * @param  string $voice_fallback_url URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)
     * @param  string $voice_fallback_method Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)
     * @param  string $hangup_callback URL that can be requested to receive notification when and how incoming call has ended. (optional)
     * @param  string $hangup_callback_method The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)
     * @param  string $heartbeat_url URL that can be used to monitor the phone number. (optional)
     * @param  string $heartbeat_method The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)
     * @param  string $sms_url URL requested when an SMS is received. (optional)
     * @param  string $sms_method The HTTP method Ytel will use when requesting the SmsUrl. (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneMassupdatenumberRequest($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneMassupdatenumber'
            );
        }
        // verify the required parameter 'voice_url' is set
        if ($voice_url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voice_url when calling incomingphoneMassupdatenumber'
            );
        }

        $resourcePath = '/incomingphone/massupdatenumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // form params
        if ($voice_url !== null) {
            $formParams['VoiceUrl'] = ObjectSerializer::toFormValue($voice_url);
        }
        // form params
        if ($friendly_name !== null) {
            $formParams['FriendlyName'] = ObjectSerializer::toFormValue($friendly_name);
        }
        // form params
        if ($voice_method !== null) {
            $formParams['VoiceMethod'] = ObjectSerializer::toFormValue($voice_method);
        }
        // form params
        if ($voice_fallback_url !== null) {
            $formParams['VoiceFallbackUrl'] = ObjectSerializer::toFormValue($voice_fallback_url);
        }
        // form params
        if ($voice_fallback_method !== null) {
            $formParams['VoiceFallbackMethod'] = ObjectSerializer::toFormValue($voice_fallback_method);
        }
        // form params
        if ($hangup_callback !== null) {
            $formParams['HangupCallback'] = ObjectSerializer::toFormValue($hangup_callback);
        }
        // form params
        if ($hangup_callback_method !== null) {
            $formParams['HangupCallbackMethod'] = ObjectSerializer::toFormValue($hangup_callback_method);
        }
        // form params
        if ($heartbeat_url !== null) {
            $formParams['HeartbeatUrl'] = ObjectSerializer::toFormValue($heartbeat_url);
        }
        // form params
        if ($heartbeat_method !== null) {
            $formParams['HeartbeatMethod'] = ObjectSerializer::toFormValue($heartbeat_method);
        }
        // form params
        if ($sms_url !== null) {
            $formParams['SmsUrl'] = ObjectSerializer::toFormValue($sms_url);
        }
        // form params
        if ($sms_method !== null) {
            $formParams['SmsMethod'] = ObjectSerializer::toFormValue($sms_method);
        }
        // form params
        if ($sms_fallback_url !== null) {
            $formParams['SmsFallbackUrl'] = ObjectSerializer::toFormValue($sms_fallback_url);
        }
        // form params
        if ($sms_fallback_method !== null) {
            $formParams['SmsFallbackMethod'] = ObjectSerializer::toFormValue($sms_fallback_method);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneReleasenumberByResponseTypePost
     *
     * Release Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $response_type Response type format xml or json (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneReleasenumberByResponseTypePost($phone_number, $response_type)
    {
        list($response) = $this->incomingphoneReleasenumberByResponseTypePostWithHttpInfo($phone_number, $response_type);
        return $response;
    }

    /**
     * Operation incomingphoneReleasenumberByResponseTypePostWithHttpInfo
     *
     * Release Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $response_type Response type format xml or json (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneReleasenumberByResponseTypePostWithHttpInfo($phone_number, $response_type)
    {
        $returnType = 'string';
        $request = $this->incomingphoneReleasenumberByResponseTypePostRequest($phone_number, $response_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneReleasenumberByResponseTypePostAsync
     *
     * Release Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $response_type Response type format xml or json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneReleasenumberByResponseTypePostAsync($phone_number, $response_type)
    {
        return $this->incomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo($phone_number, $response_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo
     *
     * Release Number
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $response_type Response type format xml or json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo($phone_number, $response_type)
    {
        $returnType = 'string';
        $request = $this->incomingphoneReleasenumberByResponseTypePostRequest($phone_number, $response_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneReleasenumberByResponseTypePost'
     *
     * @param  string $phone_number A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $response_type Response type format xml or json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneReleasenumberByResponseTypePostRequest($phone_number, $response_type)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneReleasenumberByResponseTypePost'
            );
        }
        // verify the required parameter 'response_type' is set
        if ($response_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $response_type when calling incomingphoneReleasenumberByResponseTypePost'
            );
        }

        $resourcePath = '/incomingphone/releasenumber.{ResponseType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($response_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ResponseType' . '}',
                ObjectSerializer::toPathValue($response_type),
                $resourcePath
            );
        }

        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneTransferphonenumbers
     *
     * Move Number
     *
     * @param  string $phonenumber A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $fromaccountsid A specific Accountsid from where Number is getting transfer. (required)
     * @param  string $toaccountsid A specific Accountsid to which Number is getting transfer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneTransferphonenumbers($phonenumber, $fromaccountsid, $toaccountsid)
    {
        list($response) = $this->incomingphoneTransferphonenumbersWithHttpInfo($phonenumber, $fromaccountsid, $toaccountsid);
        return $response;
    }

    /**
     * Operation incomingphoneTransferphonenumbersWithHttpInfo
     *
     * Move Number
     *
     * @param  string $phonenumber A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $fromaccountsid A specific Accountsid from where Number is getting transfer. (required)
     * @param  string $toaccountsid A specific Accountsid to which Number is getting transfer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneTransferphonenumbersWithHttpInfo($phonenumber, $fromaccountsid, $toaccountsid)
    {
        $returnType = 'string';
        $request = $this->incomingphoneTransferphonenumbersRequest($phonenumber, $fromaccountsid, $toaccountsid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneTransferphonenumbersAsync
     *
     * Move Number
     *
     * @param  string $phonenumber A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $fromaccountsid A specific Accountsid from where Number is getting transfer. (required)
     * @param  string $toaccountsid A specific Accountsid to which Number is getting transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneTransferphonenumbersAsync($phonenumber, $fromaccountsid, $toaccountsid)
    {
        return $this->incomingphoneTransferphonenumbersAsyncWithHttpInfo($phonenumber, $fromaccountsid, $toaccountsid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneTransferphonenumbersAsyncWithHttpInfo
     *
     * Move Number
     *
     * @param  string $phonenumber A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $fromaccountsid A specific Accountsid from where Number is getting transfer. (required)
     * @param  string $toaccountsid A specific Accountsid to which Number is getting transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneTransferphonenumbersAsyncWithHttpInfo($phonenumber, $fromaccountsid, $toaccountsid)
    {
        $returnType = 'string';
        $request = $this->incomingphoneTransferphonenumbersRequest($phonenumber, $fromaccountsid, $toaccountsid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneTransferphonenumbers'
     *
     * @param  string $phonenumber A valid 10-digit Ytel number (E.164 format). (required)
     * @param  string $fromaccountsid A specific Accountsid from where Number is getting transfer. (required)
     * @param  string $toaccountsid A specific Accountsid to which Number is getting transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneTransferphonenumbersRequest($phonenumber, $fromaccountsid, $toaccountsid)
    {
        // verify the required parameter 'phonenumber' is set
        if ($phonenumber === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phonenumber when calling incomingphoneTransferphonenumbers'
            );
        }
        // verify the required parameter 'fromaccountsid' is set
        if ($fromaccountsid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromaccountsid when calling incomingphoneTransferphonenumbers'
            );
        }
        // verify the required parameter 'toaccountsid' is set
        if ($toaccountsid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toaccountsid when calling incomingphoneTransferphonenumbers'
            );
        }

        $resourcePath = '/incomingphone/transferphonenumbers.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phonenumber !== null) {
            $formParams['phonenumber'] = ObjectSerializer::toFormValue($phonenumber);
        }
        // form params
        if ($fromaccountsid !== null) {
            $formParams['fromaccountsid'] = ObjectSerializer::toFormValue($fromaccountsid);
        }
        // form params
        if ($toaccountsid !== null) {
            $formParams['toaccountsid'] = ObjectSerializer::toFormValue($toaccountsid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneUpdatenumber
     *
     * Update Number
     *
     * @param  string $phone_number A valid Ytel number (E.164 format). (required)
     * @param  string $voice_url URL requested once the call connects (required)
     * @param  string $friendly_name Phone number friendly name description (optional)
     * @param  string $voice_method Post or Get (optional)
     * @param  string $voice_fallback_url URL requested if the voice URL is not available (optional)
     * @param  string $voice_fallback_method Post or Get (optional)
     * @param  string $hangup_callback callback url after a hangup occurs (optional)
     * @param  string $hangup_callback_method Post or Get (optional)
     * @param  string $heartbeat_url URL requested once the call connects (optional)
     * @param  string $heartbeat_method URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)
     * @param  string $sms_url URL requested when an SMS is received (optional)
     * @param  string $sms_method Post or Get (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneUpdatenumber($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        list($response) = $this->incomingphoneUpdatenumberWithHttpInfo($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);
        return $response;
    }

    /**
     * Operation incomingphoneUpdatenumberWithHttpInfo
     *
     * Update Number
     *
     * @param  string $phone_number A valid Ytel number (E.164 format). (required)
     * @param  string $voice_url URL requested once the call connects (required)
     * @param  string $friendly_name Phone number friendly name description (optional)
     * @param  string $voice_method Post or Get (optional)
     * @param  string $voice_fallback_url URL requested if the voice URL is not available (optional)
     * @param  string $voice_fallback_method Post or Get (optional)
     * @param  string $hangup_callback callback url after a hangup occurs (optional)
     * @param  string $hangup_callback_method Post or Get (optional)
     * @param  string $heartbeat_url URL requested once the call connects (optional)
     * @param  string $heartbeat_method URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)
     * @param  string $sms_url URL requested when an SMS is received (optional)
     * @param  string $sms_method Post or Get (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneUpdatenumberWithHttpInfo($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneUpdatenumberRequest($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneUpdatenumberAsync
     *
     * Update Number
     *
     * @param  string $phone_number A valid Ytel number (E.164 format). (required)
     * @param  string $voice_url URL requested once the call connects (required)
     * @param  string $friendly_name Phone number friendly name description (optional)
     * @param  string $voice_method Post or Get (optional)
     * @param  string $voice_fallback_url URL requested if the voice URL is not available (optional)
     * @param  string $voice_fallback_method Post or Get (optional)
     * @param  string $hangup_callback callback url after a hangup occurs (optional)
     * @param  string $hangup_callback_method Post or Get (optional)
     * @param  string $heartbeat_url URL requested once the call connects (optional)
     * @param  string $heartbeat_method URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)
     * @param  string $sms_url URL requested when an SMS is received (optional)
     * @param  string $sms_method Post or Get (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneUpdatenumberAsync($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        return $this->incomingphoneUpdatenumberAsyncWithHttpInfo($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneUpdatenumberAsyncWithHttpInfo
     *
     * Update Number
     *
     * @param  string $phone_number A valid Ytel number (E.164 format). (required)
     * @param  string $voice_url URL requested once the call connects (required)
     * @param  string $friendly_name Phone number friendly name description (optional)
     * @param  string $voice_method Post or Get (optional)
     * @param  string $voice_fallback_url URL requested if the voice URL is not available (optional)
     * @param  string $voice_fallback_method Post or Get (optional)
     * @param  string $hangup_callback callback url after a hangup occurs (optional)
     * @param  string $hangup_callback_method Post or Get (optional)
     * @param  string $heartbeat_url URL requested once the call connects (optional)
     * @param  string $heartbeat_method URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)
     * @param  string $sms_url URL requested when an SMS is received (optional)
     * @param  string $sms_method Post or Get (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneUpdatenumberAsyncWithHttpInfo($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        $returnType = 'string';
        $request = $this->incomingphoneUpdatenumberRequest($phone_number, $voice_url, $friendly_name, $voice_method, $voice_fallback_url, $voice_fallback_method, $hangup_callback, $hangup_callback_method, $heartbeat_url, $heartbeat_method, $sms_url, $sms_method, $sms_fallback_url, $sms_fallback_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneUpdatenumber'
     *
     * @param  string $phone_number A valid Ytel number (E.164 format). (required)
     * @param  string $voice_url URL requested once the call connects (required)
     * @param  string $friendly_name Phone number friendly name description (optional)
     * @param  string $voice_method Post or Get (optional)
     * @param  string $voice_fallback_url URL requested if the voice URL is not available (optional)
     * @param  string $voice_fallback_method Post or Get (optional)
     * @param  string $hangup_callback callback url after a hangup occurs (optional)
     * @param  string $hangup_callback_method Post or Get (optional)
     * @param  string $heartbeat_url URL requested once the call connects (optional)
     * @param  string $heartbeat_method URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)
     * @param  string $sms_url URL requested when an SMS is received (optional)
     * @param  string $sms_method Post or Get (optional)
     * @param  string $sms_fallback_url URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)
     * @param  string $sms_fallback_method The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneUpdatenumberRequest($phone_number, $voice_url, $friendly_name = null, $voice_method = null, $voice_fallback_url = null, $voice_fallback_method = null, $hangup_callback = null, $hangup_callback_method = null, $heartbeat_url = null, $heartbeat_method = null, $sms_url = null, $sms_method = null, $sms_fallback_url = null, $sms_fallback_method = null)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneUpdatenumber'
            );
        }
        // verify the required parameter 'voice_url' is set
        if ($voice_url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voice_url when calling incomingphoneUpdatenumber'
            );
        }

        $resourcePath = '/incomingphone/updatenumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // form params
        if ($voice_url !== null) {
            $formParams['VoiceUrl'] = ObjectSerializer::toFormValue($voice_url);
        }
        // form params
        if ($friendly_name !== null) {
            $formParams['FriendlyName'] = ObjectSerializer::toFormValue($friendly_name);
        }
        // form params
        if ($voice_method !== null) {
            $formParams['VoiceMethod'] = ObjectSerializer::toFormValue($voice_method);
        }
        // form params
        if ($voice_fallback_url !== null) {
            $formParams['VoiceFallbackUrl'] = ObjectSerializer::toFormValue($voice_fallback_url);
        }
        // form params
        if ($voice_fallback_method !== null) {
            $formParams['VoiceFallbackMethod'] = ObjectSerializer::toFormValue($voice_fallback_method);
        }
        // form params
        if ($hangup_callback !== null) {
            $formParams['HangupCallback'] = ObjectSerializer::toFormValue($hangup_callback);
        }
        // form params
        if ($hangup_callback_method !== null) {
            $formParams['HangupCallbackMethod'] = ObjectSerializer::toFormValue($hangup_callback_method);
        }
        // form params
        if ($heartbeat_url !== null) {
            $formParams['HeartbeatUrl'] = ObjectSerializer::toFormValue($heartbeat_url);
        }
        // form params
        if ($heartbeat_method !== null) {
            $formParams['HeartbeatMethod'] = ObjectSerializer::toFormValue($heartbeat_method);
        }
        // form params
        if ($sms_url !== null) {
            $formParams['SmsUrl'] = ObjectSerializer::toFormValue($sms_url);
        }
        // form params
        if ($sms_method !== null) {
            $formParams['SmsMethod'] = ObjectSerializer::toFormValue($sms_method);
        }
        // form params
        if ($sms_fallback_url !== null) {
            $formParams['SmsFallbackUrl'] = ObjectSerializer::toFormValue($sms_fallback_url);
        }
        // form params
        if ($sms_fallback_method !== null) {
            $formParams['SmsFallbackMethod'] = ObjectSerializer::toFormValue($sms_fallback_method);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incomingphoneViewnumber
     *
     * View Details
     *
     * @param  string $phone_number A valid Ytel 10-digit phone number (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function incomingphoneViewnumber($phone_number)
    {
        list($response) = $this->incomingphoneViewnumberWithHttpInfo($phone_number);
        return $response;
    }

    /**
     * Operation incomingphoneViewnumberWithHttpInfo
     *
     * View Details
     *
     * @param  string $phone_number A valid Ytel 10-digit phone number (E.164 format). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function incomingphoneViewnumberWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneViewnumberRequest($phone_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incomingphoneViewnumberAsync
     *
     * View Details
     *
     * @param  string $phone_number A valid Ytel 10-digit phone number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneViewnumberAsync($phone_number)
    {
        return $this->incomingphoneViewnumberAsyncWithHttpInfo($phone_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incomingphoneViewnumberAsyncWithHttpInfo
     *
     * View Details
     *
     * @param  string $phone_number A valid Ytel 10-digit phone number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incomingphoneViewnumberAsyncWithHttpInfo($phone_number)
    {
        $returnType = 'string';
        $request = $this->incomingphoneViewnumberRequest($phone_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incomingphoneViewnumber'
     *
     * @param  string $phone_number A valid Ytel 10-digit phone number (E.164 format). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function incomingphoneViewnumberRequest($phone_number)
    {
        // verify the required parameter 'phone_number' is set
        if ($phone_number === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling incomingphoneViewnumber'
            );
        }

        $resourcePath = '/incomingphone/viewnumber.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($phone_number !== null) {
            $formParams['PhoneNumber'] = ObjectSerializer::toFormValue($phone_number);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
