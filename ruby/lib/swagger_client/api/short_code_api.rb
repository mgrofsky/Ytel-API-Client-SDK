=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class ShortCodeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List Inbound SMS
    # Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize Number of individual resources listed in the response per page (default to 10)
    # @option opts [String] :from Only list SMS messages sent from this number
    # @option opts [String] :shortcode Only list SMS messages sent to Shortcode
    # @option opts [String] :datecreated Only list SMS messages sent in the specified date MAKE REQUEST
    # @return [String]
    def dedicatedshortcode_getinboundsms(opts = {})
      data, _status_code, _headers = dedicatedshortcode_getinboundsms_with_http_info(opts)
      return data
    end

    # List Inbound SMS
    # Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize Number of individual resources listed in the response per page
    # @option opts [String] :from Only list SMS messages sent from this number
    # @option opts [String] :shortcode Only list SMS messages sent to Shortcode
    # @option opts [String] :datecreated Only list SMS messages sent in the specified date MAKE REQUEST
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dedicatedshortcode_getinboundsms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.dedicatedshortcode_getinboundsms ..."
      end
      # resource path
      local_var_path = "/dedicatedshortcode/getinboundsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["From"] = opts[:'from'] if !opts[:'from'].nil?
      form_params["Shortcode"] = opts[:'shortcode'] if !opts[:'shortcode'].nil?
      form_params["Datecreated"] = opts[:'datecreated'] if !opts[:'datecreated'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#dedicatedshortcode_getinboundsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Shortcodes
    # Retrieve a list of Short Code assignment associated with your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shortcode Only list Short Code Assignment sent from this Short Code
    # @option opts [String] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [String] :pagesize The count of objects to return per page.
    # @return [String]
    def dedicatedshortcode_listshortcode(opts = {})
      data, _status_code, _headers = dedicatedshortcode_listshortcode_with_http_info(opts)
      return data
    end

    # List Shortcodes
    # Retrieve a list of Short Code assignment associated with your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shortcode Only list Short Code Assignment sent from this Short Code
    # @option opts [String] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [String] :pagesize The count of objects to return per page.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dedicatedshortcode_listshortcode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.dedicatedshortcode_listshortcode ..."
      end
      # resource path
      local_var_path = "/dedicatedshortcode/listshortcode.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Shortcode"] = opts[:'shortcode'] if !opts[:'shortcode'].nil?
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#dedicatedshortcode_listshortcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send SMS
    # Send Dedicated Shortcode
    # @param shortcode Your dedicated shortcode
    # @param to The number to send your SMS to
    # @param body The body of your message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
    # @option opts [String] :messagestatuscallback URL that can be requested to receive notification when Short Code message was sent.
    # @return [String]
    def dedicatedshortcode_sendsms(shortcode, to, body, opts = {})
      data, _status_code, _headers = dedicatedshortcode_sendsms_with_http_info(shortcode, to, body, opts)
      return data
    end

    # Send SMS
    # Send Dedicated Shortcode
    # @param shortcode Your dedicated shortcode
    # @param to The number to send your SMS to
    # @param body The body of your message
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
    # @option opts [String] :messagestatuscallback URL that can be requested to receive notification when Short Code message was sent.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dedicatedshortcode_sendsms_with_http_info(shortcode, to, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.dedicatedshortcode_sendsms ..."
      end
      # verify the required parameter 'shortcode' is set
      if @api_client.config.client_side_validation && shortcode.nil?
        fail ArgumentError, "Missing the required parameter 'shortcode' when calling ShortCodeApi.dedicatedshortcode_sendsms"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ShortCodeApi.dedicatedshortcode_sendsms"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ShortCodeApi.dedicatedshortcode_sendsms"
      end
      # resource path
      local_var_path = "/dedicatedshortcode/sendsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["shortcode"] = shortcode
      form_params["to"] = to
      form_params["body"] = body
      form_params["method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["messagestatuscallback"] = opts[:'messagestatuscallback'] if !opts[:'messagestatuscallback'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#dedicatedshortcode_sendsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Shortcode
    # Update a dedicated shortcode.
    # @param shortcode List of valid dedicated shortcode to your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :friendly_name User generated name of the dedicated shortcode.
    # @option opts [String] :callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
    # @option opts [String] :callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
    # @return [String]
    def dedicatedshortcode_updateshortcode(shortcode, opts = {})
      data, _status_code, _headers = dedicatedshortcode_updateshortcode_with_http_info(shortcode, opts)
      return data
    end

    # Update Shortcode
    # Update a dedicated shortcode.
    # @param shortcode List of valid dedicated shortcode to your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :friendly_name User generated name of the dedicated shortcode.
    # @option opts [String] :callback_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
    # @option opts [String] :callback_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :fallback_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :fallback_url URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dedicatedshortcode_updateshortcode_with_http_info(shortcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.dedicatedshortcode_updateshortcode ..."
      end
      # verify the required parameter 'shortcode' is set
      if @api_client.config.client_side_validation && shortcode.nil?
        fail ArgumentError, "Missing the required parameter 'shortcode' when calling ShortCodeApi.dedicatedshortcode_updateshortcode"
      end
      # resource path
      local_var_path = "/dedicatedshortcode/updateshortcode.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Shortcode"] = shortcode
      form_params["FriendlyName"] = opts[:'friendly_name'] if !opts[:'friendly_name'].nil?
      form_params["CallbackMethod"] = opts[:'callback_method'] if !opts[:'callback_method'].nil?
      form_params["CallbackUrl"] = opts[:'callback_url'] if !opts[:'callback_url'].nil?
      form_params["FallbackMethod"] = opts[:'fallback_method'] if !opts[:'fallback_method'].nil?
      form_params["FallbackUrl"] = opts[:'fallback_url'] if !opts[:'fallback_url'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#dedicatedshortcode_updateshortcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View SMS
    # Retrieve a single Short Code object by its shortcode assignment.
    # @param shortcode List of valid Dedicated Short Code to your Ytel account
    # @param [Hash] opts the optional parameters
    # @return [String]
    def dedicatedshortcode_viewshortcode(shortcode, opts = {})
      data, _status_code, _headers = dedicatedshortcode_viewshortcode_with_http_info(shortcode, opts)
      return data
    end

    # View SMS
    # Retrieve a single Short Code object by its shortcode assignment.
    # @param shortcode List of valid Dedicated Short Code to your Ytel account
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def dedicatedshortcode_viewshortcode_with_http_info(shortcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.dedicatedshortcode_viewshortcode ..."
      end
      # verify the required parameter 'shortcode' is set
      if @api_client.config.client_side_validation && shortcode.nil?
        fail ArgumentError, "Missing the required parameter 'shortcode' when calling ShortCodeApi.dedicatedshortcode_viewshortcode"
      end
      # resource path
      local_var_path = "/dedicatedshortcode/viewshortcode.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Shortcode"] = shortcode

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#dedicatedshortcode_viewshortcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SMS
    # Retrieve a list of Short Code messages.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shortcode Only list messages sent from this Short Code
    # @option opts [String] :to Only list messages sent to this number
    # @option opts [String] :date_sent Only list messages sent with the specified date
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :page_size The count of objects to return per page. (default to 10)
    # @return [String]
    def shortcode_listsms(opts = {})
      data, _status_code, _headers = shortcode_listsms_with_http_info(opts)
      return data
    end

    # List SMS
    # Retrieve a list of Short Code messages.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :shortcode Only list messages sent from this Short Code
    # @option opts [String] :to Only list messages sent to this number
    # @option opts [String] :date_sent Only list messages sent with the specified date
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :page_size The count of objects to return per page.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def shortcode_listsms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.shortcode_listsms ..."
      end
      # resource path
      local_var_path = "/shortcode/listsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Shortcode"] = opts[:'shortcode'] if !opts[:'shortcode'].nil?
      form_params["To"] = opts[:'to'] if !opts[:'to'].nil?
      form_params["DateSent"] = opts[:'date_sent'] if !opts[:'date_sent'].nil?
      form_params["Page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["PageSize"] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#shortcode_listsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View SMS
    # View a single Sms Short Code message.
    # @param message_sid The unique identifier for the sms resource
    # @param [Hash] opts the optional parameters
    # @return [String]
    def shortcode_viewsms(message_sid, opts = {})
      data, _status_code, _headers = shortcode_viewsms_with_http_info(message_sid, opts)
      return data
    end

    # View SMS
    # View a single Sms Short Code message.
    # @param message_sid The unique identifier for the sms resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def shortcode_viewsms_with_http_info(message_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShortCodeApi.shortcode_viewsms ..."
      end
      # verify the required parameter 'message_sid' is set
      if @api_client.config.client_side_validation && message_sid.nil?
        fail ArgumentError, "Missing the required parameter 'message_sid' when calling ShortCodeApi.shortcode_viewsms"
      end
      # resource path
      local_var_path = "/shortcode/viewsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["MessageSid"] = message_sid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShortCodeApi#shortcode_viewsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
