=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class LetterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Letter
    # Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
    # @param to The AddressId or an object structured when creating an address by addresses/Create.
    # @param from The AddressId or an object structured when creating an address by addresses/Create.
    # @param attachbyid Set an existing letter by attaching its LetterId.
    # @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.
    # @param color Specify if letter should be printed in color.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description for the letter.
    # @option opts [String] :extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
    # @option opts [String] :doublesided Specify if letter should be printed on both sides.
    # @option opts [String] :template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [String]
    def letter_create(to, from, attachbyid, file, color, opts = {})
      data, _status_code, _headers = letter_create_with_http_info(to, from, attachbyid, file, color, opts)
      return data
    end

    # Create Letter
    # Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
    # @param to The AddressId or an object structured when creating an address by addresses/Create.
    # @param from The AddressId or an object structured when creating an address by addresses/Create.
    # @param attachbyid Set an existing letter by attaching its LetterId.
    # @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.
    # @param color Specify if letter should be printed in color.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description for the letter.
    # @option opts [String] :extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
    # @option opts [String] :doublesided Specify if letter should be printed on both sides.
    # @option opts [String] :template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def letter_create_with_http_info(to, from, attachbyid, file, color, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LetterApi.letter_create ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling LetterApi.letter_create"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling LetterApi.letter_create"
      end
      # verify the required parameter 'attachbyid' is set
      if @api_client.config.client_side_validation && attachbyid.nil?
        fail ArgumentError, "Missing the required parameter 'attachbyid' when calling LetterApi.letter_create"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling LetterApi.letter_create"
      end
      # verify the required parameter 'color' is set
      if @api_client.config.client_side_validation && color.nil?
        fail ArgumentError, "Missing the required parameter 'color' when calling LetterApi.letter_create"
      end
      # resource path
      local_var_path = "/letter/create.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["to"] = to
      form_params["from"] = from
      form_params["attachbyid"] = attachbyid
      form_params["file"] = file
      form_params["color"] = color
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["extraservice"] = opts[:'extraservice'] if !opts[:'extraservice'].nil?
      form_params["doublesided"] = opts[:'doublesided'] if !opts[:'doublesided'].nil?
      form_params["template"] = opts[:'template'] if !opts[:'template'].nil?
      form_params["htmldata"] = opts[:'htmldata'] if !opts[:'htmldata'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LetterApi#letter_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Letter
    # Remove a letter object by its LetterId.
    # @param lettersid The unique identifier for a letter object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def letter_delete(lettersid, opts = {})
      data, _status_code, _headers = letter_delete_with_http_info(lettersid, opts)
      return data
    end

    # Delete Letter
    # Remove a letter object by its LetterId.
    # @param lettersid The unique identifier for a letter object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def letter_delete_with_http_info(lettersid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LetterApi.letter_delete ..."
      end
      # verify the required parameter 'lettersid' is set
      if @api_client.config.client_side_validation && lettersid.nil?
        fail ArgumentError, "Missing the required parameter 'lettersid' when calling LetterApi.letter_delete"
      end
      # resource path
      local_var_path = "/letter/delete.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["lettersid"] = lettersid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LetterApi#letter_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Letters
    # Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize The count of objects to return per page. (default to 10)
    # @option opts [String] :lettersid The unique identifier for a letter object.
    # @option opts [String] :date_created The date the letter was created.
    # @return [String]
    def letter_listsletter(opts = {})
      data, _status_code, _headers = letter_listsletter_with_http_info(opts)
      return data
    end

    # List Letters
    # Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize The count of objects to return per page.
    # @option opts [String] :lettersid The unique identifier for a letter object.
    # @option opts [String] :date_created The date the letter was created.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def letter_listsletter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LetterApi.letter_listsletter ..."
      end
      # resource path
      local_var_path = "/letter/listsletter.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["lettersid"] = opts[:'lettersid'] if !opts[:'lettersid'].nil?
      form_params["dateCreated"] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LetterApi#letter_listsletter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Letter
    # Retrieve a letter object by its LetterSid.
    # @param lettersid The unique identifier for a letter object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def letter_viewletter(lettersid, opts = {})
      data, _status_code, _headers = letter_viewletter_with_http_info(lettersid, opts)
      return data
    end

    # View Letter
    # Retrieve a letter object by its LetterSid.
    # @param lettersid The unique identifier for a letter object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def letter_viewletter_with_http_info(lettersid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LetterApi.letter_viewletter ..."
      end
      # verify the required parameter 'lettersid' is set
      if @api_client.config.client_side_validation && lettersid.nil?
        fail ArgumentError, "Missing the required parameter 'lettersid' when calling LetterApi.letter_viewletter"
      end
      # resource path
      local_var_path = "/letter/viewletter.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["lettersid"] = lettersid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LetterApi#letter_viewletter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
