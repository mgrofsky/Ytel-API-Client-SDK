=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class AreaMailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create AreaMail
    # Create a new AreaMail object.
    # @param routes List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043
    # @param attachbyid Set an existing areamail by attaching its AreamailId.
    # @param front The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required
    # @param back The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A string value to use as a description for this AreaMail item.
    # @option opts [String] :targettype The delivery location type.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [String]
    def areamail_create(routes, attachbyid, front, back, opts = {})
      data, _status_code, _headers = areamail_create_with_http_info(routes, attachbyid, front, back, opts)
      return data
    end

    # Create AreaMail
    # Create a new AreaMail object.
    # @param routes List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043
    # @param attachbyid Set an existing areamail by attaching its AreamailId.
    # @param front The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required
    # @param back The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A string value to use as a description for this AreaMail item.
    # @option opts [String] :targettype The delivery location type.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def areamail_create_with_http_info(routes, attachbyid, front, back, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AreaMailApi.areamail_create ..."
      end
      # verify the required parameter 'routes' is set
      if @api_client.config.client_side_validation && routes.nil?
        fail ArgumentError, "Missing the required parameter 'routes' when calling AreaMailApi.areamail_create"
      end
      # verify the required parameter 'attachbyid' is set
      if @api_client.config.client_side_validation && attachbyid.nil?
        fail ArgumentError, "Missing the required parameter 'attachbyid' when calling AreaMailApi.areamail_create"
      end
      # verify the required parameter 'front' is set
      if @api_client.config.client_side_validation && front.nil?
        fail ArgumentError, "Missing the required parameter 'front' when calling AreaMailApi.areamail_create"
      end
      # verify the required parameter 'back' is set
      if @api_client.config.client_side_validation && back.nil?
        fail ArgumentError, "Missing the required parameter 'back' when calling AreaMailApi.areamail_create"
      end
      # resource path
      local_var_path = "/areamail/create.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["routes"] = routes
      form_params["attachbyid"] = attachbyid
      form_params["front"] = front
      form_params["back"] = back
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["targettype"] = opts[:'targettype'] if !opts[:'targettype'].nil?
      form_params["htmldata"] = opts[:'htmldata'] if !opts[:'htmldata'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AreaMailApi#areamail_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete AreaMail
    # Remove an AreaMail object by its AreaMailId.
    # @param areamailid The unique identifier for an AreaMail object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def areamail_delete(areamailid, opts = {})
      data, _status_code, _headers = areamail_delete_with_http_info(areamailid, opts)
      return data
    end

    # Delete AreaMail
    # Remove an AreaMail object by its AreaMailId.
    # @param areamailid The unique identifier for an AreaMail object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def areamail_delete_with_http_info(areamailid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AreaMailApi.areamail_delete ..."
      end
      # verify the required parameter 'areamailid' is set
      if @api_client.config.client_side_validation && areamailid.nil?
        fail ArgumentError, "Missing the required parameter 'areamailid' when calling AreaMailApi.areamail_delete"
      end
      # resource path
      local_var_path = "/areamail/delete.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["areamailid"] = areamailid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AreaMailApi#areamail_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List AreaMails
    # Retrieve a list of AreaMail objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize The count of objects to return per page. (default to 10)
    # @option opts [String] :areamailsid The unique identifier for an AreaMail object.
    # @option opts [String] :date_created The date the AreaMail was created.
    # @return [String]
    def areamail_lists(opts = {})
      data, _status_code, _headers = areamail_lists_with_http_info(opts)
      return data
    end

    # List AreaMails
    # Retrieve a list of AreaMail objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize The count of objects to return per page.
    # @option opts [String] :areamailsid The unique identifier for an AreaMail object.
    # @option opts [String] :date_created The date the AreaMail was created.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def areamail_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AreaMailApi.areamail_lists ..."
      end
      # resource path
      local_var_path = "/areamail/lists.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["areamailsid"] = opts[:'areamailsid'] if !opts[:'areamailsid'].nil?
      form_params["dateCreated"] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AreaMailApi#areamail_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View AreaMail
    # Retrieve an AreaMail object by its AreaMailId.
    # @param areamailid The unique identifier for an AreaMail object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def areamail_view(areamailid, opts = {})
      data, _status_code, _headers = areamail_view_with_http_info(areamailid, opts)
      return data
    end

    # View AreaMail
    # Retrieve an AreaMail object by its AreaMailId.
    # @param areamailid The unique identifier for an AreaMail object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def areamail_view_with_http_info(areamailid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AreaMailApi.areamail_view ..."
      end
      # verify the required parameter 'areamailid' is set
      if @api_client.config.client_side_validation && areamailid.nil?
        fail ArgumentError, "Missing the required parameter 'areamailid' when calling AreaMailApi.areamail_view"
      end
      # resource path
      local_var_path = "/areamail/view.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["areamailid"] = areamailid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AreaMailApi#areamail_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
