=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class TranscriptionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Transcribe Audio URL
    # Transcribe an audio recording from a file.
    # @param audiourl URL pointing to the location of the audio file that is to be transcribed.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def transcriptions_audiourltranscription(audiourl, opts = {})
      data, _status_code, _headers = transcriptions_audiourltranscription_with_http_info(audiourl, opts)
      return data
    end

    # Transcribe Audio URL
    # Transcribe an audio recording from a file.
    # @param audiourl URL pointing to the location of the audio file that is to be transcribed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def transcriptions_audiourltranscription_with_http_info(audiourl, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TranscriptionApi.transcriptions_audiourltranscription ..."
      end
      # verify the required parameter 'audiourl' is set
      if @api_client.config.client_side_validation && audiourl.nil?
        fail ArgumentError, "Missing the required parameter 'audiourl' when calling TranscriptionApi.transcriptions_audiourltranscription"
      end
      # resource path
      local_var_path = "/transcriptions/audiourltranscription.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["audiourl"] = audiourl

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionApi#transcriptions_audiourltranscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Transcriptions
    # Retrieve a list of transcription objects for your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize The count of objects to return per page. (default to 10)
    # @option opts [String] :status The state of the transcription.
    # @option opts [String] :date_transcribed The date the transcription took place.
    # @return [String]
    def transcriptions_listtranscription(opts = {})
      data, _status_code, _headers = transcriptions_listtranscription_with_http_info(opts)
      return data
    end

    # List Transcriptions
    # Retrieve a list of transcription objects for your Ytel account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize The count of objects to return per page.
    # @option opts [String] :status The state of the transcription.
    # @option opts [String] :date_transcribed The date the transcription took place.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def transcriptions_listtranscription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TranscriptionApi.transcriptions_listtranscription ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['inprogress', 'success', 'failure'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of inprogress, success, failure'
      end
      # resource path
      local_var_path = "/transcriptions/listtranscription.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["dateTranscribed"] = opts[:'date_transcribed'] if !opts[:'date_transcribed'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionApi#transcriptions_listtranscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transcribe Recording
    # Transcribe a recording by its RecordingSid.
    # @param recording_sid The unique identifier for a recording object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def transcriptions_recordingtranscription(recording_sid, opts = {})
      data, _status_code, _headers = transcriptions_recordingtranscription_with_http_info(recording_sid, opts)
      return data
    end

    # Transcribe Recording
    # Transcribe a recording by its RecordingSid.
    # @param recording_sid The unique identifier for a recording object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def transcriptions_recordingtranscription_with_http_info(recording_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TranscriptionApi.transcriptions_recordingtranscription ..."
      end
      # verify the required parameter 'recording_sid' is set
      if @api_client.config.client_side_validation && recording_sid.nil?
        fail ArgumentError, "Missing the required parameter 'recording_sid' when calling TranscriptionApi.transcriptions_recordingtranscription"
      end
      # resource path
      local_var_path = "/transcriptions/recordingtranscription.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["recordingSid"] = recording_sid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionApi#transcriptions_recordingtranscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Transcription
    # Retrieve information about a transaction by its TranscriptionSid.
    # @param transcriptionsid The unique identifier for a transcription object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def transcriptions_viewtranscription(transcriptionsid, opts = {})
      data, _status_code, _headers = transcriptions_viewtranscription_with_http_info(transcriptionsid, opts)
      return data
    end

    # View Transcription
    # Retrieve information about a transaction by its TranscriptionSid.
    # @param transcriptionsid The unique identifier for a transcription object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def transcriptions_viewtranscription_with_http_info(transcriptionsid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TranscriptionApi.transcriptions_viewtranscription ..."
      end
      # verify the required parameter 'transcriptionsid' is set
      if @api_client.config.client_side_validation && transcriptionsid.nil?
        fail ArgumentError, "Missing the required parameter 'transcriptionsid' when calling TranscriptionApi.transcriptions_viewtranscription"
      end
      # resource path
      local_var_path = "/transcriptions/viewtranscription.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["transcriptionsid"] = transcriptionsid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptionApi#transcriptions_viewtranscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
