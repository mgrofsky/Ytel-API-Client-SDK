=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Email Unsubscribe
    # Add an email to the unsubscribe list
    # @param email A valid email address that is to be added to the unsubscribe list
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_addunsubscribesemail(email, opts = {})
      data, _status_code, _headers = email_addunsubscribesemail_with_http_info(email, opts)
      return data
    end

    # Add Email Unsubscribe
    # Add an email to the unsubscribe list
    # @param email A valid email address that is to be added to the unsubscribe list
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_addunsubscribesemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_addunsubscribesemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_addunsubscribesemail"
      end
      # resource path
      local_var_path = "/email/addunsubscribesemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_addunsubscribesemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Blocked Address
    # Remove an email from blocked emails list.
    # @param email The email address to be remove from the blocked list.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_deleteblocksemail(email, opts = {})
      data, _status_code, _headers = email_deleteblocksemail_with_http_info(email, opts)
      return data
    end

    # Remove Blocked Address
    # Remove an email from blocked emails list.
    # @param email The email address to be remove from the blocked list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_deleteblocksemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_deleteblocksemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_deleteblocksemail"
      end
      # resource path
      local_var_path = "/email/deleteblocksemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_deleteblocksemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Bounced Email
    # Remove an email address from the bounced list.
    # @param email The email address to be remove from the bounced email list.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_deletebouncesemail(email, opts = {})
      data, _status_code, _headers = email_deletebouncesemail_with_http_info(email, opts)
      return data
    end

    # Remove Bounced Email
    # Remove an email address from the bounced list.
    # @param email The email address to be remove from the bounced email list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_deletebouncesemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_deletebouncesemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_deletebouncesemail"
      end
      # resource path
      local_var_path = "/email/deletebouncesemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_deletebouncesemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Invalid Email
    # Remove an email from the invalid email list.
    # @param email A valid email address that is to be remove from the invalid email list.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_deleteinvalidemail(email, opts = {})
      data, _status_code, _headers = email_deleteinvalidemail_with_http_info(email, opts)
      return data
    end

    # Remove Invalid Email
    # Remove an email from the invalid email list.
    # @param email A valid email address that is to be remove from the invalid email list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_deleteinvalidemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_deleteinvalidemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_deleteinvalidemail"
      end
      # resource path
      local_var_path = "/email/deleteinvalidemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_deleteinvalidemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Spam Address
    # Remove an email from the spam email list.
    # @param email A valid email address that is to be remove from the spam list.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_deletespamemail(email, opts = {})
      data, _status_code, _headers = email_deletespamemail_with_http_info(email, opts)
      return data
    end

    # Remove Spam Address
    # Remove an email from the spam email list.
    # @param email A valid email address that is to be remove from the spam list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_deletespamemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_deletespamemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_deletespamemail"
      end
      # resource path
      local_var_path = "/email/deletespamemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_deletespamemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Unsubscribed Email
    # Remove an email address from the list of unsubscribed emails.
    # @param email A valid email address that is to be remove from the unsubscribe list.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def email_deleteunsubscribedemail(email, opts = {})
      data, _status_code, _headers = email_deleteunsubscribedemail_with_http_info(email, opts)
      return data
    end

    # Remove Unsubscribed Email
    # Remove an email address from the list of unsubscribed emails.
    # @param email A valid email address that is to be remove from the unsubscribe list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_deleteunsubscribedemail_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_deleteunsubscribedemail ..."
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling EmailApi.email_deleteunsubscribedemail"
      end
      # resource path
      local_var_path = "/email/deleteunsubscribedemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["email"] = email

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_deleteunsubscribedemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Blocked Emails
    # Retrieve a list of emails that have been blocked.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of blocked emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [String]
    def email_listblockemail(opts = {})
      data, _status_code, _headers = email_listblockemail_with_http_info(opts)
      return data
    end

    # Blocked Emails
    # Retrieve a list of emails that have been blocked.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of blocked emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_listblockemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_listblockemail ..."
      end
      # resource path
      local_var_path = "/email/listblockemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Offset"] = opts[:'offset'] if !opts[:'offset'].nil?
      form_params["Limit"] = opts[:'limit'] if !opts[:'limit'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_listblockemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bounced Emails
    # Retrieve a list of emails that have bounced.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of bounced emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [String]
    def email_listbounceemail(opts = {})
      data, _status_code, _headers = email_listbounceemail_with_http_info(opts)
      return data
    end

    # Bounced Emails
    # Retrieve a list of emails that have bounced.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of bounced emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_listbounceemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_listbounceemail ..."
      end
      # resource path
      local_var_path = "/email/listbounceemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Offset"] = opts[:'offset'] if !opts[:'offset'].nil?
      form_params["Limit"] = opts[:'limit'] if !opts[:'limit'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_listbounceemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalid Emails
    # Retrieve a list of invalid email addresses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of invalid emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [String]
    def email_listinvalidemail(opts = {})
      data, _status_code, _headers = email_listinvalidemail_with_http_info(opts)
      return data
    end

    # Invalid Emails
    # Retrieve a list of invalid email addresses.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of invalid emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_listinvalidemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_listinvalidemail ..."
      end
      # resource path
      local_var_path = "/email/listinvalidemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Offset"] = opts[:'offset'] if !opts[:'offset'].nil?
      form_params["Limit"] = opts[:'limit'] if !opts[:'limit'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_listinvalidemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Spam Emails
    # Retrieve a list of emails that are on the spam list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of spam emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [String]
    def email_listspamemail(opts = {})
      data, _status_code, _headers = email_listspamemail_with_http_info(opts)
      return data
    end

    # Spam Emails
    # Retrieve a list of emails that are on the spam list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of spam emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_listspamemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_listspamemail ..."
      end
      # resource path
      local_var_path = "/email/listspamemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Offset"] = opts[:'offset'] if !opts[:'offset'].nil?
      form_params["Limit"] = opts[:'limit'] if !opts[:'limit'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_listspamemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Unsubscribed Emails
    # Retrieve a list of email addresses from the unsubscribe list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of unsubscribed emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [String]
    def email_listunsubscribedemail(opts = {})
      data, _status_code, _headers = email_listunsubscribedemail_with_http_info(opts)
      return data
    end

    # List Unsubscribed Emails
    # Retrieve a list of email addresses from the unsubscribe list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :offset The starting point of the list of unsubscribed emails that should be returned.
    # @option opts [String] :limit The count of results that should be returned.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_listunsubscribedemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_listunsubscribedemail ..."
      end
      # resource path
      local_var_path = "/email/listunsubscribedemail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Offset"] = opts[:'offset'] if !opts[:'offset'].nil?
      form_params["Limit"] = opts[:'limit'] if !opts[:'limit'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_listunsubscribedemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send Email
    # Create and submit an email message to one or more email addresses.
    # @param to A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @param type Specifies the type of email to be sent
    # @param subject The subject of the mail. Must be a valid string.
    # @param message The email message that is to be sent in the text.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from A valid address that will send the email.
    # @option opts [String] :cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @option opts [String] :bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @option opts [String] :attachment A file that is attached to the email. Must be less than 7 MB in size.
    # @return [String]
    def email_sendemails(to, type, subject, message, opts = {})
      data, _status_code, _headers = email_sendemails_with_http_info(to, type, subject, message, opts)
      return data
    end

    # Send Email
    # Create and submit an email message to one or more email addresses.
    # @param to A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @param type Specifies the type of email to be sent
    # @param subject The subject of the mail. Must be a valid string.
    # @param message The email message that is to be sent in the text.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from A valid address that will send the email.
    # @option opts [String] :cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @option opts [String] :bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
    # @option opts [String] :attachment A file that is attached to the email. Must be less than 7 MB in size.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def email_sendemails_with_http_info(to, type, subject, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_sendemails ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling EmailApi.email_sendemails"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling EmailApi.email_sendemails"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['text', 'html'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of text, html"
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling EmailApi.email_sendemails"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling EmailApi.email_sendemails"
      end
      # resource path
      local_var_path = "/email/sendemails.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["To"] = to
      form_params["Type"] = type
      form_params["Subject"] = subject
      form_params["Message"] = message
      form_params["From"] = opts[:'from'] if !opts[:'from'].nil?
      form_params["Cc"] = opts[:'cc'] if !opts[:'cc'].nil?
      form_params["Bcc"] = opts[:'bcc'] if !opts[:'bcc'].nil?
      form_params["Attachment"] = opts[:'attachment'] if !opts[:'attachment'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_sendemails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
