=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class PostCardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Postcard
    # Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
    # @param to The AddressId or an object structured when creating an address by addresses/Create.
    # @param from The AddressId or an object structured when creating an address by addresses/Create.
    # @param attachbyid Set an existing postcard by attaching its PostcardId.
    # @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
    # @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
    # @param message The message for the back of the postcard with a maximum of 350 characters.
    # @param setting Code for the dimensions of the media to be printed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description for the postcard.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [String]
    def postcard_createpostcard(to, from, attachbyid, front, back, message, setting, opts = {})
      data, _status_code, _headers = postcard_createpostcard_with_http_info(to, from, attachbyid, front, back, message, setting, opts)
      return data
    end

    # Create Postcard
    # Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
    # @param to The AddressId or an object structured when creating an address by addresses/Create.
    # @param from The AddressId or an object structured when creating an address by addresses/Create.
    # @param attachbyid Set an existing postcard by attaching its PostcardId.
    # @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
    # @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
    # @param message The message for the back of the postcard with a maximum of 350 characters.
    # @param setting Code for the dimensions of the media to be printed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description A description for the postcard.
    # @option opts [String] :htmldata A string value that contains HTML markup.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def postcard_createpostcard_with_http_info(to, from, attachbyid, front, back, message, setting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PostCardApi.postcard_createpostcard ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'attachbyid' is set
      if @api_client.config.client_side_validation && attachbyid.nil?
        fail ArgumentError, "Missing the required parameter 'attachbyid' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'front' is set
      if @api_client.config.client_side_validation && front.nil?
        fail ArgumentError, "Missing the required parameter 'front' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'back' is set
      if @api_client.config.client_side_validation && back.nil?
        fail ArgumentError, "Missing the required parameter 'back' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling PostCardApi.postcard_createpostcard"
      end
      # verify the required parameter 'setting' is set
      if @api_client.config.client_side_validation && setting.nil?
        fail ArgumentError, "Missing the required parameter 'setting' when calling PostCardApi.postcard_createpostcard"
      end
      # resource path
      local_var_path = "/Postcard/createpostcard.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["to"] = to
      form_params["from"] = from
      form_params["attachbyid"] = attachbyid
      form_params["front"] = front
      form_params["back"] = back
      form_params["message"] = message
      form_params["setting"] = setting
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["htmldata"] = opts[:'htmldata'] if !opts[:'htmldata'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostCardApi#postcard_createpostcard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Postcard
    # Remove a postcard object.
    # @param postcardid The unique identifier of a postcard object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def postcard_deletepostcard(postcardid, opts = {})
      data, _status_code, _headers = postcard_deletepostcard_with_http_info(postcardid, opts)
      return data
    end

    # Delete Postcard
    # Remove a postcard object.
    # @param postcardid The unique identifier of a postcard object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def postcard_deletepostcard_with_http_info(postcardid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PostCardApi.postcard_deletepostcard ..."
      end
      # verify the required parameter 'postcardid' is set
      if @api_client.config.client_side_validation && postcardid.nil?
        fail ArgumentError, "Missing the required parameter 'postcardid' when calling PostCardApi.postcard_deletepostcard"
      end
      # resource path
      local_var_path = "/Postcard/deletepostcard.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["postcardid"] = postcardid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostCardApi#postcard_deletepostcard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Postcards
    # Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize The count of objects to return per page. (default to 10)
    # @option opts [String] :postcardid The unique identifier for a postcard object.
    # @option opts [String] :date_created The date the postcard was created.
    # @return [String]
    def postcard_listpostcard(opts = {})
      data, _status_code, _headers = postcard_listpostcard_with_http_info(opts)
      return data
    end

    # List Postcards
    # Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize The count of objects to return per page.
    # @option opts [String] :postcardid The unique identifier for a postcard object.
    # @option opts [String] :date_created The date the postcard was created.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def postcard_listpostcard_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PostCardApi.postcard_listpostcard ..."
      end
      # resource path
      local_var_path = "/Postcard/listpostcard.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["postcardid"] = opts[:'postcardid'] if !opts[:'postcardid'].nil?
      form_params["dateCreated"] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostCardApi#postcard_listpostcard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Postcard
    # Retrieve a postcard object by its PostcardId.
    # @param postcardid The unique identifier for a postcard object.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def postcard_viewpostcard(postcardid, opts = {})
      data, _status_code, _headers = postcard_viewpostcard_with_http_info(postcardid, opts)
      return data
    end

    # View Postcard
    # Retrieve a postcard object by its PostcardId.
    # @param postcardid The unique identifier for a postcard object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def postcard_viewpostcard_with_http_info(postcardid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PostCardApi.postcard_viewpostcard ..."
      end
      # verify the required parameter 'postcardid' is set
      if @api_client.config.client_side_validation && postcardid.nil?
        fail ArgumentError, "Missing the required parameter 'postcardid' when calling PostCardApi.postcard_viewpostcard"
      end
      # resource path
      local_var_path = "/Postcard/viewpostcard.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["postcardid"] = postcardid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostCardApi#postcard_viewpostcard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
