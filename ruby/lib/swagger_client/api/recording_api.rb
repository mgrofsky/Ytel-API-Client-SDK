=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class RecordingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete Recording
    # Remove a recording from your Ytel account.
    # @param recordingsid The unique identifier for a recording.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def recording_deleterecording(recordingsid, opts = {})
      data, _status_code, _headers = recording_deleterecording_with_http_info(recordingsid, opts)
      return data
    end

    # Delete Recording
    # Remove a recording from your Ytel account.
    # @param recordingsid The unique identifier for a recording.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def recording_deleterecording_with_http_info(recordingsid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecordingApi.recording_deleterecording ..."
      end
      # verify the required parameter 'recordingsid' is set
      if @api_client.config.client_side_validation && recordingsid.nil?
        fail ArgumentError, "Missing the required parameter 'recordingsid' when calling RecordingApi.recording_deleterecording"
      end
      # resource path
      local_var_path = "/recording/deleterecording.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["recordingsid"] = recordingsid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingApi#recording_deleterecording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Recordings
    # Retrieve a list of recording objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :pagesize The count of objects to return per page. (default to 10)
    # @option opts [String] :datecreated Filter results by creation date
    # @option opts [String] :callsid The unique identifier for a call.
    # @return [String]
    def recording_listrecording(opts = {})
      data, _status_code, _headers = recording_listrecording_with_http_info(opts)
      return data
    end

    # List Recordings
    # Retrieve a list of recording objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :pagesize The count of objects to return per page.
    # @option opts [String] :datecreated Filter results by creation date
    # @option opts [String] :callsid The unique identifier for a call.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def recording_listrecording_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecordingApi.recording_listrecording ..."
      end
      # resource path
      local_var_path = "/recording/listrecording.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["pagesize"] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      form_params["Datecreated"] = opts[:'datecreated'] if !opts[:'datecreated'].nil?
      form_params["callsid"] = opts[:'callsid'] if !opts[:'callsid'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingApi#recording_listrecording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Recording
    # Retrieve the recording of a call by its RecordingSid. This resource will return information regarding the call such as start time, end time, duration, and so forth.
    # @param recordingsid The unique identifier for the recording.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def recording_viewrecording(recordingsid, opts = {})
      data, _status_code, _headers = recording_viewrecording_with_http_info(recordingsid, opts)
      return data
    end

    # View Recording
    # Retrieve the recording of a call by its RecordingSid. This resource will return information regarding the call such as start time, end time, duration, and so forth.
    # @param recordingsid The unique identifier for the recording.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def recording_viewrecording_with_http_info(recordingsid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecordingApi.recording_viewrecording ..."
      end
      # verify the required parameter 'recordingsid' is set
      if @api_client.config.client_side_validation && recordingsid.nil?
        fail ArgumentError, "Missing the required parameter 'recordingsid' when calling RecordingApi.recording_viewrecording"
      end
      # resource path
      local_var_path = "/recording/viewrecording.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["recordingsid"] = recordingsid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingApi#recording_viewrecording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
