=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class CallApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Group Call
    # Group Call
    # @param from This number to display on Caller ID as calling
    # @param to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
    # @param url URL requested once the call connects
    # @param group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
    # @param group_confirm_file Specify the audio file you want to play when the called party picks up the call
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects.
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
    # @option opts [String] :fall_back_url URL requested if the initial Url parameter fails or encounters an error
    # @option opts [String] :fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
    # @option opts [String] :heart_beat_method Specifies the HTTP method used to request HeartbeatUrl.
    # @option opts [Integer] :timeout Time (in seconds) we should wait while the call is ringing before canceling the call
    # @option opts [String] :play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
    # @option opts [String] :hide_caller_id Specifies if the caller id will be hidden
    # @option opts [BOOLEAN] :record Specifies if the call should be recorded
    # @option opts [String] :record_call_back_url Recording parameters will be sent here upon completion
    # @option opts [String] :record_call_back_method Method used to request the RecordCallback URL.
    # @option opts [BOOLEAN] :transcribe Specifies if the call recording should be transcribed
    # @option opts [String] :transcribe_call_back_url Transcription parameters will be sent here upon completion
    # @return [String]
    def calls_groupcall(from, to, url, group_confirm_key, group_confirm_file, opts = {})
      data, _status_code, _headers = calls_groupcall_with_http_info(from, to, url, group_confirm_key, group_confirm_file, opts)
      return data
    end

    # Group Call
    # Group Call
    # @param from This number to display on Caller ID as calling
    # @param to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
    # @param url URL requested once the call connects
    # @param group_confirm_key Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
    # @param group_confirm_file Specify the audio file you want to play when the called party picks up the call
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects.
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
    # @option opts [String] :fall_back_url URL requested if the initial Url parameter fails or encounters an error
    # @option opts [String] :fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
    # @option opts [String] :heart_beat_method Specifies the HTTP method used to request HeartbeatUrl.
    # @option opts [Integer] :timeout Time (in seconds) we should wait while the call is ringing before canceling the call
    # @option opts [String] :play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
    # @option opts [String] :hide_caller_id Specifies if the caller id will be hidden
    # @option opts [BOOLEAN] :record Specifies if the call should be recorded
    # @option opts [String] :record_call_back_url Recording parameters will be sent here upon completion
    # @option opts [String] :record_call_back_method Method used to request the RecordCallback URL.
    # @option opts [BOOLEAN] :transcribe Specifies if the call recording should be transcribed
    # @option opts [String] :transcribe_call_back_url Transcription parameters will be sent here upon completion
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_groupcall_with_http_info(from, to, url, group_confirm_key, group_confirm_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_groupcall ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling CallApi.calls_groupcall"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling CallApi.calls_groupcall"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling CallApi.calls_groupcall"
      end
      # verify the required parameter 'group_confirm_key' is set
      if @api_client.config.client_side_validation && group_confirm_key.nil?
        fail ArgumentError, "Missing the required parameter 'group_confirm_key' when calling CallApi.calls_groupcall"
      end
      # verify the required parameter 'group_confirm_file' is set
      if @api_client.config.client_side_validation && group_confirm_file.nil?
        fail ArgumentError, "Missing the required parameter 'group_confirm_file' when calling CallApi.calls_groupcall"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['mp3', 'wav'].include?(group_confirm_file)
        fail ArgumentError, "invalid value for 'group_confirm_file', must be one of mp3, wav"
      end
      # resource path
      local_var_path = "/calls/groupcall.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["From"] = from
      form_params["To"] = to
      form_params["Url"] = url
      form_params["GroupConfirmKey"] = group_confirm_key
      form_params["GroupConfirmFile"] = group_confirm_file
      form_params["Method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["StatusCallBackUrl"] = opts[:'status_call_back_url'] if !opts[:'status_call_back_url'].nil?
      form_params["StatusCallBackMethod"] = opts[:'status_call_back_method'] if !opts[:'status_call_back_method'].nil?
      form_params["FallBackUrl"] = opts[:'fall_back_url'] if !opts[:'fall_back_url'].nil?
      form_params["FallBackMethod"] = opts[:'fall_back_method'] if !opts[:'fall_back_method'].nil?
      form_params["HeartBeatUrl"] = opts[:'heart_beat_url'] if !opts[:'heart_beat_url'].nil?
      form_params["HeartBeatMethod"] = opts[:'heart_beat_method'] if !opts[:'heart_beat_method'].nil?
      form_params["Timeout"] = opts[:'timeout'] if !opts[:'timeout'].nil?
      form_params["PlayDtmf"] = opts[:'play_dtmf'] if !opts[:'play_dtmf'].nil?
      form_params["HideCallerId"] = opts[:'hide_caller_id'] if !opts[:'hide_caller_id'].nil?
      form_params["Record"] = opts[:'record'] if !opts[:'record'].nil?
      form_params["RecordCallBackUrl"] = opts[:'record_call_back_url'] if !opts[:'record_call_back_url'].nil?
      form_params["RecordCallBackMethod"] = opts[:'record_call_back_method'] if !opts[:'record_call_back_method'].nil?
      form_params["Transcribe"] = opts[:'transcribe'] if !opts[:'transcribe'].nil?
      form_params["TranscribeCallBackUrl"] = opts[:'transcribe_call_back_url'] if !opts[:'transcribe_call_back_url'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_groupcall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Interrupt Call
    # Interrupt the Call by Call Sid
    # @param call_sid The unique identifier for voice call that is in progress.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url URL the in-progress call will be redirected to
    # @option opts [String] :method The method used to request the above Url parameter
    # @option opts [String] :status Status to set the in-progress call to
    # @return [String]
    def calls_interruptcalls(call_sid, opts = {})
      data, _status_code, _headers = calls_interruptcalls_with_http_info(call_sid, opts)
      return data
    end

    # Interrupt Call
    # Interrupt the Call by Call Sid
    # @param call_sid The unique identifier for voice call that is in progress.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url URL the in-progress call will be redirected to
    # @option opts [String] :method The method used to request the above Url parameter
    # @option opts [String] :status Status to set the in-progress call to
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_interruptcalls_with_http_info(call_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_interruptcalls ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_interruptcalls"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['canceled', 'completed'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of canceled, completed'
      end
      # resource path
      local_var_path = "/calls/interruptcalls.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["CallSid"] = call_sid
      form_params["Url"] = opts[:'url'] if !opts[:'url'].nil?
      form_params["Method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["Status"] = opts[:'status'] if !opts[:'status'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_interruptcalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Calls
    # A list of calls associated with your Ytel account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :page_size Number of individual resources listed in the response per page (default to 10)
    # @option opts [String] :to Filter calls that were sent to this 10-digit number (E.164 format).
    # @option opts [String] :from Filter calls that were sent from this 10-digit number (E.164 format).
    # @option opts [String] :date_created Return calls that are from a specified date.
    # @return [String]
    def calls_listcalls(opts = {})
      data, _status_code, _headers = calls_listcalls_with_http_info(opts)
      return data
    end

    # List Calls
    # A list of calls associated with your Ytel account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :page_size Number of individual resources listed in the response per page
    # @option opts [String] :to Filter calls that were sent to this 10-digit number (E.164 format).
    # @option opts [String] :from Filter calls that were sent from this 10-digit number (E.164 format).
    # @option opts [String] :date_created Return calls that are from a specified date.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_listcalls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_listcalls ..."
      end
      # resource path
      local_var_path = "/calls/listcalls.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["PageSize"] = opts[:'page_size'] if !opts[:'page_size'].nil?
      form_params["To"] = opts[:'to'] if !opts[:'to'].nil?
      form_params["From"] = opts[:'from'] if !opts[:'from'].nil?
      form_params["DateCreated"] = opts[:'date_created'] if !opts[:'date_created'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_listcalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make Call
    # You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
    # @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
    # @param to To number
    # @param url URL requested once the call connects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects.
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
    # @option opts [String] :fall_back_url URL requested if the initial Url parameter fails or encounters an error
    # @option opts [String] :fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim
    # @option opts [String] :heart_beat_method Specifies the HTTP method used to request HeartbeatUrl.
    # @option opts [Integer] :timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call
    # @option opts [String] :play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
    # @option opts [BOOLEAN] :hide_caller_id Specifies if the caller id will be hidden
    # @option opts [BOOLEAN] :record Specifies if the call should be recorded
    # @option opts [String] :record_call_back_url Recording parameters will be sent here upon completion
    # @option opts [String] :record_call_back_method Method used to request the RecordCallback URL.
    # @option opts [BOOLEAN] :transcribe Specifies if the call recording should be transcribed
    # @option opts [String] :transcribe_call_back_url Transcription parameters will be sent here upon completion
    # @option opts [String] :if_machine How Ytel should handle the receiving numbers voicemail machine
    # @option opts [String] :if_machine_url URL requested when IfMachine&#x3D;continue
    # @option opts [String] :if_machine_method Method used to request the IfMachineUrl.
    # @option opts [BOOLEAN] :feedback Specify if survey should be enable or not
    # @option opts [String] :survey_id The unique identifier for the survey.
    # @return [String]
    def calls_makecall(from, to, url, opts = {})
      data, _status_code, _headers = calls_makecall_with_http_info(from, to, url, opts)
      return data
    end

    # Make Call
    # You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
    # @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
    # @param to To number
    # @param url URL requested once the call connects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects.
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :status_call_back_method Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
    # @option opts [String] :fall_back_url URL requested if the initial Url parameter fails or encounters an error
    # @option opts [String] :fall_back_method Specifies the HTTP method used to request the required FallbackUrl once call connects.
    # @option opts [String] :heart_beat_url URL that can be requested every 60 seconds during the call to notify of elapsed tim
    # @option opts [String] :heart_beat_method Specifies the HTTP method used to request HeartbeatUrl.
    # @option opts [Integer] :timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call
    # @option opts [String] :play_dtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
    # @option opts [BOOLEAN] :hide_caller_id Specifies if the caller id will be hidden
    # @option opts [BOOLEAN] :record Specifies if the call should be recorded
    # @option opts [String] :record_call_back_url Recording parameters will be sent here upon completion
    # @option opts [String] :record_call_back_method Method used to request the RecordCallback URL.
    # @option opts [BOOLEAN] :transcribe Specifies if the call recording should be transcribed
    # @option opts [String] :transcribe_call_back_url Transcription parameters will be sent here upon completion
    # @option opts [String] :if_machine How Ytel should handle the receiving numbers voicemail machine
    # @option opts [String] :if_machine_url URL requested when IfMachine&#x3D;continue
    # @option opts [String] :if_machine_method Method used to request the IfMachineUrl.
    # @option opts [BOOLEAN] :feedback Specify if survey should be enable or not
    # @option opts [String] :survey_id The unique identifier for the survey.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_makecall_with_http_info(from, to, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_makecall ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling CallApi.calls_makecall"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling CallApi.calls_makecall"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling CallApi.calls_makecall"
      end
      if @api_client.config.client_side_validation && opts[:'if_machine'] && !['continue', 'hangup'].include?(opts[:'if_machine'])
        fail ArgumentError, 'invalid value for "if_machine", must be one of continue, hangup'
      end
      # resource path
      local_var_path = "/calls/makecall.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["From"] = from
      form_params["To"] = to
      form_params["Url"] = url
      form_params["Method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["StatusCallBackUrl"] = opts[:'status_call_back_url'] if !opts[:'status_call_back_url'].nil?
      form_params["StatusCallBackMethod"] = opts[:'status_call_back_method'] if !opts[:'status_call_back_method'].nil?
      form_params["FallBackUrl"] = opts[:'fall_back_url'] if !opts[:'fall_back_url'].nil?
      form_params["FallBackMethod"] = opts[:'fall_back_method'] if !opts[:'fall_back_method'].nil?
      form_params["HeartBeatUrl"] = opts[:'heart_beat_url'] if !opts[:'heart_beat_url'].nil?
      form_params["HeartBeatMethod"] = opts[:'heart_beat_method'] if !opts[:'heart_beat_method'].nil?
      form_params["Timeout"] = opts[:'timeout'] if !opts[:'timeout'].nil?
      form_params["PlayDtmf"] = opts[:'play_dtmf'] if !opts[:'play_dtmf'].nil?
      form_params["HideCallerId"] = opts[:'hide_caller_id'] if !opts[:'hide_caller_id'].nil?
      form_params["Record"] = opts[:'record'] if !opts[:'record'].nil?
      form_params["RecordCallBackUrl"] = opts[:'record_call_back_url'] if !opts[:'record_call_back_url'].nil?
      form_params["RecordCallBackMethod"] = opts[:'record_call_back_method'] if !opts[:'record_call_back_method'].nil?
      form_params["Transcribe"] = opts[:'transcribe'] if !opts[:'transcribe'].nil?
      form_params["TranscribeCallBackUrl"] = opts[:'transcribe_call_back_url'] if !opts[:'transcribe_call_back_url'].nil?
      form_params["IfMachine"] = opts[:'if_machine'] if !opts[:'if_machine'].nil?
      form_params["IfMachineUrl"] = opts[:'if_machine_url'] if !opts[:'if_machine_url'].nil?
      form_params["IfMachineMethod"] = opts[:'if_machine_method'] if !opts[:'if_machine_method'].nil?
      form_params["Feedback"] = opts[:'feedback'] if !opts[:'feedback'].nil?
      form_params["SurveyId"] = opts[:'survey_id'] if !opts[:'survey_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_makecall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send RVM
    # Initiate an outbound Ringless Voicemail through Ytel.
    # @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
    # @param rvm_caller_id A required secondary Caller ID for RVM to work.
    # @param to A valid number (E.164 format) that will receive the phone call.
    # @param voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects. (default to GET)
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
    # @return [String]
    def calls_makervm(from, rvm_caller_id, to, voice_mail_url, opts = {})
      data, _status_code, _headers = calls_makervm_with_http_info(from, rvm_caller_id, to, voice_mail_url, opts)
      return data
    end

    # Send RVM
    # Initiate an outbound Ringless Voicemail through Ytel.
    # @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
    # @param rvm_caller_id A required secondary Caller ID for RVM to work.
    # @param to A valid number (E.164 format) that will receive the phone call.
    # @param voice_mail_url The URL requested once the RVM connects. A set of default parameters will be sent here.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once call connects.
    # @option opts [String] :status_call_back_url URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
    # @option opts [String] :stats_call_back_method Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_makervm_with_http_info(from, rvm_caller_id, to, voice_mail_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_makervm ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling CallApi.calls_makervm"
      end
      # verify the required parameter 'rvm_caller_id' is set
      if @api_client.config.client_side_validation && rvm_caller_id.nil?
        fail ArgumentError, "Missing the required parameter 'rvm_caller_id' when calling CallApi.calls_makervm"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling CallApi.calls_makervm"
      end
      # verify the required parameter 'voice_mail_url' is set
      if @api_client.config.client_side_validation && voice_mail_url.nil?
        fail ArgumentError, "Missing the required parameter 'voice_mail_url' when calling CallApi.calls_makervm"
      end
      # resource path
      local_var_path = "/calls/makervm.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["From"] = from
      form_params["RVMCallerId"] = rvm_caller_id
      form_params["To"] = to
      form_params["VoiceMailURL"] = voice_mail_url
      form_params["Method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["StatusCallBackUrl"] = opts[:'status_call_back_url'] if !opts[:'status_call_back_url'].nil?
      form_params["StatsCallBackMethod"] = opts[:'stats_call_back_method'] if !opts[:'stats_call_back_method'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_makervm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Play Audio
    # Play Audio from a url
    # @param call_sid The unique identifier of each call resource
    # @param audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
    # @param say_text Valid alphanumeric string that should be played to the In-progress call.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :length Time limit in seconds for audio play back
    # @option opts [String] :direction The leg of the call audio will be played to
    # @option opts [BOOLEAN] :mix If false, all other audio will be muted
    # @return [String]
    def calls_playaudios(call_sid, audio_url, say_text, opts = {})
      data, _status_code, _headers = calls_playaudios_with_http_info(call_sid, audio_url, say_text, opts)
      return data
    end

    # Play Audio
    # Play Audio from a url
    # @param call_sid The unique identifier of each call resource
    # @param audio_url URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
    # @param say_text Valid alphanumeric string that should be played to the In-progress call.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :length Time limit in seconds for audio play back
    # @option opts [String] :direction The leg of the call audio will be played to
    # @option opts [BOOLEAN] :mix If false, all other audio will be muted
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_playaudios_with_http_info(call_sid, audio_url, say_text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_playaudios ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_playaudios"
      end
      # verify the required parameter 'audio_url' is set
      if @api_client.config.client_side_validation && audio_url.nil?
        fail ArgumentError, "Missing the required parameter 'audio_url' when calling CallApi.calls_playaudios"
      end
      # verify the required parameter 'say_text' is set
      if @api_client.config.client_side_validation && say_text.nil?
        fail ArgumentError, "Missing the required parameter 'say_text' when calling CallApi.calls_playaudios"
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['in', 'out', 'both'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of in, out, both'
      end
      # resource path
      local_var_path = "/calls/playaudios.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["CallSid"] = call_sid
      form_params["AudioUrl"] = audio_url
      form_params["SayText"] = say_text
      form_params["Length"] = opts[:'length'] if !opts[:'length'].nil?
      form_params["Direction"] = opts[:'direction'] if !opts[:'direction'].nil?
      form_params["Mix"] = opts[:'mix'] if !opts[:'mix'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_playaudios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Record Call
    # Start or stop recording of an in-progress voice call.
    # @param call_sid The unique identifier of each call resource
    # @param record Set true to initiate recording or false to terminate recording
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The leg of the call to record
    # @option opts [Integer] :time_limit Time in seconds the recording duration should not exceed
    # @option opts [String] :call_back_url URL consulted after the recording completes
    # @option opts [String] :fileformat Format of the recording file. Can be .mp3 or .wav
    # @return [String]
    def calls_recordcalls(call_sid, record, opts = {})
      data, _status_code, _headers = calls_recordcalls_with_http_info(call_sid, record, opts)
      return data
    end

    # Record Call
    # Start or stop recording of an in-progress voice call.
    # @param call_sid The unique identifier of each call resource
    # @param record Set true to initiate recording or false to terminate recording
    # @param [Hash] opts the optional parameters
    # @option opts [String] :direction The leg of the call to record
    # @option opts [Integer] :time_limit Time in seconds the recording duration should not exceed
    # @option opts [String] :call_back_url URL consulted after the recording completes
    # @option opts [String] :fileformat Format of the recording file. Can be .mp3 or .wav
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_recordcalls_with_http_info(call_sid, record, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_recordcalls ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_recordcalls"
      end
      # verify the required parameter 'record' is set
      if @api_client.config.client_side_validation && record.nil?
        fail ArgumentError, "Missing the required parameter 'record' when calling CallApi.calls_recordcalls"
      end
      if @api_client.config.client_side_validation && opts[:'direction'] && !['in', 'out', 'both'].include?(opts[:'direction'])
        fail ArgumentError, 'invalid value for "direction", must be one of in, out, both'
      end
      if @api_client.config.client_side_validation && opts[:'fileformat'] && !['mp3', 'wav'].include?(opts[:'fileformat'])
        fail ArgumentError, 'invalid value for "fileformat", must be one of mp3, wav'
      end
      # resource path
      local_var_path = "/calls/recordcalls.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["CallSid"] = call_sid
      form_params["Record"] = record
      form_params["Direction"] = opts[:'direction'] if !opts[:'direction'].nil?
      form_params["TimeLimit"] = opts[:'time_limit'] if !opts[:'time_limit'].nil?
      form_params["CallBackUrl"] = opts[:'call_back_url'] if !opts[:'call_back_url'].nil?
      form_params["Fileformat"] = opts[:'fileformat'] if !opts[:'fileformat'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_recordcalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Play DTMF
    # Play Dtmf and send the Digit
    # @param call_sid The unique identifier of each call resource
    # @param play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w
    # @param [Hash] opts the optional parameters
    # @option opts [String] :play_dtmf_direction The leg of the call DTMF digits should be sent to
    # @return [String]
    def calls_senddigits(call_sid, play_dtmf, opts = {})
      data, _status_code, _headers = calls_senddigits_with_http_info(call_sid, play_dtmf, opts)
      return data
    end

    # Play DTMF
    # Play Dtmf and send the Digit
    # @param call_sid The unique identifier of each call resource
    # @param play_dtmf DTMF digits to play to the call. 0-9, #, *, W, or w
    # @param [Hash] opts the optional parameters
    # @option opts [String] :play_dtmf_direction The leg of the call DTMF digits should be sent to
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_senddigits_with_http_info(call_sid, play_dtmf, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_senddigits ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_senddigits"
      end
      # verify the required parameter 'play_dtmf' is set
      if @api_client.config.client_side_validation && play_dtmf.nil?
        fail ArgumentError, "Missing the required parameter 'play_dtmf' when calling CallApi.calls_senddigits"
      end
      if @api_client.config.client_side_validation && opts[:'play_dtmf_direction'] && !['in', 'out', 'both'].include?(opts[:'play_dtmf_direction'])
        fail ArgumentError, 'invalid value for "play_dtmf_direction", must be one of in, out, both'
      end
      # resource path
      local_var_path = "/calls/senddigits.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["CallSid"] = call_sid
      form_params["PlayDtmf"] = play_dtmf
      form_params["PlayDtmfDirection"] = opts[:'play_dtmf_direction'] if !opts[:'play_dtmf_direction'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_senddigits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Call
    # Retrieve a single voice call’s information by its CallSid.
    # @param call_sid The unique identifier for the voice call.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def calls_viewcalldetail(call_sid, opts = {})
      data, _status_code, _headers = calls_viewcalldetail_with_http_info(call_sid, opts)
      return data
    end

    # View Call
    # Retrieve a single voice call’s information by its CallSid.
    # @param call_sid The unique identifier for the voice call.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_viewcalldetail_with_http_info(call_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_viewcalldetail ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_viewcalldetail"
      end
      # resource path
      local_var_path = "/calls/viewcalldetail.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["callSid"] = call_sid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_viewcalldetail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View Call
    # Retrieve a single voice call’s information by its CallSid.
    # @param callsid The unique identifier for the voice call.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def calls_viewcalls(callsid, opts = {})
      data, _status_code, _headers = calls_viewcalls_with_http_info(callsid, opts)
      return data
    end

    # View Call
    # Retrieve a single voice call’s information by its CallSid.
    # @param callsid The unique identifier for the voice call.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_viewcalls_with_http_info(callsid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_viewcalls ..."
      end
      # verify the required parameter 'callsid' is set
      if @api_client.config.client_side_validation && callsid.nil?
        fail ArgumentError, "Missing the required parameter 'callsid' when calling CallApi.calls_viewcalls"
      end
      # resource path
      local_var_path = "/calls/viewcalls.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["callsid"] = callsid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_viewcalls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voice Effect
    # Add audio voice effects to the an in-progress voice call.
    # @param call_sid The unique identifier for the in-progress voice call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
    # @option opts [Float] :pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14
    # @option opts [Float] :pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1
    # @option opts [Float] :pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
    # @option opts [Float] :rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0
    # @option opts [Float] :tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
    # @return [String]
    def calls_voiceeffect(call_sid, opts = {})
      data, _status_code, _headers = calls_voiceeffect_with_http_info(call_sid, opts)
      return data
    end

    # Voice Effect
    # Add audio voice effects to the an in-progress voice call.
    # @param call_sid The unique identifier for the in-progress voice call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :audio_direction The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
    # @option opts [Float] :pitch_semi_tones Set the pitch in semitone (half-step) intervals. Value between -14 and 14
    # @option opts [Float] :pitch_octaves Set the pitch in octave intervals.. Value between -1 and 1
    # @option opts [Float] :pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
    # @option opts [Float] :rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0
    # @option opts [Float] :tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def calls_voiceeffect_with_http_info(call_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallApi.calls_voiceeffect ..."
      end
      # verify the required parameter 'call_sid' is set
      if @api_client.config.client_side_validation && call_sid.nil?
        fail ArgumentError, "Missing the required parameter 'call_sid' when calling CallApi.calls_voiceeffect"
      end
      if @api_client.config.client_side_validation && opts[:'audio_direction'] && !['in', 'out'].include?(opts[:'audio_direction'])
        fail ArgumentError, 'invalid value for "audio_direction", must be one of in, out'
      end
      # resource path
      local_var_path = "/calls/voiceeffect.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["CallSid"] = call_sid
      form_params["AudioDirection"] = opts[:'audio_direction'] if !opts[:'audio_direction'].nil?
      form_params["PitchSemiTones"] = opts[:'pitch_semi_tones'] if !opts[:'pitch_semi_tones'].nil?
      form_params["PitchOctaves"] = opts[:'pitch_octaves'] if !opts[:'pitch_octaves'].nil?
      form_params["Pitch"] = opts[:'pitch'] if !opts[:'pitch'].nil?
      form_params["Rate"] = opts[:'rate'] if !opts[:'rate'].nil?
      form_params["Tempo"] = opts[:'tempo'] if !opts[:'tempo'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallApi#calls_voiceeffect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
