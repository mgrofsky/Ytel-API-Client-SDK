=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require "uri"

module SwaggerClient
  class SMSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List Inbound SMS
    # Retrieve a list of Inbound SMS message objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :page_size The count of objects to return per page. (default to 10)
    # @option opts [String] :from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
    # @option opts [String] :to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
    # @option opts [String] :date_sent Filter sms message objects by this date.
    # @return [String]
    def sms_getinboundsms(opts = {})
      data, _status_code, _headers = sms_getinboundsms_with_http_info(opts)
      return data
    end

    # List Inbound SMS
    # Retrieve a list of Inbound SMS message objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :page_size The count of objects to return per page.
    # @option opts [String] :from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
    # @option opts [String] :to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
    # @option opts [String] :date_sent Filter sms message objects by this date.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sms_getinboundsms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SMSApi.sms_getinboundsms ..."
      end
      # resource path
      local_var_path = "/sms/getinboundsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["PageSize"] = opts[:'page_size'] if !opts[:'page_size'].nil?
      form_params["From"] = opts[:'from'] if !opts[:'from'].nil?
      form_params["To"] = opts[:'to'] if !opts[:'to'].nil?
      form_params["DateSent"] = opts[:'date_sent'] if !opts[:'date_sent'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#sms_getinboundsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SMS
    # Retrieve a list of Outbound SMS message objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (default to 1)
    # @option opts [Integer] :page_size Number of individual resources listed in the response per page (default to 10)
    # @option opts [String] :from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
    # @option opts [String] :to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
    # @option opts [String] :date_sent Only list SMS messages sent in the specified date range
    # @return [String]
    def sms_listsms(opts = {})
      data, _status_code, _headers = sms_listsms_with_http_info(opts)
      return data
    end

    # List SMS
    # Retrieve a list of Outbound SMS message objects.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
    # @option opts [Integer] :page_size Number of individual resources listed in the response per page
    # @option opts [String] :from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
    # @option opts [String] :to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
    # @option opts [String] :date_sent Only list SMS messages sent in the specified date range
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sms_listsms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SMSApi.sms_listsms ..."
      end
      # resource path
      local_var_path = "/sms/listsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["Page"] = opts[:'page'] if !opts[:'page'].nil?
      form_params["PageSize"] = opts[:'page_size'] if !opts[:'page_size'].nil?
      form_params["From"] = opts[:'from'] if !opts[:'from'].nil?
      form_params["To"] = opts[:'to'] if !opts[:'to'].nil?
      form_params["DateSent"] = opts[:'date_sent'] if !opts[:'date_sent'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#sms_listsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send SMS
    # Send an SMS from a Ytel number
    # @param from The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
    # @param to The 10-digit phone number (E.164 format) that will receive the message.
    # @param body The body message that is to be sent in the text.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once SMS sent.
    # @option opts [String] :message_status_callback URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.
    # @option opts [BOOLEAN] :smartsms Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (default to false)
    # @option opts [BOOLEAN] :delivery_status Delivery reports are a method to tell your system if the message has arrived on the destination phone. (default to false)
    # @return [String]
    def sms_sendsms(from, to, body, opts = {})
      data, _status_code, _headers = sms_sendsms_with_http_info(from, to, body, opts)
      return data
    end

    # Send SMS
    # Send an SMS from a Ytel number
    # @param from The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
    # @param to The 10-digit phone number (E.164 format) that will receive the message.
    # @param body The body message that is to be sent in the text.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :method Specifies the HTTP method used to request the required URL once SMS sent.
    # @option opts [String] :message_status_callback URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.
    # @option opts [BOOLEAN] :smartsms Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message.
    # @option opts [BOOLEAN] :delivery_status Delivery reports are a method to tell your system if the message has arrived on the destination phone.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sms_sendsms_with_http_info(from, to, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SMSApi.sms_sendsms ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling SMSApi.sms_sendsms"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling SMSApi.sms_sendsms"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SMSApi.sms_sendsms"
      end
      # resource path
      local_var_path = "/sms/sendsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["From"] = from
      form_params["To"] = to
      form_params["Body"] = body
      form_params["Method"] = opts[:'method'] if !opts[:'method'].nil?
      form_params["MessageStatusCallback"] = opts[:'message_status_callback'] if !opts[:'message_status_callback'].nil?
      form_params["Smartsms"] = opts[:'smartsms'] if !opts[:'smartsms'].nil?
      form_params["DeliveryStatus"] = opts[:'delivery_status'] if !opts[:'delivery_status'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#sms_sendsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View SMS
    # Retrieve a single SMS message object with details by its SmsSid.
    # @param message_sid The unique identifier for a sms message.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def sms_viewdetailsms(message_sid, opts = {})
      data, _status_code, _headers = sms_viewdetailsms_with_http_info(message_sid, opts)
      return data
    end

    # View SMS
    # Retrieve a single SMS message object with details by its SmsSid.
    # @param message_sid The unique identifier for a sms message.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sms_viewdetailsms_with_http_info(message_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SMSApi.sms_viewdetailsms ..."
      end
      # verify the required parameter 'message_sid' is set
      if @api_client.config.client_side_validation && message_sid.nil?
        fail ArgumentError, "Missing the required parameter 'message_sid' when calling SMSApi.sms_viewdetailsms"
      end
      # resource path
      local_var_path = "/sms/viewdetailsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["MessageSid"] = message_sid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#sms_viewdetailsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View SMS
    # Retrieve a single SMS message object by its SmsSid.
    # @param message_sid The unique identifier for a sms message.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def sms_viewsms(message_sid, opts = {})
      data, _status_code, _headers = sms_viewsms_with_http_info(message_sid, opts)
      return data
    end

    # View SMS
    # Retrieve a single SMS message object by its SmsSid.
    # @param message_sid The unique identifier for a sms message.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sms_viewsms_with_http_info(message_sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SMSApi.sms_viewsms ..."
      end
      # verify the required parameter 'message_sid' is set
      if @api_client.config.client_side_validation && message_sid.nil?
        fail ArgumentError, "Missing the required parameter 'message_sid' when calling SMSApi.sms_viewsms"
      end
      # resource path
      local_var_path = "/sms/viewsms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["MessageSid"] = message_sid

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SMSApi#sms_viewsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
