=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.11

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PostCardApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PostCardApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PostCardApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PostCardApi' do
    it 'should create an instance of PostCardApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PostCardApi)
    end
  end

  # unit tests for postcard_createpostcard
  # Create Postcard
  # Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
  # @param to The AddressId or an object structured when creating an address by addresses/Create.
  # @param from The AddressId or an object structured when creating an address by addresses/Create.
  # @param attachbyid Set an existing postcard by attaching its PostcardId.
  # @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
  # @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
  # @param message The message for the back of the postcard with a maximum of 350 characters.
  # @param setting Code for the dimensions of the media to be printed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description A description for the postcard.
  # @option opts [String] :htmldata A string value that contains HTML markup.
  # @return [String]
  describe 'postcard_createpostcard test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for postcard_deletepostcard
  # Delete Postcard
  # Remove a postcard object.
  # @param postcardid The unique identifier of a postcard object.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'postcard_deletepostcard test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for postcard_listpostcard
  # List Postcards
  # Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
  # @option opts [Integer] :pagesize The count of objects to return per page.
  # @option opts [String] :postcardid The unique identifier for a postcard object.
  # @option opts [String] :date_created The date the postcard was created.
  # @return [String]
  describe 'postcard_listpostcard test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for postcard_viewpostcard
  # View Postcard
  # Retrieve a postcard object by its PostcardId.
  # @param postcardid The unique identifier for a postcard object.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'postcard_viewpostcard test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
