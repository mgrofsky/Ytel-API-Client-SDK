=begin
#Ytel API V3

#Ytel API version 3

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.12-1

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::EmailApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'EmailApi' do
  before do
    # run before each test
    @instance = SwaggerClient::EmailApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EmailApi' do
    it 'should create an instance of EmailApi' do
      expect(@instance).to be_instance_of(SwaggerClient::EmailApi)
    end
  end

  # unit tests for email_addunsubscribesemail
  # Add Email Unsubscribe
  # Add an email to the unsubscribe list
  # @param email A valid email address that is to be added to the unsubscribe list
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_addunsubscribesemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_deleteblocksemail
  # Remove Blocked Address
  # Remove an email from blocked emails list.
  # @param email The email address to be remove from the blocked list.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_deleteblocksemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_deletebouncesemail
  # Remove Bounced Email
  # Remove an email address from the bounced list.
  # @param email The email address to be remove from the bounced email list.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_deletebouncesemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_deleteinvalidemail
  # Remove Invalid Email
  # Remove an email from the invalid email list.
  # @param email A valid email address that is to be remove from the invalid email list.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_deleteinvalidemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_deletespamemail
  # Remove Spam Address
  # Remove an email from the spam email list.
  # @param email A valid email address that is to be remove from the spam list.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_deletespamemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_deleteunsubscribedemail
  # Remove Unsubscribed Email
  # Remove an email address from the list of unsubscribed emails.
  # @param email A valid email address that is to be remove from the unsubscribe list.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'email_deleteunsubscribedemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_listblockemail
  # Blocked Emails
  # Retrieve a list of emails that have been blocked.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset The starting point of the list of blocked emails that should be returned.
  # @option opts [String] :limit The count of results that should be returned.
  # @return [String]
  describe 'email_listblockemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_listbounceemail
  # Bounced Emails
  # Retrieve a list of emails that have bounced.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset The starting point of the list of bounced emails that should be returned.
  # @option opts [String] :limit The count of results that should be returned.
  # @return [String]
  describe 'email_listbounceemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_listinvalidemail
  # Invalid Emails
  # Retrieve a list of invalid email addresses.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset The starting point of the list of invalid emails that should be returned.
  # @option opts [String] :limit The count of results that should be returned.
  # @return [String]
  describe 'email_listinvalidemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_listspamemail
  # Spam Emails
  # Retrieve a list of emails that are on the spam list.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset The starting point of the list of spam emails that should be returned.
  # @option opts [String] :limit The count of results that should be returned.
  # @return [String]
  describe 'email_listspamemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_listunsubscribedemail
  # List Unsubscribed Emails
  # Retrieve a list of email addresses from the unsubscribe list.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :offset The starting point of the list of unsubscribed emails that should be returned.
  # @option opts [String] :limit The count of results that should be returned.
  # @return [String]
  describe 'email_listunsubscribedemail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_sendemails
  # Send Email
  # Create and submit an email message to one or more email addresses.
  # @param to A valid address that will receive the email. Multiple addresses can be separated by using commas.
  # @param type Specifies the type of email to be sent
  # @param subject The subject of the mail. Must be a valid string.
  # @param message The email message that is to be sent in the text.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from A valid address that will send the email.
  # @option opts [String] :cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
  # @option opts [String] :bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
  # @option opts [String] :attachment A file that is attached to the email. Must be less than 7 MB in size.
  # @return [String]
  describe 'email_sendemails test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
