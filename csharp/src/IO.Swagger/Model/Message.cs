/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Message
    /// </summary>
    [DataContract]
    public partial class Message :  IEquatable<Message>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Message() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="ApiVersion">ApiVersion (required).</param>
        /// <param name="MessageSid">MessageSid (required).</param>
        /// <param name="From">From (required).</param>
        /// <param name="To">To (required).</param>
        /// <param name="MessagePrice">MessagePrice (required).</param>
        /// <param name="Body">Body (required).</param>
        /// <param name="DateSent">DateSent (required).</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="TemplateId">TemplateId (required).</param>
        /// <param name="TemplateData">TemplateData (required).</param>
        public Message(string ApiVersion = default(string), string MessageSid = default(string), string From = default(string), string To = default(string), string MessagePrice = default(string), string Body = default(string), string DateSent = default(string), string Status = default(string), string TemplateId = default(string), TemplateData TemplateData = default(TemplateData))
        {
            // to ensure "ApiVersion" is required (not null)
            if (ApiVersion == null)
            {
                throw new InvalidDataException("ApiVersion is a required property for Message and cannot be null");
            }
            else
            {
                this.ApiVersion = ApiVersion;
            }
            // to ensure "MessageSid" is required (not null)
            if (MessageSid == null)
            {
                throw new InvalidDataException("MessageSid is a required property for Message and cannot be null");
            }
            else
            {
                this.MessageSid = MessageSid;
            }
            // to ensure "From" is required (not null)
            if (From == null)
            {
                throw new InvalidDataException("From is a required property for Message and cannot be null");
            }
            else
            {
                this.From = From;
            }
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for Message and cannot be null");
            }
            else
            {
                this.To = To;
            }
            // to ensure "MessagePrice" is required (not null)
            if (MessagePrice == null)
            {
                throw new InvalidDataException("MessagePrice is a required property for Message and cannot be null");
            }
            else
            {
                this.MessagePrice = MessagePrice;
            }
            // to ensure "Body" is required (not null)
            if (Body == null)
            {
                throw new InvalidDataException("Body is a required property for Message and cannot be null");
            }
            else
            {
                this.Body = Body;
            }
            // to ensure "DateSent" is required (not null)
            if (DateSent == null)
            {
                throw new InvalidDataException("DateSent is a required property for Message and cannot be null");
            }
            else
            {
                this.DateSent = DateSent;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for Message and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "TemplateId" is required (not null)
            if (TemplateId == null)
            {
                throw new InvalidDataException("TemplateId is a required property for Message and cannot be null");
            }
            else
            {
                this.TemplateId = TemplateId;
            }
            // to ensure "TemplateData" is required (not null)
            if (TemplateData == null)
            {
                throw new InvalidDataException("TemplateData is a required property for Message and cannot be null");
            }
            else
            {
                this.TemplateData = TemplateData;
            }
        }
        
        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        [DataMember(Name="ApiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets MessageSid
        /// </summary>
        [DataMember(Name="MessageSid", EmitDefaultValue=false)]
        public string MessageSid { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets MessagePrice
        /// </summary>
        [DataMember(Name="MessagePrice", EmitDefaultValue=false)]
        public string MessagePrice { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets DateSent
        /// </summary>
        [DataMember(Name="DateSent", EmitDefaultValue=false)]
        public string DateSent { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name="TemplateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateData
        /// </summary>
        [DataMember(Name="TemplateData", EmitDefaultValue=false)]
        public TemplateData TemplateData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  MessageSid: ").Append(MessageSid).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  MessagePrice: ").Append(MessagePrice).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  DateSent: ").Append(DateSent).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateData: ").Append(TemplateData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Message);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="input">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.MessageSid == input.MessageSid ||
                    (this.MessageSid != null &&
                    this.MessageSid.Equals(input.MessageSid))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.MessagePrice == input.MessagePrice ||
                    (this.MessagePrice != null &&
                    this.MessagePrice.Equals(input.MessagePrice))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.DateSent == input.DateSent ||
                    (this.DateSent != null &&
                    this.DateSent.Equals(input.DateSent))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateData == input.TemplateData ||
                    (this.TemplateData != null &&
                    this.TemplateData.Equals(input.TemplateData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.MessageSid != null)
                    hashCode = hashCode * 59 + this.MessageSid.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.MessagePrice != null)
                    hashCode = hashCode * 59 + this.MessagePrice.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.DateSent != null)
                    hashCode = hashCode * 59 + this.DateSent.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.TemplateData != null)
                    hashCode = hashCode * 59 + this.TemplateData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
