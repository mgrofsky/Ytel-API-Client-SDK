/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILetterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Letter
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>string</returns>
        string LetterCreate (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null);

        /// <summary>
        /// Create Letter
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LetterCreateWithHttpInfo (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null);
        /// <summary>
        /// Delete Letter
        /// </summary>
        /// <remarks>
        /// Remove a letter object by its LetterId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>string</returns>
        string LetterDelete (string lettersid);

        /// <summary>
        /// Delete Letter
        /// </summary>
        /// <remarks>
        /// Remove a letter object by its LetterId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LetterDeleteWithHttpInfo (string lettersid);
        /// <summary>
        /// List Letters
        /// </summary>
        /// <remarks>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>string</returns>
        string LetterListsletter (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null);

        /// <summary>
        /// List Letters
        /// </summary>
        /// <remarks>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LetterListsletterWithHttpInfo (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null);
        /// <summary>
        /// View Letter
        /// </summary>
        /// <remarks>
        /// Retrieve a letter object by its LetterSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>string</returns>
        string LetterViewletter (string lettersid);

        /// <summary>
        /// View Letter
        /// </summary>
        /// <remarks>
        /// Retrieve a letter object by its LetterSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LetterViewletterWithHttpInfo (string lettersid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Letter
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LetterCreateAsync (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null);

        /// <summary>
        /// Create Letter
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LetterCreateAsyncWithHttpInfo (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null);
        /// <summary>
        /// Delete Letter
        /// </summary>
        /// <remarks>
        /// Remove a letter object by its LetterId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LetterDeleteAsync (string lettersid);

        /// <summary>
        /// Delete Letter
        /// </summary>
        /// <remarks>
        /// Remove a letter object by its LetterId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LetterDeleteAsyncWithHttpInfo (string lettersid);
        /// <summary>
        /// List Letters
        /// </summary>
        /// <remarks>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LetterListsletterAsync (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null);

        /// <summary>
        /// List Letters
        /// </summary>
        /// <remarks>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LetterListsletterAsyncWithHttpInfo (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null);
        /// <summary>
        /// View Letter
        /// </summary>
        /// <remarks>
        /// Retrieve a letter object by its LetterSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LetterViewletterAsync (string lettersid);

        /// <summary>
        /// View Letter
        /// </summary>
        /// <remarks>
        /// Retrieve a letter object by its LetterSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LetterViewletterAsyncWithHttpInfo (string lettersid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LetterApi : ILetterApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LetterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LetterApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LetterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LetterApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Letter Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>string</returns>
        public string LetterCreate (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null)
        {
             ApiResponse<string> localVarResponse = LetterCreateWithHttpInfo(to, from, attachbyid, file, color, description, extraservice, doublesided, template, htmldata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Letter Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LetterCreateWithHttpInfo (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling LetterApi->LetterCreate");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling LetterApi->LetterCreate");
            // verify the required parameter 'attachbyid' is set
            if (attachbyid == null)
                throw new ApiException(400, "Missing required parameter 'attachbyid' when calling LetterApi->LetterCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling LetterApi->LetterCreate");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling LetterApi->LetterCreate");

            var localVarPath = "/letter/create.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (attachbyid != null) localVarFormParams.Add("attachbyid", Configuration.ApiClient.ParameterToString(attachbyid)); // form parameter
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (extraservice != null) localVarFormParams.Add("extraservice", Configuration.ApiClient.ParameterToString(extraservice)); // form parameter
            if (doublesided != null) localVarFormParams.Add("doublesided", Configuration.ApiClient.ParameterToString(doublesided)); // form parameter
            if (template != null) localVarFormParams.Add("template", Configuration.ApiClient.ParameterToString(template)); // form parameter
            if (htmldata != null) localVarFormParams.Add("htmldata", Configuration.ApiClient.ParameterToString(htmldata)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Letter Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LetterCreateAsync (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null)
        {
             ApiResponse<string> localVarResponse = await LetterCreateAsyncWithHttpInfo(to, from, attachbyid, file, color, description, extraservice, doublesided, template, htmldata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Letter Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Specify if letter should be printed in color.</param>
        /// <param name="description">A description for the letter. (optional)</param>
        /// <param name="extraservice">Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50. (optional)</param>
        /// <param name="doublesided">Specify if letter should be printed on both sides. (optional)</param>
        /// <param name="template">Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LetterCreateAsyncWithHttpInfo (string to, string from, string attachbyid, string file, string color, string description = null, string extraservice = null, string doublesided = null, string template = null, string htmldata = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling LetterApi->LetterCreate");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling LetterApi->LetterCreate");
            // verify the required parameter 'attachbyid' is set
            if (attachbyid == null)
                throw new ApiException(400, "Missing required parameter 'attachbyid' when calling LetterApi->LetterCreate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling LetterApi->LetterCreate");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling LetterApi->LetterCreate");

            var localVarPath = "/letter/create.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (attachbyid != null) localVarFormParams.Add("attachbyid", Configuration.ApiClient.ParameterToString(attachbyid)); // form parameter
            if (file != null) localVarFormParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // form parameter
            if (color != null) localVarFormParams.Add("color", Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (extraservice != null) localVarFormParams.Add("extraservice", Configuration.ApiClient.ParameterToString(extraservice)); // form parameter
            if (doublesided != null) localVarFormParams.Add("doublesided", Configuration.ApiClient.ParameterToString(doublesided)); // form parameter
            if (template != null) localVarFormParams.Add("template", Configuration.ApiClient.ParameterToString(template)); // form parameter
            if (htmldata != null) localVarFormParams.Add("htmldata", Configuration.ApiClient.ParameterToString(htmldata)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Letter Remove a letter object by its LetterId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>string</returns>
        public string LetterDelete (string lettersid)
        {
             ApiResponse<string> localVarResponse = LetterDeleteWithHttpInfo(lettersid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Letter Remove a letter object by its LetterId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LetterDeleteWithHttpInfo (string lettersid)
        {
            // verify the required parameter 'lettersid' is set
            if (lettersid == null)
                throw new ApiException(400, "Missing required parameter 'lettersid' when calling LetterApi->LetterDelete");

            var localVarPath = "/letter/delete.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Letter Remove a letter object by its LetterId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LetterDeleteAsync (string lettersid)
        {
             ApiResponse<string> localVarResponse = await LetterDeleteAsyncWithHttpInfo(lettersid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Letter Remove a letter object by its LetterId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LetterDeleteAsyncWithHttpInfo (string lettersid)
        {
            // verify the required parameter 'lettersid' is set
            if (lettersid == null)
                throw new ApiException(400, "Missing required parameter 'lettersid' when calling LetterApi->LetterDelete");

            var localVarPath = "/letter/delete.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Letters Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>string</returns>
        public string LetterListsletter (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = LetterListsletterWithHttpInfo(page, pagesize, lettersid, dateCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Letters Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LetterListsletterWithHttpInfo (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null)
        {

            var localVarPath = "/letter/listsletter.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterListsletter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Letters Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LetterListsletterAsync (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = await LetterListsletterAsyncWithHttpInfo(page, pagesize, lettersid, dateCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Letters Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="lettersid">The unique identifier for a letter object. (optional)</param>
        /// <param name="dateCreated">The date the letter was created. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LetterListsletterAsyncWithHttpInfo (int? page = null, int? pagesize = null, string lettersid = null, string dateCreated = null)
        {

            var localVarPath = "/letter/listsletter.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterListsletter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Letter Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>string</returns>
        public string LetterViewletter (string lettersid)
        {
             ApiResponse<string> localVarResponse = LetterViewletterWithHttpInfo(lettersid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Letter Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LetterViewletterWithHttpInfo (string lettersid)
        {
            // verify the required parameter 'lettersid' is set
            if (lettersid == null)
                throw new ApiException(400, "Missing required parameter 'lettersid' when calling LetterApi->LetterViewletter");

            var localVarPath = "/letter/viewletter.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterViewletter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Letter Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LetterViewletterAsync (string lettersid)
        {
             ApiResponse<string> localVarResponse = await LetterViewletterAsyncWithHttpInfo(lettersid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Letter Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lettersid">The unique identifier for a letter object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LetterViewletterAsyncWithHttpInfo (string lettersid)
        {
            // verify the required parameter 'lettersid' is set
            if (lettersid == null)
                throw new ApiException(400, "Missing required parameter 'lettersid' when calling LetterApi->LetterViewletter");

            var localVarPath = "/letter/viewletter.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lettersid != null) localVarFormParams.Add("lettersid", Configuration.ApiClient.ParameterToString(lettersid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LetterViewletter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
