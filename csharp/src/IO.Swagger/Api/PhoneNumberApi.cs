/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneNumberApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Available Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>string</returns>
        string IncomingphoneAvailablenumber (string numbertype, string areacode, int? pagesize = null);

        /// <summary>
        /// Available Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneAvailablenumberWithHttpInfo (string numbertype, string areacode, int? pagesize = null);
        /// <summary>
        /// Bulk Buy Numbers
        /// </summary>
        /// <remarks>
        /// Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>string</returns>
        string IncomingphoneBulkbuy (string numberType, string areaCode, string quantity, string leftover = null);

        /// <summary>
        /// Bulk Buy Numbers
        /// </summary>
        /// <remarks>
        /// Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneBulkbuyWithHttpInfo (string numberType, string areaCode, string quantity, string leftover = null);
        /// <summary>
        /// Purchase Number
        /// </summary>
        /// <remarks>
        /// Purchase a phone number to be used with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>string</returns>
        string IncomingphoneBuynumber (string phoneNumber);

        /// <summary>
        /// Purchase Number
        /// </summary>
        /// <remarks>
        /// Purchase a phone number to be used with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneBuynumberWithHttpInfo (string phoneNumber);
        /// <summary>
        /// Get DID Score
        /// </summary>
        /// <remarks>
        /// Get DID Score Number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>string</returns>
        string IncomingphoneGetdidscore (string phonenumber);

        /// <summary>
        /// Get DID Score
        /// </summary>
        /// <remarks>
        /// Get DID Score Number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneGetdidscoreWithHttpInfo (string phonenumber);
        /// <summary>
        /// List Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>string</returns>
        string IncomingphoneListnumber (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null);

        /// <summary>
        /// List Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneListnumberWithHttpInfo (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null);
        /// <summary>
        /// Bulk Release
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>string</returns>
        string IncomingphoneMassreleasenumber (string phoneNumber);

        /// <summary>
        /// Bulk Release
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneMassreleasenumberWithHttpInfo (string phoneNumber);
        /// <summary>
        /// Bulk Update Numbers
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>string</returns>
        string IncomingphoneMassupdatenumber (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);

        /// <summary>
        /// Bulk Update Numbers
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneMassupdatenumberWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);
        /// <summary>
        /// Release Number
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>string</returns>
        string IncomingphoneReleasenumberByResponseTypePost (string phoneNumber, string responseType);

        /// <summary>
        /// Release Number
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneReleasenumberByResponseTypePostWithHttpInfo (string phoneNumber, string responseType);
        /// <summary>
        /// Move Number
        /// </summary>
        /// <remarks>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>string</returns>
        string IncomingphoneTransferphonenumbers (string phonenumber, string fromaccountsid, string toaccountsid);

        /// <summary>
        /// Move Number
        /// </summary>
        /// <remarks>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneTransferphonenumbersWithHttpInfo (string phonenumber, string fromaccountsid, string toaccountsid);
        /// <summary>
        /// Update Number
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>string</returns>
        string IncomingphoneUpdatenumber (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);

        /// <summary>
        /// Update Number
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneUpdatenumberWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);
        /// <summary>
        /// View Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details for a phone number by its number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>string</returns>
        string IncomingphoneViewnumber (string phoneNumber);

        /// <summary>
        /// View Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details for a phone number by its number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> IncomingphoneViewnumberWithHttpInfo (string phoneNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Available Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneAvailablenumberAsync (string numbertype, string areacode, int? pagesize = null);

        /// <summary>
        /// Available Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneAvailablenumberAsyncWithHttpInfo (string numbertype, string areacode, int? pagesize = null);
        /// <summary>
        /// Bulk Buy Numbers
        /// </summary>
        /// <remarks>
        /// Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneBulkbuyAsync (string numberType, string areaCode, string quantity, string leftover = null);

        /// <summary>
        /// Bulk Buy Numbers
        /// </summary>
        /// <remarks>
        /// Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneBulkbuyAsyncWithHttpInfo (string numberType, string areaCode, string quantity, string leftover = null);
        /// <summary>
        /// Purchase Number
        /// </summary>
        /// <remarks>
        /// Purchase a phone number to be used with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneBuynumberAsync (string phoneNumber);

        /// <summary>
        /// Purchase Number
        /// </summary>
        /// <remarks>
        /// Purchase a phone number to be used with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneBuynumberAsyncWithHttpInfo (string phoneNumber);
        /// <summary>
        /// Get DID Score
        /// </summary>
        /// <remarks>
        /// Get DID Score Number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneGetdidscoreAsync (string phonenumber);

        /// <summary>
        /// Get DID Score
        /// </summary>
        /// <remarks>
        /// Get DID Score Number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneGetdidscoreAsyncWithHttpInfo (string phonenumber);
        /// <summary>
        /// List Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneListnumberAsync (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null);

        /// <summary>
        /// List Numbers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneListnumberAsyncWithHttpInfo (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null);
        /// <summary>
        /// Bulk Release
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneMassreleasenumberAsync (string phoneNumber);

        /// <summary>
        /// Bulk Release
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneMassreleasenumberAsyncWithHttpInfo (string phoneNumber);
        /// <summary>
        /// Bulk Update Numbers
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneMassupdatenumberAsync (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);

        /// <summary>
        /// Bulk Update Numbers
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneMassupdatenumberAsyncWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);
        /// <summary>
        /// Release Number
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneReleasenumberByResponseTypePostAsync (string phoneNumber, string responseType);

        /// <summary>
        /// Release Number
        /// </summary>
        /// <remarks>
        /// Remove a purchased Ytel number from your account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo (string phoneNumber, string responseType);
        /// <summary>
        /// Move Number
        /// </summary>
        /// <remarks>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneTransferphonenumbersAsync (string phonenumber, string fromaccountsid, string toaccountsid);

        /// <summary>
        /// Move Number
        /// </summary>
        /// <remarks>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneTransferphonenumbersAsyncWithHttpInfo (string phonenumber, string fromaccountsid, string toaccountsid);
        /// <summary>
        /// Update Number
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneUpdatenumberAsync (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);

        /// <summary>
        /// Update Number
        /// </summary>
        /// <remarks>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneUpdatenumberAsyncWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null);
        /// <summary>
        /// View Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details for a phone number by its number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> IncomingphoneViewnumberAsync (string phoneNumber);

        /// <summary>
        /// View Details
        /// </summary>
        /// <remarks>
        /// Retrieve the details for a phone number by its number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneViewnumberAsyncWithHttpInfo (string phoneNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneNumberApi : IPhoneNumberApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneNumberApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneNumberApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Available Numbers Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>string</returns>
        public string IncomingphoneAvailablenumber (string numbertype, string areacode, int? pagesize = null)
        {
             ApiResponse<string> localVarResponse = IncomingphoneAvailablenumberWithHttpInfo(numbertype, areacode, pagesize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available Numbers Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneAvailablenumberWithHttpInfo (string numbertype, string areacode, int? pagesize = null)
        {
            // verify the required parameter 'numbertype' is set
            if (numbertype == null)
                throw new ApiException(400, "Missing required parameter 'numbertype' when calling PhoneNumberApi->IncomingphoneAvailablenumber");
            // verify the required parameter 'areacode' is set
            if (areacode == null)
                throw new ApiException(400, "Missing required parameter 'areacode' when calling PhoneNumberApi->IncomingphoneAvailablenumber");

            var localVarPath = "/incomingphone/availablenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numbertype != null) localVarFormParams.Add("numbertype", Configuration.ApiClient.ParameterToString(numbertype)); // form parameter
            if (areacode != null) localVarFormParams.Add("areacode", Configuration.ApiClient.ParameterToString(areacode)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneAvailablenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Available Numbers Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneAvailablenumberAsync (string numbertype, string areacode, int? pagesize = null)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneAvailablenumberAsyncWithHttpInfo(numbertype, areacode, pagesize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available Numbers Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numbertype">Number type either SMS,Voice or all</param>
        /// <param name="areacode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">The count of objects to return. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneAvailablenumberAsyncWithHttpInfo (string numbertype, string areacode, int? pagesize = null)
        {
            // verify the required parameter 'numbertype' is set
            if (numbertype == null)
                throw new ApiException(400, "Missing required parameter 'numbertype' when calling PhoneNumberApi->IncomingphoneAvailablenumber");
            // verify the required parameter 'areacode' is set
            if (areacode == null)
                throw new ApiException(400, "Missing required parameter 'areacode' when calling PhoneNumberApi->IncomingphoneAvailablenumber");

            var localVarPath = "/incomingphone/availablenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numbertype != null) localVarFormParams.Add("numbertype", Configuration.ApiClient.ParameterToString(numbertype)); // form parameter
            if (areacode != null) localVarFormParams.Add("areacode", Configuration.ApiClient.ParameterToString(areacode)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneAvailablenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Buy Numbers Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>string</returns>
        public string IncomingphoneBulkbuy (string numberType, string areaCode, string quantity, string leftover = null)
        {
             ApiResponse<string> localVarResponse = IncomingphoneBulkbuyWithHttpInfo(numberType, areaCode, quantity, leftover);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Buy Numbers Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneBulkbuyWithHttpInfo (string numberType, string areaCode, string quantity, string leftover = null)
        {
            // verify the required parameter 'numberType' is set
            if (numberType == null)
                throw new ApiException(400, "Missing required parameter 'numberType' when calling PhoneNumberApi->IncomingphoneBulkbuy");
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling PhoneNumberApi->IncomingphoneBulkbuy");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling PhoneNumberApi->IncomingphoneBulkbuy");

            var localVarPath = "/incomingphone/bulkbuy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberType != null) localVarFormParams.Add("NumberType", Configuration.ApiClient.ParameterToString(numberType)); // form parameter
            if (areaCode != null) localVarFormParams.Add("AreaCode", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter
            if (quantity != null) localVarFormParams.Add("Quantity", Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (leftover != null) localVarFormParams.Add("Leftover", Configuration.ApiClient.ParameterToString(leftover)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneBulkbuy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Buy Numbers Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneBulkbuyAsync (string numberType, string areaCode, string quantity, string leftover = null)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneBulkbuyAsyncWithHttpInfo(numberType, areaCode, quantity, leftover);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk Buy Numbers Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberType">The capability the number supports.</param>
        /// <param name="areaCode">Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">If desired quantity is unavailable purchase what is available . (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneBulkbuyAsyncWithHttpInfo (string numberType, string areaCode, string quantity, string leftover = null)
        {
            // verify the required parameter 'numberType' is set
            if (numberType == null)
                throw new ApiException(400, "Missing required parameter 'numberType' when calling PhoneNumberApi->IncomingphoneBulkbuy");
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling PhoneNumberApi->IncomingphoneBulkbuy");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling PhoneNumberApi->IncomingphoneBulkbuy");

            var localVarPath = "/incomingphone/bulkbuy.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberType != null) localVarFormParams.Add("NumberType", Configuration.ApiClient.ParameterToString(numberType)); // form parameter
            if (areaCode != null) localVarFormParams.Add("AreaCode", Configuration.ApiClient.ParameterToString(areaCode)); // form parameter
            if (quantity != null) localVarFormParams.Add("Quantity", Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (leftover != null) localVarFormParams.Add("Leftover", Configuration.ApiClient.ParameterToString(leftover)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneBulkbuy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Purchase Number Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>string</returns>
        public string IncomingphoneBuynumber (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = IncomingphoneBuynumberWithHttpInfo(phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Number Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneBuynumberWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneBuynumber");

            var localVarPath = "/incomingphone/buynumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneBuynumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Purchase Number Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneBuynumberAsync (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneBuynumberAsyncWithHttpInfo(phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Number Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneBuynumberAsyncWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneBuynumber");

            var localVarPath = "/incomingphone/buynumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneBuynumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get DID Score Get DID Score Number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>string</returns>
        public string IncomingphoneGetdidscore (string phonenumber)
        {
             ApiResponse<string> localVarResponse = IncomingphoneGetdidscoreWithHttpInfo(phonenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get DID Score Get DID Score Number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneGetdidscoreWithHttpInfo (string phonenumber)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->IncomingphoneGetdidscore");

            var localVarPath = "/incomingphone/getdidscore.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phonenumber != null) localVarFormParams.Add("Phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneGetdidscore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get DID Score Get DID Score Number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneGetdidscoreAsync (string phonenumber)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneGetdidscoreAsyncWithHttpInfo(phonenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get DID Score Get DID Score Number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneGetdidscoreAsyncWithHttpInfo (string phonenumber)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->IncomingphoneGetdidscore");

            var localVarPath = "/incomingphone/getdidscore.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phonenumber != null) localVarFormParams.Add("Phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneGetdidscore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Numbers Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>string</returns>
        public string IncomingphoneListnumber (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null)
        {
             ApiResponse<string> localVarResponse = IncomingphoneListnumberWithHttpInfo(page, pageSize, numberType, friendlyName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Numbers Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneListnumberWithHttpInfo (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null)
        {

            var localVarPath = "/incomingphone/listnumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (numberType != null) localVarFormParams.Add("NumberType", Configuration.ApiClient.ParameterToString(numberType)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneListnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Numbers Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneListnumberAsync (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneListnumberAsyncWithHttpInfo(page, pageSize, numberType, friendlyName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Numbers Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page of the overall response will be returned. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 10)</param>
        /// <param name="numberType">The capability supported by the number.Number type either SMS,Voice or all (optional)</param>
        /// <param name="friendlyName">A human-readable label added to the number object. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneListnumberAsyncWithHttpInfo (int? page = null, int? pageSize = null, string numberType = null, string friendlyName = null)
        {

            var localVarPath = "/incomingphone/listnumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (numberType != null) localVarFormParams.Add("NumberType", Configuration.ApiClient.ParameterToString(numberType)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneListnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Release Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>string</returns>
        public string IncomingphoneMassreleasenumber (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = IncomingphoneMassreleasenumberWithHttpInfo(phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Release Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneMassreleasenumberWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneMassreleasenumber");

            var localVarPath = "/incomingphone/massreleasenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneMassreleasenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Release Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneMassreleasenumberAsync (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneMassreleasenumberAsyncWithHttpInfo(phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk Release Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel comma separated numbers (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneMassreleasenumberAsyncWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneMassreleasenumber");

            var localVarPath = "/incomingphone/massreleasenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneMassreleasenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Update Numbers Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>string</returns>
        public string IncomingphoneMassupdatenumber (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
             ApiResponse<string> localVarResponse = IncomingphoneMassupdatenumberWithHttpInfo(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Update Numbers Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneMassupdatenumberWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneMassupdatenumber");
            // verify the required parameter 'voiceUrl' is set
            if (voiceUrl == null)
                throw new ApiException(400, "Missing required parameter 'voiceUrl' when calling PhoneNumberApi->IncomingphoneMassupdatenumber");

            var localVarPath = "/incomingphone/massupdatenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (voiceUrl != null) localVarFormParams.Add("VoiceUrl", Configuration.ApiClient.ParameterToString(voiceUrl)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (voiceMethod != null) localVarFormParams.Add("VoiceMethod", Configuration.ApiClient.ParameterToString(voiceMethod)); // form parameter
            if (voiceFallbackUrl != null) localVarFormParams.Add("VoiceFallbackUrl", Configuration.ApiClient.ParameterToString(voiceFallbackUrl)); // form parameter
            if (voiceFallbackMethod != null) localVarFormParams.Add("VoiceFallbackMethod", Configuration.ApiClient.ParameterToString(voiceFallbackMethod)); // form parameter
            if (hangupCallback != null) localVarFormParams.Add("HangupCallback", Configuration.ApiClient.ParameterToString(hangupCallback)); // form parameter
            if (hangupCallbackMethod != null) localVarFormParams.Add("HangupCallbackMethod", Configuration.ApiClient.ParameterToString(hangupCallbackMethod)); // form parameter
            if (heartbeatUrl != null) localVarFormParams.Add("HeartbeatUrl", Configuration.ApiClient.ParameterToString(heartbeatUrl)); // form parameter
            if (heartbeatMethod != null) localVarFormParams.Add("HeartbeatMethod", Configuration.ApiClient.ParameterToString(heartbeatMethod)); // form parameter
            if (smsUrl != null) localVarFormParams.Add("SmsUrl", Configuration.ApiClient.ParameterToString(smsUrl)); // form parameter
            if (smsMethod != null) localVarFormParams.Add("SmsMethod", Configuration.ApiClient.ParameterToString(smsMethod)); // form parameter
            if (smsFallbackUrl != null) localVarFormParams.Add("SmsFallbackUrl", Configuration.ApiClient.ParameterToString(smsFallbackUrl)); // form parameter
            if (smsFallbackMethod != null) localVarFormParams.Add("SmsFallbackMethod", Configuration.ApiClient.ParameterToString(smsFallbackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneMassupdatenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bulk Update Numbers Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneMassupdatenumberAsync (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneMassupdatenumberAsyncWithHttpInfo(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk Update Numbers Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">A human-readable value for labeling the number. (optional)</param>
        /// <param name="voiceMethod">Specifies the HTTP method used to request the VoiceUrl once incoming call connects. (optional)</param>
        /// <param name="voiceFallbackUrl">URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url (optional)</param>
        /// <param name="voiceFallbackMethod">Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects. (optional)</param>
        /// <param name="hangupCallback">URL that can be requested to receive notification when and how incoming call has ended. (optional)</param>
        /// <param name="hangupCallbackMethod">The HTTP method Ytel will use when requesting the HangupCallback URL. (optional)</param>
        /// <param name="heartbeatUrl">URL that can be used to monitor the phone number. (optional)</param>
        /// <param name="heartbeatMethod">The HTTP method Ytel will use when requesting the HeartbeatUrl. (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received. (optional)</param>
        /// <param name="smsMethod">The HTTP method Ytel will use when requesting the SmsUrl. (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneMassupdatenumberAsyncWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneMassupdatenumber");
            // verify the required parameter 'voiceUrl' is set
            if (voiceUrl == null)
                throw new ApiException(400, "Missing required parameter 'voiceUrl' when calling PhoneNumberApi->IncomingphoneMassupdatenumber");

            var localVarPath = "/incomingphone/massupdatenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (voiceUrl != null) localVarFormParams.Add("VoiceUrl", Configuration.ApiClient.ParameterToString(voiceUrl)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (voiceMethod != null) localVarFormParams.Add("VoiceMethod", Configuration.ApiClient.ParameterToString(voiceMethod)); // form parameter
            if (voiceFallbackUrl != null) localVarFormParams.Add("VoiceFallbackUrl", Configuration.ApiClient.ParameterToString(voiceFallbackUrl)); // form parameter
            if (voiceFallbackMethod != null) localVarFormParams.Add("VoiceFallbackMethod", Configuration.ApiClient.ParameterToString(voiceFallbackMethod)); // form parameter
            if (hangupCallback != null) localVarFormParams.Add("HangupCallback", Configuration.ApiClient.ParameterToString(hangupCallback)); // form parameter
            if (hangupCallbackMethod != null) localVarFormParams.Add("HangupCallbackMethod", Configuration.ApiClient.ParameterToString(hangupCallbackMethod)); // form parameter
            if (heartbeatUrl != null) localVarFormParams.Add("HeartbeatUrl", Configuration.ApiClient.ParameterToString(heartbeatUrl)); // form parameter
            if (heartbeatMethod != null) localVarFormParams.Add("HeartbeatMethod", Configuration.ApiClient.ParameterToString(heartbeatMethod)); // form parameter
            if (smsUrl != null) localVarFormParams.Add("SmsUrl", Configuration.ApiClient.ParameterToString(smsUrl)); // form parameter
            if (smsMethod != null) localVarFormParams.Add("SmsMethod", Configuration.ApiClient.ParameterToString(smsMethod)); // form parameter
            if (smsFallbackUrl != null) localVarFormParams.Add("SmsFallbackUrl", Configuration.ApiClient.ParameterToString(smsFallbackUrl)); // form parameter
            if (smsFallbackMethod != null) localVarFormParams.Add("SmsFallbackMethod", Configuration.ApiClient.ParameterToString(smsFallbackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneMassupdatenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Release Number Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>string</returns>
        public string IncomingphoneReleasenumberByResponseTypePost (string phoneNumber, string responseType)
        {
             ApiResponse<string> localVarResponse = IncomingphoneReleasenumberByResponseTypePostWithHttpInfo(phoneNumber, responseType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Release Number Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneReleasenumberByResponseTypePostWithHttpInfo (string phoneNumber, string responseType)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneReleasenumberByResponseTypePost");
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling PhoneNumberApi->IncomingphoneReleasenumberByResponseTypePost");

            var localVarPath = "/incomingphone/releasenumber.{ResponseType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarPathParams.Add("ResponseType", Configuration.ApiClient.ParameterToString(responseType)); // path parameter
            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneReleasenumberByResponseTypePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Release Number Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneReleasenumberByResponseTypePostAsync (string phoneNumber, string responseType)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo(phoneNumber, responseType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Release Number Remove a purchased Ytel number from your account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="responseType">Response type format xml or json</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneReleasenumberByResponseTypePostAsyncWithHttpInfo (string phoneNumber, string responseType)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneReleasenumberByResponseTypePost");
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling PhoneNumberApi->IncomingphoneReleasenumberByResponseTypePost");

            var localVarPath = "/incomingphone/releasenumber.{ResponseType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarPathParams.Add("ResponseType", Configuration.ApiClient.ParameterToString(responseType)); // path parameter
            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneReleasenumberByResponseTypePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Move Number Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>string</returns>
        public string IncomingphoneTransferphonenumbers (string phonenumber, string fromaccountsid, string toaccountsid)
        {
             ApiResponse<string> localVarResponse = IncomingphoneTransferphonenumbersWithHttpInfo(phonenumber, fromaccountsid, toaccountsid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move Number Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneTransferphonenumbersWithHttpInfo (string phonenumber, string fromaccountsid, string toaccountsid)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");
            // verify the required parameter 'fromaccountsid' is set
            if (fromaccountsid == null)
                throw new ApiException(400, "Missing required parameter 'fromaccountsid' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");
            // verify the required parameter 'toaccountsid' is set
            if (toaccountsid == null)
                throw new ApiException(400, "Missing required parameter 'toaccountsid' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");

            var localVarPath = "/incomingphone/transferphonenumbers.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (fromaccountsid != null) localVarFormParams.Add("fromaccountsid", Configuration.ApiClient.ParameterToString(fromaccountsid)); // form parameter
            if (toaccountsid != null) localVarFormParams.Add("toaccountsid", Configuration.ApiClient.ParameterToString(toaccountsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneTransferphonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Move Number Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneTransferphonenumbersAsync (string phonenumber, string fromaccountsid, string toaccountsid)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneTransferphonenumbersAsyncWithHttpInfo(phonenumber, fromaccountsid, toaccountsid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move Number Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">A specific Accountsid to which Number is getting transfer.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneTransferphonenumbersAsyncWithHttpInfo (string phonenumber, string fromaccountsid, string toaccountsid)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");
            // verify the required parameter 'fromaccountsid' is set
            if (fromaccountsid == null)
                throw new ApiException(400, "Missing required parameter 'fromaccountsid' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");
            // verify the required parameter 'toaccountsid' is set
            if (toaccountsid == null)
                throw new ApiException(400, "Missing required parameter 'toaccountsid' when calling PhoneNumberApi->IncomingphoneTransferphonenumbers");

            var localVarPath = "/incomingphone/transferphonenumbers.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (fromaccountsid != null) localVarFormParams.Add("fromaccountsid", Configuration.ApiClient.ParameterToString(fromaccountsid)); // form parameter
            if (toaccountsid != null) localVarFormParams.Add("toaccountsid", Configuration.ApiClient.ParameterToString(toaccountsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneTransferphonenumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Number Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>string</returns>
        public string IncomingphoneUpdatenumber (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
             ApiResponse<string> localVarResponse = IncomingphoneUpdatenumberWithHttpInfo(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Number Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneUpdatenumberWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneUpdatenumber");
            // verify the required parameter 'voiceUrl' is set
            if (voiceUrl == null)
                throw new ApiException(400, "Missing required parameter 'voiceUrl' when calling PhoneNumberApi->IncomingphoneUpdatenumber");

            var localVarPath = "/incomingphone/updatenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (voiceUrl != null) localVarFormParams.Add("VoiceUrl", Configuration.ApiClient.ParameterToString(voiceUrl)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (voiceMethod != null) localVarFormParams.Add("VoiceMethod", Configuration.ApiClient.ParameterToString(voiceMethod)); // form parameter
            if (voiceFallbackUrl != null) localVarFormParams.Add("VoiceFallbackUrl", Configuration.ApiClient.ParameterToString(voiceFallbackUrl)); // form parameter
            if (voiceFallbackMethod != null) localVarFormParams.Add("VoiceFallbackMethod", Configuration.ApiClient.ParameterToString(voiceFallbackMethod)); // form parameter
            if (hangupCallback != null) localVarFormParams.Add("HangupCallback", Configuration.ApiClient.ParameterToString(hangupCallback)); // form parameter
            if (hangupCallbackMethod != null) localVarFormParams.Add("HangupCallbackMethod", Configuration.ApiClient.ParameterToString(hangupCallbackMethod)); // form parameter
            if (heartbeatUrl != null) localVarFormParams.Add("HeartbeatUrl", Configuration.ApiClient.ParameterToString(heartbeatUrl)); // form parameter
            if (heartbeatMethod != null) localVarFormParams.Add("HeartbeatMethod", Configuration.ApiClient.ParameterToString(heartbeatMethod)); // form parameter
            if (smsUrl != null) localVarFormParams.Add("SmsUrl", Configuration.ApiClient.ParameterToString(smsUrl)); // form parameter
            if (smsMethod != null) localVarFormParams.Add("SmsMethod", Configuration.ApiClient.ParameterToString(smsMethod)); // form parameter
            if (smsFallbackUrl != null) localVarFormParams.Add("SmsFallbackUrl", Configuration.ApiClient.ParameterToString(smsFallbackUrl)); // form parameter
            if (smsFallbackMethod != null) localVarFormParams.Add("SmsFallbackMethod", Configuration.ApiClient.ParameterToString(smsFallbackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneUpdatenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Number Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneUpdatenumberAsync (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneUpdatenumberAsyncWithHttpInfo(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Number Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">URL requested once the call connects</param>
        /// <param name="friendlyName">Phone number friendly name description (optional)</param>
        /// <param name="voiceMethod">Post or Get (optional)</param>
        /// <param name="voiceFallbackUrl">URL requested if the voice URL is not available (optional)</param>
        /// <param name="voiceFallbackMethod">Post or Get (optional)</param>
        /// <param name="hangupCallback">callback url after a hangup occurs (optional)</param>
        /// <param name="hangupCallbackMethod">Post or Get (optional)</param>
        /// <param name="heartbeatUrl">URL requested once the call connects (optional)</param>
        /// <param name="heartbeatMethod">URL that can be requested every 60 seconds during the call to notify of elapsed time (optional)</param>
        /// <param name="smsUrl">URL requested when an SMS is received (optional)</param>
        /// <param name="smsMethod">Post or Get (optional)</param>
        /// <param name="smsFallbackUrl">URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl. (optional)</param>
        /// <param name="smsFallbackMethod">The HTTP method Ytel will use when URL requested if the SmsUrl is not available. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneUpdatenumberAsyncWithHttpInfo (string phoneNumber, string voiceUrl, string friendlyName = null, string voiceMethod = null, string voiceFallbackUrl = null, string voiceFallbackMethod = null, string hangupCallback = null, string hangupCallbackMethod = null, string heartbeatUrl = null, string heartbeatMethod = null, string smsUrl = null, string smsMethod = null, string smsFallbackUrl = null, string smsFallbackMethod = null)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneUpdatenumber");
            // verify the required parameter 'voiceUrl' is set
            if (voiceUrl == null)
                throw new ApiException(400, "Missing required parameter 'voiceUrl' when calling PhoneNumberApi->IncomingphoneUpdatenumber");

            var localVarPath = "/incomingphone/updatenumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter
            if (voiceUrl != null) localVarFormParams.Add("VoiceUrl", Configuration.ApiClient.ParameterToString(voiceUrl)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (voiceMethod != null) localVarFormParams.Add("VoiceMethod", Configuration.ApiClient.ParameterToString(voiceMethod)); // form parameter
            if (voiceFallbackUrl != null) localVarFormParams.Add("VoiceFallbackUrl", Configuration.ApiClient.ParameterToString(voiceFallbackUrl)); // form parameter
            if (voiceFallbackMethod != null) localVarFormParams.Add("VoiceFallbackMethod", Configuration.ApiClient.ParameterToString(voiceFallbackMethod)); // form parameter
            if (hangupCallback != null) localVarFormParams.Add("HangupCallback", Configuration.ApiClient.ParameterToString(hangupCallback)); // form parameter
            if (hangupCallbackMethod != null) localVarFormParams.Add("HangupCallbackMethod", Configuration.ApiClient.ParameterToString(hangupCallbackMethod)); // form parameter
            if (heartbeatUrl != null) localVarFormParams.Add("HeartbeatUrl", Configuration.ApiClient.ParameterToString(heartbeatUrl)); // form parameter
            if (heartbeatMethod != null) localVarFormParams.Add("HeartbeatMethod", Configuration.ApiClient.ParameterToString(heartbeatMethod)); // form parameter
            if (smsUrl != null) localVarFormParams.Add("SmsUrl", Configuration.ApiClient.ParameterToString(smsUrl)); // form parameter
            if (smsMethod != null) localVarFormParams.Add("SmsMethod", Configuration.ApiClient.ParameterToString(smsMethod)); // form parameter
            if (smsFallbackUrl != null) localVarFormParams.Add("SmsFallbackUrl", Configuration.ApiClient.ParameterToString(smsFallbackUrl)); // form parameter
            if (smsFallbackMethod != null) localVarFormParams.Add("SmsFallbackMethod", Configuration.ApiClient.ParameterToString(smsFallbackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneUpdatenumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Details Retrieve the details for a phone number by its number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>string</returns>
        public string IncomingphoneViewnumber (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = IncomingphoneViewnumberWithHttpInfo(phoneNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Details Retrieve the details for a phone number by its number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > IncomingphoneViewnumberWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneViewnumber");

            var localVarPath = "/incomingphone/viewnumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneViewnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Details Retrieve the details for a phone number by its number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> IncomingphoneViewnumberAsync (string phoneNumber)
        {
             ApiResponse<string> localVarResponse = await IncomingphoneViewnumberAsyncWithHttpInfo(phoneNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Details Retrieve the details for a phone number by its number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> IncomingphoneViewnumberAsyncWithHttpInfo (string phoneNumber)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
                throw new ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneNumberApi->IncomingphoneViewnumber");

            var localVarPath = "/incomingphone/viewnumber.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phoneNumber != null) localVarFormParams.Add("PhoneNumber", Configuration.ApiClient.ParameterToString(phoneNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingphoneViewnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
