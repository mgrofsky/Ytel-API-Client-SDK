/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostCardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Postcard
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>string</returns>
        string PostcardCreatepostcard (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null);

        /// <summary>
        /// Create Postcard
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostcardCreatepostcardWithHttpInfo (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null);
        /// <summary>
        /// Delete Postcard
        /// </summary>
        /// <remarks>
        /// Remove a postcard object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>string</returns>
        string PostcardDeletepostcard (string postcardid);

        /// <summary>
        /// Delete Postcard
        /// </summary>
        /// <remarks>
        /// Remove a postcard object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostcardDeletepostcardWithHttpInfo (string postcardid);
        /// <summary>
        /// List Postcards
        /// </summary>
        /// <remarks>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>string</returns>
        string PostcardListpostcard (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null);

        /// <summary>
        /// List Postcards
        /// </summary>
        /// <remarks>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostcardListpostcardWithHttpInfo (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null);
        /// <summary>
        /// View Postcard
        /// </summary>
        /// <remarks>
        /// Retrieve a postcard object by its PostcardId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>string</returns>
        string PostcardViewpostcard (string postcardid);

        /// <summary>
        /// View Postcard
        /// </summary>
        /// <remarks>
        /// Retrieve a postcard object by its PostcardId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostcardViewpostcardWithHttpInfo (string postcardid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Postcard
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostcardCreatepostcardAsync (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null);

        /// <summary>
        /// Create Postcard
        /// </summary>
        /// <remarks>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostcardCreatepostcardAsyncWithHttpInfo (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null);
        /// <summary>
        /// Delete Postcard
        /// </summary>
        /// <remarks>
        /// Remove a postcard object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostcardDeletepostcardAsync (string postcardid);

        /// <summary>
        /// Delete Postcard
        /// </summary>
        /// <remarks>
        /// Remove a postcard object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostcardDeletepostcardAsyncWithHttpInfo (string postcardid);
        /// <summary>
        /// List Postcards
        /// </summary>
        /// <remarks>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostcardListpostcardAsync (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null);

        /// <summary>
        /// List Postcards
        /// </summary>
        /// <remarks>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostcardListpostcardAsyncWithHttpInfo (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null);
        /// <summary>
        /// View Postcard
        /// </summary>
        /// <remarks>
        /// Retrieve a postcard object by its PostcardId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostcardViewpostcardAsync (string postcardid);

        /// <summary>
        /// View Postcard
        /// </summary>
        /// <remarks>
        /// Retrieve a postcard object by its PostcardId.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostcardViewpostcardAsyncWithHttpInfo (string postcardid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostCardApi : IPostCardApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostCardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostCardApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostCardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostCardApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Postcard Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>string</returns>
        public string PostcardCreatepostcard (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null)
        {
             ApiResponse<string> localVarResponse = PostcardCreatepostcardWithHttpInfo(to, from, attachbyid, front, back, message, setting, description, htmldata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Postcard Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostcardCreatepostcardWithHttpInfo (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'attachbyid' is set
            if (attachbyid == null)
                throw new ApiException(400, "Missing required parameter 'attachbyid' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'front' is set
            if (front == null)
                throw new ApiException(400, "Missing required parameter 'front' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'back' is set
            if (back == null)
                throw new ApiException(400, "Missing required parameter 'back' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling PostCardApi->PostcardCreatepostcard");

            var localVarPath = "/Postcard/createpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (attachbyid != null) localVarFormParams.Add("attachbyid", Configuration.ApiClient.ParameterToString(attachbyid)); // form parameter
            if (front != null) localVarFormParams.Add("front", Configuration.ApiClient.ParameterToString(front)); // form parameter
            if (back != null) localVarFormParams.Add("back", Configuration.ApiClient.ParameterToString(back)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (setting != null) localVarFormParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (htmldata != null) localVarFormParams.Add("htmldata", Configuration.ApiClient.ParameterToString(htmldata)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardCreatepostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Postcard Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostcardCreatepostcardAsync (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null)
        {
             ApiResponse<string> localVarResponse = await PostcardCreatepostcardAsyncWithHttpInfo(to, from, attachbyid, front, back, message, setting, description, htmldata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Postcard Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="from">The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Code for the dimensions of the media to be printed.</param>
        /// <param name="description">A description for the postcard. (optional)</param>
        /// <param name="htmldata">A string value that contains HTML markup. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostcardCreatepostcardAsyncWithHttpInfo (string to, string from, string attachbyid, string front, string back, string message, string setting, string description = null, string htmldata = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'attachbyid' is set
            if (attachbyid == null)
                throw new ApiException(400, "Missing required parameter 'attachbyid' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'front' is set
            if (front == null)
                throw new ApiException(400, "Missing required parameter 'front' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'back' is set
            if (back == null)
                throw new ApiException(400, "Missing required parameter 'back' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling PostCardApi->PostcardCreatepostcard");
            // verify the required parameter 'setting' is set
            if (setting == null)
                throw new ApiException(400, "Missing required parameter 'setting' when calling PostCardApi->PostcardCreatepostcard");

            var localVarPath = "/Postcard/createpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (attachbyid != null) localVarFormParams.Add("attachbyid", Configuration.ApiClient.ParameterToString(attachbyid)); // form parameter
            if (front != null) localVarFormParams.Add("front", Configuration.ApiClient.ParameterToString(front)); // form parameter
            if (back != null) localVarFormParams.Add("back", Configuration.ApiClient.ParameterToString(back)); // form parameter
            if (message != null) localVarFormParams.Add("message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (setting != null) localVarFormParams.Add("setting", Configuration.ApiClient.ParameterToString(setting)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (htmldata != null) localVarFormParams.Add("htmldata", Configuration.ApiClient.ParameterToString(htmldata)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardCreatepostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Postcard Remove a postcard object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>string</returns>
        public string PostcardDeletepostcard (string postcardid)
        {
             ApiResponse<string> localVarResponse = PostcardDeletepostcardWithHttpInfo(postcardid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Postcard Remove a postcard object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostcardDeletepostcardWithHttpInfo (string postcardid)
        {
            // verify the required parameter 'postcardid' is set
            if (postcardid == null)
                throw new ApiException(400, "Missing required parameter 'postcardid' when calling PostCardApi->PostcardDeletepostcard");

            var localVarPath = "/Postcard/deletepostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardDeletepostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Postcard Remove a postcard object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostcardDeletepostcardAsync (string postcardid)
        {
             ApiResponse<string> localVarResponse = await PostcardDeletepostcardAsyncWithHttpInfo(postcardid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Postcard Remove a postcard object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier of a postcard object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostcardDeletepostcardAsyncWithHttpInfo (string postcardid)
        {
            // verify the required parameter 'postcardid' is set
            if (postcardid == null)
                throw new ApiException(400, "Missing required parameter 'postcardid' when calling PostCardApi->PostcardDeletepostcard");

            var localVarPath = "/Postcard/deletepostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardDeletepostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Postcards Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>string</returns>
        public string PostcardListpostcard (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = PostcardListpostcardWithHttpInfo(page, pagesize, postcardid, dateCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Postcards Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostcardListpostcardWithHttpInfo (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null)
        {

            var localVarPath = "/Postcard/listpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardListpostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Postcards Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostcardListpostcardAsync (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = await PostcardListpostcardAsyncWithHttpInfo(page, pagesize, postcardid, dateCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Postcards Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="postcardid">The unique identifier for a postcard object. (optional)</param>
        /// <param name="dateCreated">The date the postcard was created. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostcardListpostcardAsyncWithHttpInfo (int? page = null, int? pagesize = null, string postcardid = null, string dateCreated = null)
        {

            var localVarPath = "/Postcard/listpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardListpostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Postcard Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>string</returns>
        public string PostcardViewpostcard (string postcardid)
        {
             ApiResponse<string> localVarResponse = PostcardViewpostcardWithHttpInfo(postcardid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Postcard Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostcardViewpostcardWithHttpInfo (string postcardid)
        {
            // verify the required parameter 'postcardid' is set
            if (postcardid == null)
                throw new ApiException(400, "Missing required parameter 'postcardid' when calling PostCardApi->PostcardViewpostcard");

            var localVarPath = "/Postcard/viewpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardViewpostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Postcard Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostcardViewpostcardAsync (string postcardid)
        {
             ApiResponse<string> localVarResponse = await PostcardViewpostcardAsyncWithHttpInfo(postcardid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Postcard Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postcardid">The unique identifier for a postcard object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostcardViewpostcardAsyncWithHttpInfo (string postcardid)
        {
            // verify the required parameter 'postcardid' is set
            if (postcardid == null)
                throw new ApiException(400, "Missing required parameter 'postcardid' when calling PostCardApi->PostcardViewpostcard");

            var localVarPath = "/Postcard/viewpostcard.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postcardid != null) localVarFormParams.Add("postcardid", Configuration.ApiClient.ParameterToString(postcardid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostcardViewpostcard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
