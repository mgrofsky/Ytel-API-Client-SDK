/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Email Unsubscribe
        /// </summary>
        /// <remarks>
        /// Add an email to the unsubscribe list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>string</returns>
        string EmailAddunsubscribesemail (string email);

        /// <summary>
        /// Add Email Unsubscribe
        /// </summary>
        /// <remarks>
        /// Add an email to the unsubscribe list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailAddunsubscribesemailWithHttpInfo (string email);
        /// <summary>
        /// Remove Blocked Address
        /// </summary>
        /// <remarks>
        /// Remove an email from blocked emails list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>string</returns>
        string EmailDeleteblocksemail (string email);

        /// <summary>
        /// Remove Blocked Address
        /// </summary>
        /// <remarks>
        /// Remove an email from blocked emails list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailDeleteblocksemailWithHttpInfo (string email);
        /// <summary>
        /// Remove Bounced Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the bounced list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>string</returns>
        string EmailDeletebouncesemail (string email);

        /// <summary>
        /// Remove Bounced Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the bounced list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailDeletebouncesemailWithHttpInfo (string email);
        /// <summary>
        /// Remove Invalid Email
        /// </summary>
        /// <remarks>
        /// Remove an email from the invalid email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>string</returns>
        string EmailDeleteinvalidemail (string email);

        /// <summary>
        /// Remove Invalid Email
        /// </summary>
        /// <remarks>
        /// Remove an email from the invalid email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailDeleteinvalidemailWithHttpInfo (string email);
        /// <summary>
        /// Remove Spam Address
        /// </summary>
        /// <remarks>
        /// Remove an email from the spam email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>string</returns>
        string EmailDeletespamemail (string email);

        /// <summary>
        /// Remove Spam Address
        /// </summary>
        /// <remarks>
        /// Remove an email from the spam email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailDeletespamemailWithHttpInfo (string email);
        /// <summary>
        /// Remove Unsubscribed Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the list of unsubscribed emails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>string</returns>
        string EmailDeleteunsubscribedemail (string email);

        /// <summary>
        /// Remove Unsubscribed Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the list of unsubscribed emails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailDeleteunsubscribedemailWithHttpInfo (string email);
        /// <summary>
        /// Blocked Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have been blocked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        string EmailListblockemail (string offset = null, string limit = null);

        /// <summary>
        /// Blocked Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have been blocked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailListblockemailWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Bounced Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have bounced.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        string EmailListbounceemail (string offset = null, string limit = null);

        /// <summary>
        /// Bounced Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have bounced.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailListbounceemailWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Invalid Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of invalid email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        string EmailListinvalidemail (string offset = null, string limit = null);

        /// <summary>
        /// Invalid Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of invalid email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailListinvalidemailWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Spam Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that are on the spam list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        string EmailListspamemail (string offset = null, string limit = null);

        /// <summary>
        /// Spam Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that are on the spam list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailListspamemailWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// List Unsubscribed Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        string EmailListunsubscribedemail (string offset = null, string limit = null);

        /// <summary>
        /// List Unsubscribed Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailListunsubscribedemailWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Create and submit an email message to one or more email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>string</returns>
        string EmailSendemails (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null);

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Create and submit an email message to one or more email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EmailSendemailsWithHttpInfo (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Email Unsubscribe
        /// </summary>
        /// <remarks>
        /// Add an email to the unsubscribe list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailAddunsubscribesemailAsync (string email);

        /// <summary>
        /// Add Email Unsubscribe
        /// </summary>
        /// <remarks>
        /// Add an email to the unsubscribe list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailAddunsubscribesemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Remove Blocked Address
        /// </summary>
        /// <remarks>
        /// Remove an email from blocked emails list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailDeleteblocksemailAsync (string email);

        /// <summary>
        /// Remove Blocked Address
        /// </summary>
        /// <remarks>
        /// Remove an email from blocked emails list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteblocksemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Remove Bounced Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the bounced list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailDeletebouncesemailAsync (string email);

        /// <summary>
        /// Remove Bounced Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the bounced list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailDeletebouncesemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Remove Invalid Email
        /// </summary>
        /// <remarks>
        /// Remove an email from the invalid email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailDeleteinvalidemailAsync (string email);

        /// <summary>
        /// Remove Invalid Email
        /// </summary>
        /// <remarks>
        /// Remove an email from the invalid email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteinvalidemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Remove Spam Address
        /// </summary>
        /// <remarks>
        /// Remove an email from the spam email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailDeletespamemailAsync (string email);

        /// <summary>
        /// Remove Spam Address
        /// </summary>
        /// <remarks>
        /// Remove an email from the spam email list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailDeletespamemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Remove Unsubscribed Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the list of unsubscribed emails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailDeleteunsubscribedemailAsync (string email);

        /// <summary>
        /// Remove Unsubscribed Email
        /// </summary>
        /// <remarks>
        /// Remove an email address from the list of unsubscribed emails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteunsubscribedemailAsyncWithHttpInfo (string email);
        /// <summary>
        /// Blocked Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have been blocked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailListblockemailAsync (string offset = null, string limit = null);

        /// <summary>
        /// Blocked Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have been blocked.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailListblockemailAsyncWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Bounced Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have bounced.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailListbounceemailAsync (string offset = null, string limit = null);

        /// <summary>
        /// Bounced Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that have bounced.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailListbounceemailAsyncWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Invalid Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of invalid email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailListinvalidemailAsync (string offset = null, string limit = null);

        /// <summary>
        /// Invalid Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of invalid email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailListinvalidemailAsyncWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Spam Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that are on the spam list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailListspamemailAsync (string offset = null, string limit = null);

        /// <summary>
        /// Spam Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of emails that are on the spam list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailListspamemailAsyncWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// List Unsubscribed Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailListunsubscribedemailAsync (string offset = null, string limit = null);

        /// <summary>
        /// List Unsubscribed Emails
        /// </summary>
        /// <remarks>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailListunsubscribedemailAsyncWithHttpInfo (string offset = null, string limit = null);
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Create and submit an email message to one or more email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EmailSendemailsAsync (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null);

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Create and submit an email message to one or more email addresses.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EmailSendemailsAsyncWithHttpInfo (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Email Unsubscribe Add an email to the unsubscribe list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>string</returns>
        public string EmailAddunsubscribesemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailAddunsubscribesemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Email Unsubscribe Add an email to the unsubscribe list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailAddunsubscribesemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailAddunsubscribesemail");

            var localVarPath = "/email/addunsubscribesemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailAddunsubscribesemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add Email Unsubscribe Add an email to the unsubscribe list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailAddunsubscribesemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailAddunsubscribesemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Email Unsubscribe Add an email to the unsubscribe list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be added to the unsubscribe list</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailAddunsubscribesemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailAddunsubscribesemail");

            var localVarPath = "/email/addunsubscribesemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailAddunsubscribesemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Blocked Address Remove an email from blocked emails list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>string</returns>
        public string EmailDeleteblocksemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailDeleteblocksemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Blocked Address Remove an email from blocked emails list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailDeleteblocksemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteblocksemail");

            var localVarPath = "/email/deleteblocksemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteblocksemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Blocked Address Remove an email from blocked emails list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailDeleteblocksemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailDeleteblocksemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Blocked Address Remove an email from blocked emails list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the blocked list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteblocksemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteblocksemail");

            var localVarPath = "/email/deleteblocksemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteblocksemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Bounced Email Remove an email address from the bounced list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>string</returns>
        public string EmailDeletebouncesemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailDeletebouncesemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Bounced Email Remove an email address from the bounced list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailDeletebouncesemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeletebouncesemail");

            var localVarPath = "/email/deletebouncesemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeletebouncesemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Bounced Email Remove an email address from the bounced list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailDeletebouncesemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailDeletebouncesemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Bounced Email Remove an email address from the bounced list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be remove from the bounced email list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailDeletebouncesemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeletebouncesemail");

            var localVarPath = "/email/deletebouncesemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeletebouncesemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Invalid Email Remove an email from the invalid email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>string</returns>
        public string EmailDeleteinvalidemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailDeleteinvalidemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Invalid Email Remove an email from the invalid email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailDeleteinvalidemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteinvalidemail");

            var localVarPath = "/email/deleteinvalidemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteinvalidemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Invalid Email Remove an email from the invalid email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailDeleteinvalidemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailDeleteinvalidemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Invalid Email Remove an email from the invalid email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the invalid email list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteinvalidemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteinvalidemail");

            var localVarPath = "/email/deleteinvalidemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteinvalidemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Spam Address Remove an email from the spam email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>string</returns>
        public string EmailDeletespamemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailDeletespamemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Spam Address Remove an email from the spam email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailDeletespamemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeletespamemail");

            var localVarPath = "/email/deletespamemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeletespamemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Spam Address Remove an email from the spam email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailDeletespamemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailDeletespamemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Spam Address Remove an email from the spam email list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the spam list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailDeletespamemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeletespamemail");

            var localVarPath = "/email/deletespamemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeletespamemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Unsubscribed Email Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>string</returns>
        public string EmailDeleteunsubscribedemail (string email)
        {
             ApiResponse<string> localVarResponse = EmailDeleteunsubscribedemailWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Unsubscribed Email Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailDeleteunsubscribedemailWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteunsubscribedemail");

            var localVarPath = "/email/deleteunsubscribedemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteunsubscribedemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Remove Unsubscribed Email Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailDeleteunsubscribedemailAsync (string email)
        {
             ApiResponse<string> localVarResponse = await EmailDeleteunsubscribedemailAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Unsubscribed Email Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">A valid email address that is to be remove from the unsubscribe list.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailDeleteunsubscribedemailAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->EmailDeleteunsubscribedemail");

            var localVarPath = "/email/deleteunsubscribedemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailDeleteunsubscribedemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Blocked Emails Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        public string EmailListblockemail (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = EmailListblockemailWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Blocked Emails Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailListblockemailWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listblockemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListblockemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Blocked Emails Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailListblockemailAsync (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailListblockemailAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Blocked Emails Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of blocked emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailListblockemailAsyncWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listblockemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListblockemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bounced Emails Retrieve a list of emails that have bounced.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        public string EmailListbounceemail (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = EmailListbounceemailWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bounced Emails Retrieve a list of emails that have bounced.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailListbounceemailWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listbounceemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListbounceemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Bounced Emails Retrieve a list of emails that have bounced.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailListbounceemailAsync (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailListbounceemailAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bounced Emails Retrieve a list of emails that have bounced.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of bounced emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailListbounceemailAsyncWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listbounceemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListbounceemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invalid Emails Retrieve a list of invalid email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        public string EmailListinvalidemail (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = EmailListinvalidemailWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invalid Emails Retrieve a list of invalid email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailListinvalidemailWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listinvalidemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListinvalidemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Invalid Emails Retrieve a list of invalid email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailListinvalidemailAsync (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailListinvalidemailAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invalid Emails Retrieve a list of invalid email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of invalid emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailListinvalidemailAsyncWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listinvalidemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListinvalidemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Spam Emails Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        public string EmailListspamemail (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = EmailListspamemailWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spam Emails Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailListspamemailWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listspamemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListspamemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Spam Emails Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailListspamemailAsync (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailListspamemailAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spam Emails Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of spam emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailListspamemailAsyncWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listspamemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListspamemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Unsubscribed Emails Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>string</returns>
        public string EmailListunsubscribedemail (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = EmailListunsubscribedemailWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Unsubscribed Emails Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailListunsubscribedemailWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listunsubscribedemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListunsubscribedemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Unsubscribed Emails Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailListunsubscribedemailAsync (string offset = null, string limit = null)
        {
             ApiResponse<string> localVarResponse = await EmailListunsubscribedemailAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Unsubscribed Emails Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The starting point of the list of unsubscribed emails that should be returned. (optional)</param>
        /// <param name="limit">The count of results that should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailListunsubscribedemailAsyncWithHttpInfo (string offset = null, string limit = null)
        {

            var localVarPath = "/email/listunsubscribedemail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarFormParams.Add("Offset", Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (limit != null) localVarFormParams.Add("Limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailListunsubscribedemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send Email Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>string</returns>
        public string EmailSendemails (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null)
        {
             ApiResponse<string> localVarResponse = EmailSendemailsWithHttpInfo(to, type, subject, message, from, cc, bcc, attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send Email Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EmailSendemailsWithHttpInfo (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling EmailApi->EmailSendemails");

            var localVarPath = "/email/sendemails.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (type != null) localVarFormParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (subject != null) localVarFormParams.Add("Subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("Message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (cc != null) localVarFormParams.Add("Cc", Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("Bcc", Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (attachment != null) localVarFormParams.Add("Attachment", Configuration.ApiClient.ParameterToString(attachment)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailSendemails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send Email Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EmailSendemailsAsync (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null)
        {
             ApiResponse<string> localVarResponse = await EmailSendemailsAsyncWithHttpInfo(to, type, subject, message, from, cc, bcc, attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send Email Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Specifies the type of email to be sent</param>
        /// <param name="subject">The subject of the mail. Must be a valid string.</param>
        /// <param name="message">The email message that is to be sent in the text.</param>
        /// <param name="from">A valid address that will send the email. (optional)</param>
        /// <param name="cc">Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="bcc">Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)</param>
        /// <param name="attachment">A file that is attached to the email. Must be less than 7 MB in size. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EmailSendemailsAsyncWithHttpInfo (string to, string type, string subject, string message, string from = null, string cc = null, string bcc = null, string attachment = null)
        {
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling EmailApi->EmailSendemails");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling EmailApi->EmailSendemails");

            var localVarPath = "/email/sendemails.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (type != null) localVarFormParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (subject != null) localVarFormParams.Add("Subject", Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("Message", Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (cc != null) localVarFormParams.Add("Cc", Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("Bcc", Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (attachment != null) localVarFormParams.Add("Attachment", Configuration.ApiClient.ParameterToString(attachment)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmailSendemails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
