/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Group Call
        /// </summary>
        /// <remarks>
        /// Group Call
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>string</returns>
        string CallsGroupcall (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null);

        /// <summary>
        /// Group Call
        /// </summary>
        /// <remarks>
        /// Group Call
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsGroupcallWithHttpInfo (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null);
        /// <summary>
        /// Interrupt Call
        /// </summary>
        /// <remarks>
        /// Interrupt the Call by Call Sid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>string</returns>
        string CallsInterruptcalls (string callSid, string url = null, string method = null, string status = null);

        /// <summary>
        /// Interrupt Call
        /// </summary>
        /// <remarks>
        /// Interrupt the Call by Call Sid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsInterruptcallsWithHttpInfo (string callSid, string url = null, string method = null, string status = null);
        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// A list of calls associated with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>string</returns>
        string CallsListcalls (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null);

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// A list of calls associated with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsListcallsWithHttpInfo (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null);
        /// <summary>
        /// Make Call
        /// </summary>
        /// <remarks>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>string</returns>
        string CallsMakecall (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null);

        /// <summary>
        /// Make Call
        /// </summary>
        /// <remarks>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsMakecallWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null);
        /// <summary>
        /// Send RVM
        /// </summary>
        /// <remarks>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>string</returns>
        string CallsMakervm (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null);

        /// <summary>
        /// Send RVM
        /// </summary>
        /// <remarks>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsMakervmWithHttpInfo (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null);
        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play Audio from a url
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>string</returns>
        string CallsPlayaudios (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null);

        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play Audio from a url
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsPlayaudiosWithHttpInfo (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null);
        /// <summary>
        /// Record Call
        /// </summary>
        /// <remarks>
        /// Start or stop recording of an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>string</returns>
        string CallsRecordcalls (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null);

        /// <summary>
        /// Record Call
        /// </summary>
        /// <remarks>
        /// Start or stop recording of an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsRecordcallsWithHttpInfo (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null);
        /// <summary>
        /// Play DTMF
        /// </summary>
        /// <remarks>
        /// Play Dtmf and send the Digit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>string</returns>
        string CallsSenddigits (string callSid, string playDtmf, string playDtmfDirection = null);

        /// <summary>
        /// Play DTMF
        /// </summary>
        /// <remarks>
        /// Play Dtmf and send the Digit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsSenddigitsWithHttpInfo (string callSid, string playDtmf, string playDtmfDirection = null);
        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>string</returns>
        string CallsViewcalldetail (string callSid);

        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsViewcalldetailWithHttpInfo (string callSid);
        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>string</returns>
        string CallsViewcalls (string callsid);

        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsViewcallsWithHttpInfo (string callsid);
        /// <summary>
        /// Voice Effect
        /// </summary>
        /// <remarks>
        /// Add audio voice effects to the an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>string</returns>
        string CallsVoiceeffect (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null);

        /// <summary>
        /// Voice Effect
        /// </summary>
        /// <remarks>
        /// Add audio voice effects to the an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CallsVoiceeffectWithHttpInfo (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Group Call
        /// </summary>
        /// <remarks>
        /// Group Call
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsGroupcallAsync (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null);

        /// <summary>
        /// Group Call
        /// </summary>
        /// <remarks>
        /// Group Call
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsGroupcallAsyncWithHttpInfo (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null);
        /// <summary>
        /// Interrupt Call
        /// </summary>
        /// <remarks>
        /// Interrupt the Call by Call Sid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsInterruptcallsAsync (string callSid, string url = null, string method = null, string status = null);

        /// <summary>
        /// Interrupt Call
        /// </summary>
        /// <remarks>
        /// Interrupt the Call by Call Sid
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsInterruptcallsAsyncWithHttpInfo (string callSid, string url = null, string method = null, string status = null);
        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// A list of calls associated with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsListcallsAsync (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null);

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// A list of calls associated with your Ytel account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsListcallsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null);
        /// <summary>
        /// Make Call
        /// </summary>
        /// <remarks>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsMakecallAsync (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null);

        /// <summary>
        /// Make Call
        /// </summary>
        /// <remarks>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsMakecallAsyncWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null);
        /// <summary>
        /// Send RVM
        /// </summary>
        /// <remarks>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsMakervmAsync (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null);

        /// <summary>
        /// Send RVM
        /// </summary>
        /// <remarks>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsMakervmAsyncWithHttpInfo (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null);
        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play Audio from a url
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsPlayaudiosAsync (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null);

        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play Audio from a url
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsPlayaudiosAsyncWithHttpInfo (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null);
        /// <summary>
        /// Record Call
        /// </summary>
        /// <remarks>
        /// Start or stop recording of an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsRecordcallsAsync (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null);

        /// <summary>
        /// Record Call
        /// </summary>
        /// <remarks>
        /// Start or stop recording of an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsRecordcallsAsyncWithHttpInfo (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null);
        /// <summary>
        /// Play DTMF
        /// </summary>
        /// <remarks>
        /// Play Dtmf and send the Digit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsSenddigitsAsync (string callSid, string playDtmf, string playDtmfDirection = null);

        /// <summary>
        /// Play DTMF
        /// </summary>
        /// <remarks>
        /// Play Dtmf and send the Digit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsSenddigitsAsyncWithHttpInfo (string callSid, string playDtmf, string playDtmfDirection = null);
        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsViewcalldetailAsync (string callSid);

        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsViewcalldetailAsyncWithHttpInfo (string callSid);
        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsViewcallsAsync (string callsid);

        /// <summary>
        /// View Call
        /// </summary>
        /// <remarks>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsViewcallsAsyncWithHttpInfo (string callsid);
        /// <summary>
        /// Voice Effect
        /// </summary>
        /// <remarks>
        /// Add audio voice effects to the an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CallsVoiceeffectAsync (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null);

        /// <summary>
        /// Voice Effect
        /// </summary>
        /// <remarks>
        /// Add audio voice effects to the an in-progress voice call.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CallsVoiceeffectAsyncWithHttpInfo (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallApi : ICallApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Group Call Group Call
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>string</returns>
        public string CallsGroupcall (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null)
        {
             ApiResponse<string> localVarResponse = CallsGroupcallWithHttpInfo(from, to, url, groupConfirmKey, groupConfirmFile, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Group Call Group Call
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsGroupcallWithHttpInfo (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'groupConfirmKey' is set
            if (groupConfirmKey == null)
                throw new ApiException(400, "Missing required parameter 'groupConfirmKey' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'groupConfirmFile' is set
            if (groupConfirmFile == null)
                throw new ApiException(400, "Missing required parameter 'groupConfirmFile' when calling CallApi->CallsGroupcall");

            var localVarPath = "/calls/groupcall.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (groupConfirmKey != null) localVarFormParams.Add("GroupConfirmKey", Configuration.ApiClient.ParameterToString(groupConfirmKey)); // form parameter
            if (groupConfirmFile != null) localVarFormParams.Add("GroupConfirmFile", Configuration.ApiClient.ParameterToString(groupConfirmFile)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallBackUrl != null) localVarFormParams.Add("FallBackUrl", Configuration.ApiClient.ParameterToString(fallBackUrl)); // form parameter
            if (fallBackMethod != null) localVarFormParams.Add("FallBackMethod", Configuration.ApiClient.ParameterToString(fallBackMethod)); // form parameter
            if (heartBeatUrl != null) localVarFormParams.Add("HeartBeatUrl", Configuration.ApiClient.ParameterToString(heartBeatUrl)); // form parameter
            if (heartBeatMethod != null) localVarFormParams.Add("HeartBeatMethod", Configuration.ApiClient.ParameterToString(heartBeatMethod)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (hideCallerId != null) localVarFormParams.Add("HideCallerId", Configuration.ApiClient.ParameterToString(hideCallerId)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (transcribe != null) localVarFormParams.Add("Transcribe", Configuration.ApiClient.ParameterToString(transcribe)); // form parameter
            if (transcribeCallBackUrl != null) localVarFormParams.Add("TranscribeCallBackUrl", Configuration.ApiClient.ParameterToString(transcribeCallBackUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsGroupcall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Group Call Group Call
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsGroupcallAsync (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null)
        {
             ApiResponse<string> localVarResponse = await CallsGroupcallAsyncWithHttpInfo(from, to, url, groupConfirmKey, groupConfirmFile, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Group Call Group Call
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">This number to display on Caller ID as calling</param>
        /// <param name="to">Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information. (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) we should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsGroupcallAsyncWithHttpInfo (string from, string to, string url, string groupConfirmKey, string groupConfirmFile, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, string hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'groupConfirmKey' is set
            if (groupConfirmKey == null)
                throw new ApiException(400, "Missing required parameter 'groupConfirmKey' when calling CallApi->CallsGroupcall");
            // verify the required parameter 'groupConfirmFile' is set
            if (groupConfirmFile == null)
                throw new ApiException(400, "Missing required parameter 'groupConfirmFile' when calling CallApi->CallsGroupcall");

            var localVarPath = "/calls/groupcall.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (groupConfirmKey != null) localVarFormParams.Add("GroupConfirmKey", Configuration.ApiClient.ParameterToString(groupConfirmKey)); // form parameter
            if (groupConfirmFile != null) localVarFormParams.Add("GroupConfirmFile", Configuration.ApiClient.ParameterToString(groupConfirmFile)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallBackUrl != null) localVarFormParams.Add("FallBackUrl", Configuration.ApiClient.ParameterToString(fallBackUrl)); // form parameter
            if (fallBackMethod != null) localVarFormParams.Add("FallBackMethod", Configuration.ApiClient.ParameterToString(fallBackMethod)); // form parameter
            if (heartBeatUrl != null) localVarFormParams.Add("HeartBeatUrl", Configuration.ApiClient.ParameterToString(heartBeatUrl)); // form parameter
            if (heartBeatMethod != null) localVarFormParams.Add("HeartBeatMethod", Configuration.ApiClient.ParameterToString(heartBeatMethod)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (hideCallerId != null) localVarFormParams.Add("HideCallerId", Configuration.ApiClient.ParameterToString(hideCallerId)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (transcribe != null) localVarFormParams.Add("Transcribe", Configuration.ApiClient.ParameterToString(transcribe)); // form parameter
            if (transcribeCallBackUrl != null) localVarFormParams.Add("TranscribeCallBackUrl", Configuration.ApiClient.ParameterToString(transcribeCallBackUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsGroupcall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Interrupt Call Interrupt the Call by Call Sid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>string</returns>
        public string CallsInterruptcalls (string callSid, string url = null, string method = null, string status = null)
        {
             ApiResponse<string> localVarResponse = CallsInterruptcallsWithHttpInfo(callSid, url, method, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Interrupt Call Interrupt the Call by Call Sid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsInterruptcallsWithHttpInfo (string callSid, string url = null, string method = null, string status = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsInterruptcalls");

            var localVarPath = "/calls/interruptcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (status != null) localVarFormParams.Add("Status", Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsInterruptcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Interrupt Call Interrupt the Call by Call Sid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsInterruptcallsAsync (string callSid, string url = null, string method = null, string status = null)
        {
             ApiResponse<string> localVarResponse = await CallsInterruptcallsAsyncWithHttpInfo(callSid, url, method, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Interrupt Call Interrupt the Call by Call Sid
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for voice call that is in progress.</param>
        /// <param name="url">URL the in-progress call will be redirected to (optional)</param>
        /// <param name="method">The method used to request the above Url parameter (optional)</param>
        /// <param name="status">Status to set the in-progress call to (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsInterruptcallsAsyncWithHttpInfo (string callSid, string url = null, string method = null, string status = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsInterruptcalls");

            var localVarPath = "/calls/interruptcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (status != null) localVarFormParams.Add("Status", Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsInterruptcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Calls A list of calls associated with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>string</returns>
        public string CallsListcalls (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = CallsListcallsWithHttpInfo(page, pageSize, to, from, dateCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Calls A list of calls associated with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsListcallsWithHttpInfo (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null)
        {

            var localVarPath = "/calls/listcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("DateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsListcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Calls A list of calls associated with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsListcallsAsync (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = await CallsListcallsAsyncWithHttpInfo(page, pageSize, to, from, dateCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Calls A list of calls associated with your Ytel account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="to">Filter calls that were sent to this 10-digit number (E.164 format). (optional)</param>
        /// <param name="from">Filter calls that were sent from this 10-digit number (E.164 format). (optional)</param>
        /// <param name="dateCreated">Return calls that are from a specified date. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsListcallsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string to = null, string from = null, string dateCreated = null)
        {

            var localVarPath = "/calls/listcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("DateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsListcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Make Call You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>string</returns>
        public string CallsMakecall (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null)
        {
             ApiResponse<string> localVarResponse = CallsMakecallWithHttpInfo(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, ifMachine, ifMachineUrl, ifMachineMethod, feedback, surveyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make Call You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsMakecallWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsMakecall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsMakecall");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallApi->CallsMakecall");

            var localVarPath = "/calls/makecall.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallBackUrl != null) localVarFormParams.Add("FallBackUrl", Configuration.ApiClient.ParameterToString(fallBackUrl)); // form parameter
            if (fallBackMethod != null) localVarFormParams.Add("FallBackMethod", Configuration.ApiClient.ParameterToString(fallBackMethod)); // form parameter
            if (heartBeatUrl != null) localVarFormParams.Add("HeartBeatUrl", Configuration.ApiClient.ParameterToString(heartBeatUrl)); // form parameter
            if (heartBeatMethod != null) localVarFormParams.Add("HeartBeatMethod", Configuration.ApiClient.ParameterToString(heartBeatMethod)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (hideCallerId != null) localVarFormParams.Add("HideCallerId", Configuration.ApiClient.ParameterToString(hideCallerId)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (transcribe != null) localVarFormParams.Add("Transcribe", Configuration.ApiClient.ParameterToString(transcribe)); // form parameter
            if (transcribeCallBackUrl != null) localVarFormParams.Add("TranscribeCallBackUrl", Configuration.ApiClient.ParameterToString(transcribeCallBackUrl)); // form parameter
            if (ifMachine != null) localVarFormParams.Add("IfMachine", Configuration.ApiClient.ParameterToString(ifMachine)); // form parameter
            if (ifMachineUrl != null) localVarFormParams.Add("IfMachineUrl", Configuration.ApiClient.ParameterToString(ifMachineUrl)); // form parameter
            if (ifMachineMethod != null) localVarFormParams.Add("IfMachineMethod", Configuration.ApiClient.ParameterToString(ifMachineMethod)); // form parameter
            if (feedback != null) localVarFormParams.Add("Feedback", Configuration.ApiClient.ParameterToString(feedback)); // form parameter
            if (surveyId != null) localVarFormParams.Add("SurveyId", Configuration.ApiClient.ParameterToString(surveyId)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsMakecall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Make Call You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsMakecallAsync (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null)
        {
             ApiResponse<string> localVarResponse = await CallsMakecallAsyncWithHttpInfo(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, ifMachine, ifMachineUrl, ifMachineMethod, feedback, surveyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make Call You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">To number</param>
        /// <param name="url">URL requested once the call connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallBackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallBackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="heartBeatUrl">URL that can be requested every 60 seconds during the call to notify of elapsed tim (optional)</param>
        /// <param name="heartBeatMethod">Specifies the HTTP method used to request HeartbeatUrl. (optional)</param>
        /// <param name="timeout">Time (in seconds) Ytel should wait while the call is ringing before canceling the call (optional)</param>
        /// <param name="playDtmf">DTMF Digits to play to the call once it connects. 0-9, #, or * (optional)</param>
        /// <param name="hideCallerId">Specifies if the caller id will be hidden (optional)</param>
        /// <param name="record">Specifies if the call should be recorded (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion (optional)</param>
        /// <param name="recordCallBackMethod">Method used to request the RecordCallback URL. (optional)</param>
        /// <param name="transcribe">Specifies if the call recording should be transcribed (optional)</param>
        /// <param name="transcribeCallBackUrl">Transcription parameters will be sent here upon completion (optional)</param>
        /// <param name="ifMachine">How Ytel should handle the receiving numbers voicemail machine (optional)</param>
        /// <param name="ifMachineUrl">URL requested when IfMachine&#x3D;continue (optional)</param>
        /// <param name="ifMachineMethod">Method used to request the IfMachineUrl. (optional)</param>
        /// <param name="feedback">Specify if survey should be enable or not (optional)</param>
        /// <param name="surveyId">The unique identifier for the survey. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsMakecallAsyncWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallBackUrl = null, string fallBackMethod = null, string heartBeatUrl = null, string heartBeatMethod = null, int? timeout = null, string playDtmf = null, bool? hideCallerId = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, bool? transcribe = null, string transcribeCallBackUrl = null, string ifMachine = null, string ifMachineUrl = null, string ifMachineMethod = null, bool? feedback = null, string surveyId = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsMakecall");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsMakecall");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling CallApi->CallsMakecall");

            var localVarPath = "/calls/makecall.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (url != null) localVarFormParams.Add("Url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallBackUrl != null) localVarFormParams.Add("FallBackUrl", Configuration.ApiClient.ParameterToString(fallBackUrl)); // form parameter
            if (fallBackMethod != null) localVarFormParams.Add("FallBackMethod", Configuration.ApiClient.ParameterToString(fallBackMethod)); // form parameter
            if (heartBeatUrl != null) localVarFormParams.Add("HeartBeatUrl", Configuration.ApiClient.ParameterToString(heartBeatUrl)); // form parameter
            if (heartBeatMethod != null) localVarFormParams.Add("HeartBeatMethod", Configuration.ApiClient.ParameterToString(heartBeatMethod)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (hideCallerId != null) localVarFormParams.Add("HideCallerId", Configuration.ApiClient.ParameterToString(hideCallerId)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (transcribe != null) localVarFormParams.Add("Transcribe", Configuration.ApiClient.ParameterToString(transcribe)); // form parameter
            if (transcribeCallBackUrl != null) localVarFormParams.Add("TranscribeCallBackUrl", Configuration.ApiClient.ParameterToString(transcribeCallBackUrl)); // form parameter
            if (ifMachine != null) localVarFormParams.Add("IfMachine", Configuration.ApiClient.ParameterToString(ifMachine)); // form parameter
            if (ifMachineUrl != null) localVarFormParams.Add("IfMachineUrl", Configuration.ApiClient.ParameterToString(ifMachineUrl)); // form parameter
            if (ifMachineMethod != null) localVarFormParams.Add("IfMachineMethod", Configuration.ApiClient.ParameterToString(ifMachineMethod)); // form parameter
            if (feedback != null) localVarFormParams.Add("Feedback", Configuration.ApiClient.ParameterToString(feedback)); // form parameter
            if (surveyId != null) localVarFormParams.Add("SurveyId", Configuration.ApiClient.ParameterToString(surveyId)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsMakecall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send RVM Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>string</returns>
        public string CallsMakervm (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null)
        {
             ApiResponse<string> localVarResponse = CallsMakervmWithHttpInfo(from, rVMCallerId, to, voiceMailURL, method, statusCallBackUrl, statsCallBackMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send RVM Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsMakervmWithHttpInfo (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsMakervm");
            // verify the required parameter 'rVMCallerId' is set
            if (rVMCallerId == null)
                throw new ApiException(400, "Missing required parameter 'rVMCallerId' when calling CallApi->CallsMakervm");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsMakervm");
            // verify the required parameter 'voiceMailURL' is set
            if (voiceMailURL == null)
                throw new ApiException(400, "Missing required parameter 'voiceMailURL' when calling CallApi->CallsMakervm");

            var localVarPath = "/calls/makervm.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (rVMCallerId != null) localVarFormParams.Add("RVMCallerId", Configuration.ApiClient.ParameterToString(rVMCallerId)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (voiceMailURL != null) localVarFormParams.Add("VoiceMailURL", Configuration.ApiClient.ParameterToString(voiceMailURL)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statsCallBackMethod != null) localVarFormParams.Add("StatsCallBackMethod", Configuration.ApiClient.ParameterToString(statsCallBackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsMakervm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send RVM Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsMakervmAsync (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null)
        {
             ApiResponse<string> localVarResponse = await CallsMakervmAsyncWithHttpInfo(from, rVMCallerId, to, voiceMailURL, method, statusCallBackUrl, statsCallBackMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send RVM Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to GET)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="statsCallBackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsMakervmAsyncWithHttpInfo (string from, string rVMCallerId, string to, string voiceMailURL, string method = null, string statusCallBackUrl = null, string statsCallBackMethod = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling CallApi->CallsMakervm");
            // verify the required parameter 'rVMCallerId' is set
            if (rVMCallerId == null)
                throw new ApiException(400, "Missing required parameter 'rVMCallerId' when calling CallApi->CallsMakervm");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling CallApi->CallsMakervm");
            // verify the required parameter 'voiceMailURL' is set
            if (voiceMailURL == null)
                throw new ApiException(400, "Missing required parameter 'voiceMailURL' when calling CallApi->CallsMakervm");

            var localVarPath = "/calls/makervm.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (rVMCallerId != null) localVarFormParams.Add("RVMCallerId", Configuration.ApiClient.ParameterToString(rVMCallerId)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (voiceMailURL != null) localVarFormParams.Add("VoiceMailURL", Configuration.ApiClient.ParameterToString(voiceMailURL)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statsCallBackMethod != null) localVarFormParams.Add("StatsCallBackMethod", Configuration.ApiClient.ParameterToString(statsCallBackMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsMakervm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play Audio Play Audio from a url
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>string</returns>
        public string CallsPlayaudios (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null)
        {
             ApiResponse<string> localVarResponse = CallsPlayaudiosWithHttpInfo(callSid, audioUrl, sayText, length, direction, mix);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play Audio Play Audio from a url
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsPlayaudiosWithHttpInfo (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsPlayaudios");
            // verify the required parameter 'audioUrl' is set
            if (audioUrl == null)
                throw new ApiException(400, "Missing required parameter 'audioUrl' when calling CallApi->CallsPlayaudios");
            // verify the required parameter 'sayText' is set
            if (sayText == null)
                throw new ApiException(400, "Missing required parameter 'sayText' when calling CallApi->CallsPlayaudios");

            var localVarPath = "/calls/playaudios.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (audioUrl != null) localVarFormParams.Add("AudioUrl", Configuration.ApiClient.ParameterToString(audioUrl)); // form parameter
            if (sayText != null) localVarFormParams.Add("SayText", Configuration.ApiClient.ParameterToString(sayText)); // form parameter
            if (length != null) localVarFormParams.Add("Length", Configuration.ApiClient.ParameterToString(length)); // form parameter
            if (direction != null) localVarFormParams.Add("Direction", Configuration.ApiClient.ParameterToString(direction)); // form parameter
            if (mix != null) localVarFormParams.Add("Mix", Configuration.ApiClient.ParameterToString(mix)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsPlayaudios", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play Audio Play Audio from a url
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsPlayaudiosAsync (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null)
        {
             ApiResponse<string> localVarResponse = await CallsPlayaudiosAsyncWithHttpInfo(callSid, audioUrl, sayText, length, direction, mix);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play Audio Play Audio from a url
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="audioUrl">URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Time limit in seconds for audio play back (optional)</param>
        /// <param name="direction">The leg of the call audio will be played to (optional)</param>
        /// <param name="mix">If false, all other audio will be muted (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsPlayaudiosAsyncWithHttpInfo (string callSid, string audioUrl, string sayText, int? length = null, string direction = null, bool? mix = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsPlayaudios");
            // verify the required parameter 'audioUrl' is set
            if (audioUrl == null)
                throw new ApiException(400, "Missing required parameter 'audioUrl' when calling CallApi->CallsPlayaudios");
            // verify the required parameter 'sayText' is set
            if (sayText == null)
                throw new ApiException(400, "Missing required parameter 'sayText' when calling CallApi->CallsPlayaudios");

            var localVarPath = "/calls/playaudios.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (audioUrl != null) localVarFormParams.Add("AudioUrl", Configuration.ApiClient.ParameterToString(audioUrl)); // form parameter
            if (sayText != null) localVarFormParams.Add("SayText", Configuration.ApiClient.ParameterToString(sayText)); // form parameter
            if (length != null) localVarFormParams.Add("Length", Configuration.ApiClient.ParameterToString(length)); // form parameter
            if (direction != null) localVarFormParams.Add("Direction", Configuration.ApiClient.ParameterToString(direction)); // form parameter
            if (mix != null) localVarFormParams.Add("Mix", Configuration.ApiClient.ParameterToString(mix)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsPlayaudios", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Record Call Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>string</returns>
        public string CallsRecordcalls (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null)
        {
             ApiResponse<string> localVarResponse = CallsRecordcallsWithHttpInfo(callSid, record, direction, timeLimit, callBackUrl, fileformat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Record Call Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsRecordcallsWithHttpInfo (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsRecordcalls");
            // verify the required parameter 'record' is set
            if (record == null)
                throw new ApiException(400, "Missing required parameter 'record' when calling CallApi->CallsRecordcalls");

            var localVarPath = "/calls/recordcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (direction != null) localVarFormParams.Add("Direction", Configuration.ApiClient.ParameterToString(direction)); // form parameter
            if (timeLimit != null) localVarFormParams.Add("TimeLimit", Configuration.ApiClient.ParameterToString(timeLimit)); // form parameter
            if (callBackUrl != null) localVarFormParams.Add("CallBackUrl", Configuration.ApiClient.ParameterToString(callBackUrl)); // form parameter
            if (fileformat != null) localVarFormParams.Add("Fileformat", Configuration.ApiClient.ParameterToString(fileformat)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsRecordcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Record Call Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsRecordcallsAsync (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null)
        {
             ApiResponse<string> localVarResponse = await CallsRecordcallsAsyncWithHttpInfo(callSid, record, direction, timeLimit, callBackUrl, fileformat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Record Call Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="record">Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">The leg of the call to record (optional)</param>
        /// <param name="timeLimit">Time in seconds the recording duration should not exceed (optional)</param>
        /// <param name="callBackUrl">URL consulted after the recording completes (optional)</param>
        /// <param name="fileformat">Format of the recording file. Can be .mp3 or .wav (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsRecordcallsAsyncWithHttpInfo (string callSid, bool? record, string direction = null, int? timeLimit = null, string callBackUrl = null, string fileformat = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsRecordcalls");
            // verify the required parameter 'record' is set
            if (record == null)
                throw new ApiException(400, "Missing required parameter 'record' when calling CallApi->CallsRecordcalls");

            var localVarPath = "/calls/recordcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (direction != null) localVarFormParams.Add("Direction", Configuration.ApiClient.ParameterToString(direction)); // form parameter
            if (timeLimit != null) localVarFormParams.Add("TimeLimit", Configuration.ApiClient.ParameterToString(timeLimit)); // form parameter
            if (callBackUrl != null) localVarFormParams.Add("CallBackUrl", Configuration.ApiClient.ParameterToString(callBackUrl)); // form parameter
            if (fileformat != null) localVarFormParams.Add("Fileformat", Configuration.ApiClient.ParameterToString(fileformat)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsRecordcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play DTMF Play Dtmf and send the Digit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>string</returns>
        public string CallsSenddigits (string callSid, string playDtmf, string playDtmfDirection = null)
        {
             ApiResponse<string> localVarResponse = CallsSenddigitsWithHttpInfo(callSid, playDtmf, playDtmfDirection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play DTMF Play Dtmf and send the Digit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsSenddigitsWithHttpInfo (string callSid, string playDtmf, string playDtmfDirection = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsSenddigits");
            // verify the required parameter 'playDtmf' is set
            if (playDtmf == null)
                throw new ApiException(400, "Missing required parameter 'playDtmf' when calling CallApi->CallsSenddigits");

            var localVarPath = "/calls/senddigits.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (playDtmfDirection != null) localVarFormParams.Add("PlayDtmfDirection", Configuration.ApiClient.ParameterToString(playDtmfDirection)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsSenddigits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play DTMF Play Dtmf and send the Digit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsSenddigitsAsync (string callSid, string playDtmf, string playDtmfDirection = null)
        {
             ApiResponse<string> localVarResponse = await CallsSenddigitsAsyncWithHttpInfo(callSid, playDtmf, playDtmfDirection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play DTMF Play Dtmf and send the Digit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier of each call resource</param>
        /// <param name="playDtmf">DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">The leg of the call DTMF digits should be sent to (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsSenddigitsAsyncWithHttpInfo (string callSid, string playDtmf, string playDtmfDirection = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsSenddigits");
            // verify the required parameter 'playDtmf' is set
            if (playDtmf == null)
                throw new ApiException(400, "Missing required parameter 'playDtmf' when calling CallApi->CallsSenddigits");

            var localVarPath = "/calls/senddigits.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (playDtmf != null) localVarFormParams.Add("PlayDtmf", Configuration.ApiClient.ParameterToString(playDtmf)); // form parameter
            if (playDtmfDirection != null) localVarFormParams.Add("PlayDtmfDirection", Configuration.ApiClient.ParameterToString(playDtmfDirection)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsSenddigits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>string</returns>
        public string CallsViewcalldetail (string callSid)
        {
             ApiResponse<string> localVarResponse = CallsViewcalldetailWithHttpInfo(callSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsViewcalldetailWithHttpInfo (string callSid)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsViewcalldetail");

            var localVarPath = "/calls/viewcalldetail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("callSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsViewcalldetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsViewcalldetailAsync (string callSid)
        {
             ApiResponse<string> localVarResponse = await CallsViewcalldetailAsyncWithHttpInfo(callSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the voice call.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsViewcalldetailAsyncWithHttpInfo (string callSid)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsViewcalldetail");

            var localVarPath = "/calls/viewcalldetail.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("callSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsViewcalldetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>string</returns>
        public string CallsViewcalls (string callsid)
        {
             ApiResponse<string> localVarResponse = CallsViewcallsWithHttpInfo(callsid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsViewcallsWithHttpInfo (string callsid)
        {
            // verify the required parameter 'callsid' is set
            if (callsid == null)
                throw new ApiException(400, "Missing required parameter 'callsid' when calling CallApi->CallsViewcalls");

            var localVarPath = "/calls/viewcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callsid != null) localVarFormParams.Add("callsid", Configuration.ApiClient.ParameterToString(callsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsViewcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsViewcallsAsync (string callsid)
        {
             ApiResponse<string> localVarResponse = await CallsViewcallsAsyncWithHttpInfo(callsid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Call Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callsid">The unique identifier for the voice call.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsViewcallsAsyncWithHttpInfo (string callsid)
        {
            // verify the required parameter 'callsid' is set
            if (callsid == null)
                throw new ApiException(400, "Missing required parameter 'callsid' when calling CallApi->CallsViewcalls");

            var localVarPath = "/calls/viewcalls.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callsid != null) localVarFormParams.Add("callsid", Configuration.ApiClient.ParameterToString(callsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsViewcalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Voice Effect Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>string</returns>
        public string CallsVoiceeffect (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null)
        {
             ApiResponse<string> localVarResponse = CallsVoiceeffectWithHttpInfo(callSid, audioDirection, pitchSemiTones, pitchOctaves, pitch, rate, tempo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Voice Effect Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CallsVoiceeffectWithHttpInfo (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsVoiceeffect");

            var localVarPath = "/calls/voiceeffect.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (audioDirection != null) localVarFormParams.Add("AudioDirection", Configuration.ApiClient.ParameterToString(audioDirection)); // form parameter
            if (pitchSemiTones != null) localVarFormParams.Add("PitchSemiTones", Configuration.ApiClient.ParameterToString(pitchSemiTones)); // form parameter
            if (pitchOctaves != null) localVarFormParams.Add("PitchOctaves", Configuration.ApiClient.ParameterToString(pitchOctaves)); // form parameter
            if (pitch != null) localVarFormParams.Add("Pitch", Configuration.ApiClient.ParameterToString(pitch)); // form parameter
            if (rate != null) localVarFormParams.Add("Rate", Configuration.ApiClient.ParameterToString(rate)); // form parameter
            if (tempo != null) localVarFormParams.Add("Tempo", Configuration.ApiClient.ParameterToString(tempo)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsVoiceeffect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Voice Effect Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CallsVoiceeffectAsync (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null)
        {
             ApiResponse<string> localVarResponse = await CallsVoiceeffectAsyncWithHttpInfo(callSid, audioDirection, pitchSemiTones, pitchOctaves, pitch, rate, tempo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Voice Effect Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callSid">The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream. (optional)</param>
        /// <param name="pitchSemiTones">Set the pitch in semitone (half-step) intervals. Value between -14 and 14 (optional)</param>
        /// <param name="pitchOctaves">Set the pitch in octave intervals.. Value between -1 and 1 (optional)</param>
        /// <param name="pitch">Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0 (optional)</param>
        /// <param name="rate">Set the rate for audio. The lower the value, the lower the rate. value greater than 0 (optional)</param>
        /// <param name="tempo">Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0 (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CallsVoiceeffectAsyncWithHttpInfo (string callSid, string audioDirection = null, double? pitchSemiTones = null, double? pitchOctaves = null, double? pitch = null, double? rate = null, double? tempo = null)
        {
            // verify the required parameter 'callSid' is set
            if (callSid == null)
                throw new ApiException(400, "Missing required parameter 'callSid' when calling CallApi->CallsVoiceeffect");

            var localVarPath = "/calls/voiceeffect.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callSid != null) localVarFormParams.Add("CallSid", Configuration.ApiClient.ParameterToString(callSid)); // form parameter
            if (audioDirection != null) localVarFormParams.Add("AudioDirection", Configuration.ApiClient.ParameterToString(audioDirection)); // form parameter
            if (pitchSemiTones != null) localVarFormParams.Add("PitchSemiTones", Configuration.ApiClient.ParameterToString(pitchSemiTones)); // form parameter
            if (pitchOctaves != null) localVarFormParams.Add("PitchOctaves", Configuration.ApiClient.ParameterToString(pitchOctaves)); // form parameter
            if (pitch != null) localVarFormParams.Add("Pitch", Configuration.ApiClient.ParameterToString(pitch)); // form parameter
            if (rate != null) localVarFormParams.Add("Rate", Configuration.ApiClient.ParameterToString(rate)); // form parameter
            if (tempo != null) localVarFormParams.Add("Tempo", Configuration.ApiClient.ParameterToString(tempo)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallsVoiceeffect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
