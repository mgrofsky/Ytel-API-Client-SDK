/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Transcribe Audio URL
        /// </summary>
        /// <remarks>
        /// Transcribe an audio recording from a file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>string</returns>
        string TranscriptionsAudiourltranscription (string audiourl);

        /// <summary>
        /// Transcribe Audio URL
        /// </summary>
        /// <remarks>
        /// Transcribe an audio recording from a file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TranscriptionsAudiourltranscriptionWithHttpInfo (string audiourl);
        /// <summary>
        /// List Transcriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transcription objects for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>string</returns>
        string TranscriptionsListtranscription (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null);

        /// <summary>
        /// List Transcriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transcription objects for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TranscriptionsListtranscriptionWithHttpInfo (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null);
        /// <summary>
        /// Transcribe Recording
        /// </summary>
        /// <remarks>
        /// Transcribe a recording by its RecordingSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>string</returns>
        string TranscriptionsRecordingtranscription (string recordingSid);

        /// <summary>
        /// Transcribe Recording
        /// </summary>
        /// <remarks>
        /// Transcribe a recording by its RecordingSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TranscriptionsRecordingtranscriptionWithHttpInfo (string recordingSid);
        /// <summary>
        /// View Transcription
        /// </summary>
        /// <remarks>
        /// Retrieve information about a transaction by its TranscriptionSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>string</returns>
        string TranscriptionsViewtranscription (string transcriptionsid);

        /// <summary>
        /// View Transcription
        /// </summary>
        /// <remarks>
        /// Retrieve information about a transaction by its TranscriptionSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TranscriptionsViewtranscriptionWithHttpInfo (string transcriptionsid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Transcribe Audio URL
        /// </summary>
        /// <remarks>
        /// Transcribe an audio recording from a file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TranscriptionsAudiourltranscriptionAsync (string audiourl);

        /// <summary>
        /// Transcribe Audio URL
        /// </summary>
        /// <remarks>
        /// Transcribe an audio recording from a file.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsAudiourltranscriptionAsyncWithHttpInfo (string audiourl);
        /// <summary>
        /// List Transcriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transcription objects for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TranscriptionsListtranscriptionAsync (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null);

        /// <summary>
        /// List Transcriptions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transcription objects for your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsListtranscriptionAsyncWithHttpInfo (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null);
        /// <summary>
        /// Transcribe Recording
        /// </summary>
        /// <remarks>
        /// Transcribe a recording by its RecordingSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TranscriptionsRecordingtranscriptionAsync (string recordingSid);

        /// <summary>
        /// Transcribe Recording
        /// </summary>
        /// <remarks>
        /// Transcribe a recording by its RecordingSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsRecordingtranscriptionAsyncWithHttpInfo (string recordingSid);
        /// <summary>
        /// View Transcription
        /// </summary>
        /// <remarks>
        /// Retrieve information about a transaction by its TranscriptionSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TranscriptionsViewtranscriptionAsync (string transcriptionsid);

        /// <summary>
        /// View Transcription
        /// </summary>
        /// <remarks>
        /// Retrieve information about a transaction by its TranscriptionSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsViewtranscriptionAsyncWithHttpInfo (string transcriptionsid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TranscriptionApi : ITranscriptionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranscriptionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TranscriptionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Transcribe Audio URL Transcribe an audio recording from a file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>string</returns>
        public string TranscriptionsAudiourltranscription (string audiourl)
        {
             ApiResponse<string> localVarResponse = TranscriptionsAudiourltranscriptionWithHttpInfo(audiourl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transcribe Audio URL Transcribe an audio recording from a file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TranscriptionsAudiourltranscriptionWithHttpInfo (string audiourl)
        {
            // verify the required parameter 'audiourl' is set
            if (audiourl == null)
                throw new ApiException(400, "Missing required parameter 'audiourl' when calling TranscriptionApi->TranscriptionsAudiourltranscription");

            var localVarPath = "/transcriptions/audiourltranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audiourl != null) localVarFormParams.Add("audiourl", Configuration.ApiClient.ParameterToString(audiourl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsAudiourltranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transcribe Audio URL Transcribe an audio recording from a file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TranscriptionsAudiourltranscriptionAsync (string audiourl)
        {
             ApiResponse<string> localVarResponse = await TranscriptionsAudiourltranscriptionAsyncWithHttpInfo(audiourl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transcribe Audio URL Transcribe an audio recording from a file.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audiourl">URL pointing to the location of the audio file that is to be transcribed.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsAudiourltranscriptionAsyncWithHttpInfo (string audiourl)
        {
            // verify the required parameter 'audiourl' is set
            if (audiourl == null)
                throw new ApiException(400, "Missing required parameter 'audiourl' when calling TranscriptionApi->TranscriptionsAudiourltranscription");

            var localVarPath = "/transcriptions/audiourltranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (audiourl != null) localVarFormParams.Add("audiourl", Configuration.ApiClient.ParameterToString(audiourl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsAudiourltranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Transcriptions Retrieve a list of transcription objects for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>string</returns>
        public string TranscriptionsListtranscription (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null)
        {
             ApiResponse<string> localVarResponse = TranscriptionsListtranscriptionWithHttpInfo(page, pagesize, status, dateTranscribed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Transcriptions Retrieve a list of transcription objects for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TranscriptionsListtranscriptionWithHttpInfo (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null)
        {

            var localVarPath = "/transcriptions/listtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (dateTranscribed != null) localVarFormParams.Add("dateTranscribed", Configuration.ApiClient.ParameterToString(dateTranscribed)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsListtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Transcriptions Retrieve a list of transcription objects for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TranscriptionsListtranscriptionAsync (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null)
        {
             ApiResponse<string> localVarResponse = await TranscriptionsListtranscriptionAsyncWithHttpInfo(page, pagesize, status, dateTranscribed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Transcriptions Retrieve a list of transcription objects for your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="status">The state of the transcription. (optional)</param>
        /// <param name="dateTranscribed">The date the transcription took place. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsListtranscriptionAsyncWithHttpInfo (int? page = null, int? pagesize = null, string status = null, string dateTranscribed = null)
        {

            var localVarPath = "/transcriptions/listtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (dateTranscribed != null) localVarFormParams.Add("dateTranscribed", Configuration.ApiClient.ParameterToString(dateTranscribed)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsListtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transcribe Recording Transcribe a recording by its RecordingSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>string</returns>
        public string TranscriptionsRecordingtranscription (string recordingSid)
        {
             ApiResponse<string> localVarResponse = TranscriptionsRecordingtranscriptionWithHttpInfo(recordingSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transcribe Recording Transcribe a recording by its RecordingSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TranscriptionsRecordingtranscriptionWithHttpInfo (string recordingSid)
        {
            // verify the required parameter 'recordingSid' is set
            if (recordingSid == null)
                throw new ApiException(400, "Missing required parameter 'recordingSid' when calling TranscriptionApi->TranscriptionsRecordingtranscription");

            var localVarPath = "/transcriptions/recordingtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingSid != null) localVarFormParams.Add("recordingSid", Configuration.ApiClient.ParameterToString(recordingSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsRecordingtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transcribe Recording Transcribe a recording by its RecordingSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TranscriptionsRecordingtranscriptionAsync (string recordingSid)
        {
             ApiResponse<string> localVarResponse = await TranscriptionsRecordingtranscriptionAsyncWithHttpInfo(recordingSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transcribe Recording Transcribe a recording by its RecordingSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingSid">The unique identifier for a recording object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsRecordingtranscriptionAsyncWithHttpInfo (string recordingSid)
        {
            // verify the required parameter 'recordingSid' is set
            if (recordingSid == null)
                throw new ApiException(400, "Missing required parameter 'recordingSid' when calling TranscriptionApi->TranscriptionsRecordingtranscription");

            var localVarPath = "/transcriptions/recordingtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordingSid != null) localVarFormParams.Add("recordingSid", Configuration.ApiClient.ParameterToString(recordingSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsRecordingtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Transcription Retrieve information about a transaction by its TranscriptionSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>string</returns>
        public string TranscriptionsViewtranscription (string transcriptionsid)
        {
             ApiResponse<string> localVarResponse = TranscriptionsViewtranscriptionWithHttpInfo(transcriptionsid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Transcription Retrieve information about a transaction by its TranscriptionSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TranscriptionsViewtranscriptionWithHttpInfo (string transcriptionsid)
        {
            // verify the required parameter 'transcriptionsid' is set
            if (transcriptionsid == null)
                throw new ApiException(400, "Missing required parameter 'transcriptionsid' when calling TranscriptionApi->TranscriptionsViewtranscription");

            var localVarPath = "/transcriptions/viewtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transcriptionsid != null) localVarFormParams.Add("transcriptionsid", Configuration.ApiClient.ParameterToString(transcriptionsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsViewtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Transcription Retrieve information about a transaction by its TranscriptionSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TranscriptionsViewtranscriptionAsync (string transcriptionsid)
        {
             ApiResponse<string> localVarResponse = await TranscriptionsViewtranscriptionAsyncWithHttpInfo(transcriptionsid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Transcription Retrieve information about a transaction by its TranscriptionSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transcriptionsid">The unique identifier for a transcription object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TranscriptionsViewtranscriptionAsyncWithHttpInfo (string transcriptionsid)
        {
            // verify the required parameter 'transcriptionsid' is set
            if (transcriptionsid == null)
                throw new ApiException(400, "Missing required parameter 'transcriptionsid' when calling TranscriptionApi->TranscriptionsViewtranscription");

            var localVarPath = "/transcriptions/viewtranscription.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transcriptionsid != null) localVarFormParams.Add("transcriptionsid", Configuration.ApiClient.ParameterToString(transcriptionsid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscriptionsViewtranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
