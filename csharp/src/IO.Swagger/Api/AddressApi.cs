/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>string</returns>
        string AddressCreateaddress (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null);

        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressCreateaddressWithHttpInfo (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null);
        /// <summary>
        /// Delete Address
        /// </summary>
        /// <remarks>
        /// To delete Address to your address book
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>string</returns>
        string AddressDeleteaddress (string addressid);

        /// <summary>
        /// Delete Address
        /// </summary>
        /// <remarks>
        /// To delete Address to your address book
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressDeleteaddressWithHttpInfo (string addressid);
        /// <summary>
        /// List Addresses
        /// </summary>
        /// <remarks>
        /// List All Address 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>string</returns>
        string AddressListaddress (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null);

        /// <summary>
        /// List Addresses
        /// </summary>
        /// <remarks>
        /// List All Address 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressListaddressWithHttpInfo (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null);
        /// <summary>
        /// Verify Address
        /// </summary>
        /// <remarks>
        /// Validates an address given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>string</returns>
        string AddressVerifyaddress (string addressid);

        /// <summary>
        /// Verify Address
        /// </summary>
        /// <remarks>
        /// Validates an address given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressVerifyaddressWithHttpInfo (string addressid);
        /// <summary>
        /// View Address
        /// </summary>
        /// <remarks>
        /// View Address Specific address Book by providing the address id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>string</returns>
        string AddressViewaddress (string addressid);

        /// <summary>
        /// View Address
        /// </summary>
        /// <remarks>
        /// View Address Specific address Book by providing the address id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddressViewaddressWithHttpInfo (string addressid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressCreateaddressAsync (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null);

        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressCreateaddressAsyncWithHttpInfo (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null);
        /// <summary>
        /// Delete Address
        /// </summary>
        /// <remarks>
        /// To delete Address to your address book
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressDeleteaddressAsync (string addressid);

        /// <summary>
        /// Delete Address
        /// </summary>
        /// <remarks>
        /// To delete Address to your address book
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressDeleteaddressAsyncWithHttpInfo (string addressid);
        /// <summary>
        /// List Addresses
        /// </summary>
        /// <remarks>
        /// List All Address 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressListaddressAsync (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null);

        /// <summary>
        /// List Addresses
        /// </summary>
        /// <remarks>
        /// List All Address 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressListaddressAsyncWithHttpInfo (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null);
        /// <summary>
        /// Verify Address
        /// </summary>
        /// <remarks>
        /// Validates an address given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressVerifyaddressAsync (string addressid);

        /// <summary>
        /// Verify Address
        /// </summary>
        /// <remarks>
        /// Validates an address given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressVerifyaddressAsyncWithHttpInfo (string addressid);
        /// <summary>
        /// View Address
        /// </summary>
        /// <remarks>
        /// View Address Specific address Book by providing the address id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddressViewaddressAsync (string addressid);

        /// <summary>
        /// View Address
        /// </summary>
        /// <remarks>
        /// View Address Specific address Book by providing the address id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddressViewaddressAsyncWithHttpInfo (string addressid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressApi : IAddressApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Address To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>string</returns>
        public string AddressCreateaddress (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null)
        {
             ApiResponse<string> localVarResponse = AddressCreateaddressWithHttpInfo(name, address, country, state, city, zip, description, email, phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Address To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddressCreateaddressWithHttpInfo (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling AddressApi->AddressCreateaddress");

            var localVarPath = "/address/createaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("Name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (address != null) localVarFormParams.Add("Address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (country != null) localVarFormParams.Add("Country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (state != null) localVarFormParams.Add("State", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("City", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("Zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (description != null) localVarFormParams.Add("Description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phone != null) localVarFormParams.Add("Phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCreateaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Address To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressCreateaddressAsync (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null)
        {
             ApiResponse<string> localVarResponse = await AddressCreateaddressAsyncWithHttpInfo(name, address, country, state, city, zip, description, email, phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Address To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of user</param>
        /// <param name="address">Address of user.</param>
        /// <param name="country">Must be a 2 letter country short-name code (ISO 3166)</param>
        /// <param name="state">Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.</param>
        /// <param name="city">City Name.</param>
        /// <param name="zip">Zip code of city.</param>
        /// <param name="description">Description of addresses. (optional)</param>
        /// <param name="email">Email Id of user. (optional)</param>
        /// <param name="phone">Phone number of user. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddressCreateaddressAsyncWithHttpInfo (string name, string address, string country, string state, string city, string zip, string description = null, string email = null, string phone = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling AddressApi->AddressCreateaddress");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling AddressApi->AddressCreateaddress");

            var localVarPath = "/address/createaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("Name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (address != null) localVarFormParams.Add("Address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (country != null) localVarFormParams.Add("Country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (state != null) localVarFormParams.Add("State", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("City", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("Zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (description != null) localVarFormParams.Add("Description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (phone != null) localVarFormParams.Add("Phone", Configuration.ApiClient.ParameterToString(phone)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCreateaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Address To delete Address to your address book
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>string</returns>
        public string AddressDeleteaddress (string addressid)
        {
             ApiResponse<string> localVarResponse = AddressDeleteaddressWithHttpInfo(addressid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Address To delete Address to your address book
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddressDeleteaddressWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressDeleteaddress");

            var localVarPath = "/address/deleteaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressDeleteaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Address To delete Address to your address book
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressDeleteaddressAsync (string addressid)
        {
             ApiResponse<string> localVarResponse = await AddressDeleteaddressAsyncWithHttpInfo(addressid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Address To delete Address to your address book
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be deleted.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddressDeleteaddressAsyncWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressDeleteaddress");

            var localVarPath = "/address/deleteaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressDeleteaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Addresses List All Address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>string</returns>
        public string AddressListaddress (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = AddressListaddressWithHttpInfo(page, pagesize, addressid, dateCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Addresses List All Address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddressListaddressWithHttpInfo (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null)
        {

            var localVarPath = "/address/listaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressListaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Addresses List All Address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressListaddressAsync (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = await AddressListaddressAsyncWithHttpInfo(page, pagesize, addressid, dateCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Addresses List All Address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">How many results to return, default is 10, max is 100, must be an integer (optional, default to 10)</param>
        /// <param name="addressid">addresses Sid (optional)</param>
        /// <param name="dateCreated">date created address. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddressListaddressAsyncWithHttpInfo (int? page = null, int? pagesize = null, string addressid = null, string dateCreated = null)
        {

            var localVarPath = "/address/listaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("dateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressListaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Verify Address Validates an address given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>string</returns>
        public string AddressVerifyaddress (string addressid)
        {
             ApiResponse<string> localVarResponse = AddressVerifyaddressWithHttpInfo(addressid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Address Validates an address given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddressVerifyaddressWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressVerifyaddress");

            var localVarPath = "/address/verifyaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressVerifyaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Verify Address Validates an address given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressVerifyaddressAsync (string addressid)
        {
             ApiResponse<string> localVarResponse = await AddressVerifyaddressAsyncWithHttpInfo(addressid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Address Validates an address given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be verified.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddressVerifyaddressAsyncWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressVerifyaddress");

            var localVarPath = "/address/verifyaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressVerifyaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Address View Address Specific address Book by providing the address id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>string</returns>
        public string AddressViewaddress (string addressid)
        {
             ApiResponse<string> localVarResponse = AddressViewaddressWithHttpInfo(addressid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Address View Address Specific address Book by providing the address id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddressViewaddressWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressViewaddress");

            var localVarPath = "/address/viewaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressViewaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Address View Address Specific address Book by providing the address id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddressViewaddressAsync (string addressid)
        {
             ApiResponse<string> localVarResponse = await AddressViewaddressAsyncWithHttpInfo(addressid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Address View Address Specific address Book by providing the address id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressid">The identifier of the address to be retrieved.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddressViewaddressAsyncWithHttpInfo (string addressid)
        {
            // verify the required parameter 'addressid' is set
            if (addressid == null)
                throw new ApiException(400, "Missing required parameter 'addressid' when calling AddressApi->AddressViewaddress");

            var localVarPath = "/address/viewaddress.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addressid != null) localVarFormParams.Add("addressid", Configuration.ApiClient.ParameterToString(addressid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressViewaddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
