/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShortCodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>string</returns>
        string DedicatedshortcodeGetinboundsms (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DedicatedshortcodeGetinboundsmsWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);
        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>string</returns>
        string DedicatedshortcodeListshortcode (string shortcode = null, string page = null, string pagesize = null);

        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DedicatedshortcodeListshortcodeWithHttpInfo (string shortcode = null, string page = null, string pagesize = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Dedicated Shortcode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>string</returns>
        string DedicatedshortcodeSendsms (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Dedicated Shortcode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DedicatedshortcodeSendsmsWithHttpInfo (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null);
        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update a dedicated shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>string</returns>
        string DedicatedshortcodeUpdateshortcode (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null);

        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update a dedicated shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DedicatedshortcodeUpdateshortcodeWithHttpInfo (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single Short Code object by its shortcode assignment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>string</returns>
        string DedicatedshortcodeViewshortcode (string shortcode);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single Short Code object by its shortcode assignment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DedicatedshortcodeViewshortcodeWithHttpInfo (string shortcode);
        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code messages.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>string</returns>
        string ShortcodeListsms (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code messages.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeListsmsWithHttpInfo (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// View a single Sms Short Code message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>string</returns>
        string ShortcodeViewsms (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// View a single Sms Short Code message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeViewsmsWithHttpInfo (string messageSid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DedicatedshortcodeGetinboundsmsAsync (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);
        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DedicatedshortcodeListshortcodeAsync (string shortcode = null, string page = null, string pagesize = null);

        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeListshortcodeAsyncWithHttpInfo (string shortcode = null, string page = null, string pagesize = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Dedicated Shortcode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DedicatedshortcodeSendsmsAsync (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Dedicated Shortcode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeSendsmsAsyncWithHttpInfo (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null);
        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update a dedicated shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DedicatedshortcodeUpdateshortcodeAsync (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null);

        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update a dedicated shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single Short Code object by its shortcode assignment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DedicatedshortcodeViewshortcodeAsync (string shortcode);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single Short Code object by its shortcode assignment.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeViewshortcodeAsyncWithHttpInfo (string shortcode);
        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code messages.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeListsmsAsync (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Short Code messages.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeListsmsAsyncWithHttpInfo (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// View a single Sms Short Code message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeViewsmsAsync (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// View a single Sms Short Code message.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeViewsmsAsyncWithHttpInfo (string messageSid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShortCodeApi : IShortCodeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShortCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShortCodeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShortCodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShortCodeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Inbound SMS Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>string</returns>
        public string DedicatedshortcodeGetinboundsms (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {
             ApiResponse<string> localVarResponse = DedicatedshortcodeGetinboundsmsWithHttpInfo(page, pagesize, from, shortcode, datecreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inbound SMS Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DedicatedshortcodeGetinboundsmsWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {

            var localVarPath = "/dedicatedshortcode/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (datecreated != null) localVarFormParams.Add("Datecreated", Configuration.ApiClient.ParameterToString(datecreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Inbound SMS Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DedicatedshortcodeGetinboundsmsAsync (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {
             ApiResponse<string> localVarResponse = await DedicatedshortcodeGetinboundsmsAsyncWithHttpInfo(page, pagesize, from, shortcode, datecreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inbound SMS Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Only list SMS messages sent from this number (optional)</param>
        /// <param name="shortcode">Only list SMS messages sent to Shortcode (optional)</param>
        /// <param name="datecreated">Only list SMS messages sent in the specified date MAKE REQUEST (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {

            var localVarPath = "/dedicatedshortcode/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (datecreated != null) localVarFormParams.Add("Datecreated", Configuration.ApiClient.ParameterToString(datecreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>string</returns>
        public string DedicatedshortcodeListshortcode (string shortcode = null, string page = null, string pagesize = null)
        {
             ApiResponse<string> localVarResponse = DedicatedshortcodeListshortcodeWithHttpInfo(shortcode, page, pagesize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DedicatedshortcodeListshortcodeWithHttpInfo (string shortcode = null, string page = null, string pagesize = null)
        {

            var localVarPath = "/dedicatedshortcode/listshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeListshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DedicatedshortcodeListshortcodeAsync (string shortcode = null, string page = null, string pagesize = null)
        {
             ApiResponse<string> localVarResponse = await DedicatedshortcodeListshortcodeAsyncWithHttpInfo(shortcode, page, pagesize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shortcodes Retrieve a list of Short Code assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list Short Code Assignment sent from this Short Code (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeListshortcodeAsyncWithHttpInfo (string shortcode = null, string page = null, string pagesize = null)
        {

            var localVarPath = "/dedicatedshortcode/listshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeListshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send Dedicated Shortcode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>string</returns>
        public string DedicatedshortcodeSendsms (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null)
        {
             ApiResponse<string> localVarResponse = DedicatedshortcodeSendsmsWithHttpInfo(shortcode, to, body, method, messagestatuscallback);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Send Dedicated Shortcode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DedicatedshortcodeSendsmsWithHttpInfo (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ShortCodeApi->DedicatedshortcodeSendsms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShortCodeApi->DedicatedshortcodeSendsms");

            var localVarPath = "/dedicatedshortcode/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (body != null) localVarFormParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messagestatuscallback != null) localVarFormParams.Add("messagestatuscallback", Configuration.ApiClient.ParameterToString(messagestatuscallback)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send Dedicated Shortcode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DedicatedshortcodeSendsmsAsync (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null)
        {
             ApiResponse<string> localVarResponse = await DedicatedshortcodeSendsmsAsyncWithHttpInfo(shortcode, to, body, method, messagestatuscallback);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Send Dedicated Shortcode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Your dedicated shortcode</param>
        /// <param name="to">The number to send your SMS to</param>
        /// <param name="body">The body of your message</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST (optional)</param>
        /// <param name="messagestatuscallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeSendsmsAsyncWithHttpInfo (int? shortcode, double? to, string body, string method = null, string messagestatuscallback = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ShortCodeApi->DedicatedshortcodeSendsms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShortCodeApi->DedicatedshortcodeSendsms");

            var localVarPath = "/dedicatedshortcode/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (body != null) localVarFormParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (method != null) localVarFormParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messagestatuscallback != null) localVarFormParams.Add("messagestatuscallback", Configuration.ApiClient.ParameterToString(messagestatuscallback)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Shortcode Update a dedicated shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>string</returns>
        public string DedicatedshortcodeUpdateshortcode (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null)
        {
             ApiResponse<string> localVarResponse = DedicatedshortcodeUpdateshortcodeWithHttpInfo(shortcode, friendlyName, callbackMethod, callbackUrl, fallbackMethod, fallbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shortcode Update a dedicated shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DedicatedshortcodeUpdateshortcodeWithHttpInfo (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeUpdateshortcode");

            var localVarPath = "/dedicatedshortcode/updateshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (callbackMethod != null) localVarFormParams.Add("CallbackMethod", Configuration.ApiClient.ParameterToString(callbackMethod)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("CallbackUrl", Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (fallbackMethod != null) localVarFormParams.Add("FallbackMethod", Configuration.ApiClient.ParameterToString(fallbackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeUpdateshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Shortcode Update a dedicated shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DedicatedshortcodeUpdateshortcodeAsync (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null)
        {
             ApiResponse<string> localVarResponse = await DedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo(shortcode, friendlyName, callbackMethod, callbackUrl, fallbackMethod, fallbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Shortcode Update a dedicated shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid dedicated shortcode to your Ytel account.</param>
        /// <param name="friendlyName">User generated name of the dedicated shortcode. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeUpdateshortcodeAsyncWithHttpInfo (string shortcode, string friendlyName = null, string callbackMethod = null, string callbackUrl = null, string fallbackMethod = null, string fallbackUrl = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeUpdateshortcode");

            var localVarPath = "/dedicatedshortcode/updateshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (callbackMethod != null) localVarFormParams.Add("CallbackMethod", Configuration.ApiClient.ParameterToString(callbackMethod)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("CallbackUrl", Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (fallbackMethod != null) localVarFormParams.Add("FallbackMethod", Configuration.ApiClient.ParameterToString(fallbackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeUpdateshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single Short Code object by its shortcode assignment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>string</returns>
        public string DedicatedshortcodeViewshortcode (string shortcode)
        {
             ApiResponse<string> localVarResponse = DedicatedshortcodeViewshortcodeWithHttpInfo(shortcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View SMS Retrieve a single Short Code object by its shortcode assignment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DedicatedshortcodeViewshortcodeWithHttpInfo (string shortcode)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeViewshortcode");

            var localVarPath = "/dedicatedshortcode/viewshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeViewshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single Short Code object by its shortcode assignment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DedicatedshortcodeViewshortcodeAsync (string shortcode)
        {
             ApiResponse<string> localVarResponse = await DedicatedshortcodeViewshortcodeAsyncWithHttpInfo(shortcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View SMS Retrieve a single Short Code object by its shortcode assignment.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Dedicated Short Code to your Ytel account</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DedicatedshortcodeViewshortcodeAsyncWithHttpInfo (string shortcode)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling ShortCodeApi->DedicatedshortcodeViewshortcode");

            var localVarPath = "/dedicatedshortcode/viewshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DedicatedshortcodeViewshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List SMS Retrieve a list of Short Code messages.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>string</returns>
        public string ShortcodeListsms (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<string> localVarResponse = ShortcodeListsmsWithHttpInfo(shortcode, to, dateSent, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Retrieve a list of Short Code messages.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeListsmsWithHttpInfo (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/shortcode/listsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter
            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeListsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List SMS Retrieve a list of Short Code messages.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeListsmsAsync (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null)
        {
             ApiResponse<string> localVarResponse = await ShortcodeListsmsAsyncWithHttpInfo(shortcode, to, dateSent, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List SMS Retrieve a list of Short Code messages.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">Only list messages sent from this Short Code (optional)</param>
        /// <param name="to">Only list messages sent to this number (optional)</param>
        /// <param name="dateSent">Only list messages sent with the specified date (optional)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeListsmsAsyncWithHttpInfo (string shortcode = null, string to = null, string dateSent = null, int? page = null, int? pageSize = null)
        {

            var localVarPath = "/shortcode/listsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter
            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeListsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS View a single Sms Short Code message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>string</returns>
        public string ShortcodeViewsms (string messageSid)
        {
             ApiResponse<string> localVarResponse = ShortcodeViewsmsWithHttpInfo(messageSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View SMS View a single Sms Short Code message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeViewsmsWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling ShortCodeApi->ShortcodeViewsms");

            var localVarPath = "/shortcode/viewsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeViewsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS View a single Sms Short Code message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeViewsmsAsync (string messageSid)
        {
             ApiResponse<string> localVarResponse = await ShortcodeViewsmsAsyncWithHttpInfo(messageSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View SMS View a single Sms Short Code message.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for the sms resource</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeViewsmsAsyncWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling ShortCodeApi->ShortcodeViewsms");

            var localVarPath = "/shortcode/viewsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeViewsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
