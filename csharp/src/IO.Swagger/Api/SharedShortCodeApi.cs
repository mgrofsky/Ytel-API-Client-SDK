/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharedShortCodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Keywords
        /// </summary>
        /// <remarks>
        /// Retrieve a list of keywords associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>string</returns>
        string KeywordLists (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null);

        /// <summary>
        /// List Keywords
        /// </summary>
        /// <remarks>
        /// Retrieve a list of keywords associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> KeywordListsWithHttpInfo (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null);
        /// <summary>
        /// View Keyword
        /// </summary>
        /// <remarks>
        /// View a set of properties for a single keyword.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>string</returns>
        string KeywordView (string keywordid);

        /// <summary>
        /// View Keyword
        /// </summary>
        /// <remarks>
        /// View a set of properties for a single keyword.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> KeywordViewWithHttpInfo (string keywordid);
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// List All Inbound ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>string</returns>
        string ShortcodeGetinboundsms (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// List All Inbound ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeGetinboundsmsWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);
        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>string</returns>
        string ShortcodeListshortcode (int? page = null, int? pagesize = null, string shortcode = null);

        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeListshortcodeWithHttpInfo (int? page = null, int? pagesize = null, string shortcode = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>string</returns>
        string ShortcodeSendsms (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeSendsmsWithHttpInfo (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null);
        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update Assignment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>string</returns>
        string ShortcodeUpdateshortcode (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null);

        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update Assignment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeUpdateshortcodeWithHttpInfo (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null);
        /// <summary>
        /// View Shortcode
        /// </summary>
        /// <remarks>
        /// The response returned here contains all resource properties associated with the given Shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>string</returns>
        string ShortcodeViewshortcode (string shortcode);

        /// <summary>
        /// View Shortcode
        /// </summary>
        /// <remarks>
        /// The response returned here contains all resource properties associated with the given Shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ShortcodeViewshortcodeWithHttpInfo (string shortcode);
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// List Shortcode Templates by Type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>string</returns>
        string TemplateLists (string type = null, int? page = null, int? pagesize = null, string shortcode = null);

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// List Shortcode Templates by Type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TemplateListsWithHttpInfo (string type = null, int? page = null, int? pagesize = null, string shortcode = null);
        /// <summary>
        /// View Template
        /// </summary>
        /// <remarks>
        /// View a Shared ShortCode Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>string</returns>
        string TemplateView (Guid? templateId);

        /// <summary>
        /// View Template
        /// </summary>
        /// <remarks>
        /// View a Shared ShortCode Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TemplateViewWithHttpInfo (Guid? templateId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Keywords
        /// </summary>
        /// <remarks>
        /// Retrieve a list of keywords associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> KeywordListsAsync (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null);

        /// <summary>
        /// List Keywords
        /// </summary>
        /// <remarks>
        /// Retrieve a list of keywords associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> KeywordListsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null);
        /// <summary>
        /// View Keyword
        /// </summary>
        /// <remarks>
        /// View a set of properties for a single keyword.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> KeywordViewAsync (string keywordid);

        /// <summary>
        /// View Keyword
        /// </summary>
        /// <remarks>
        /// View a set of properties for a single keyword.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> KeywordViewAsyncWithHttpInfo (string keywordid);
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// List All Inbound ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeGetinboundsmsAsync (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// List All Inbound ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null);
        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeListshortcodeAsync (int? page = null, int? pagesize = null, string shortcode = null);

        /// <summary>
        /// List Shortcodes
        /// </summary>
        /// <remarks>
        /// Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeListshortcodeAsyncWithHttpInfo (int? page = null, int? pagesize = null, string shortcode = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeSendsmsAsync (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel ShortCode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeSendsmsAsyncWithHttpInfo (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null);
        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update Assignment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeUpdateshortcodeAsync (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null);

        /// <summary>
        /// Update Shortcode
        /// </summary>
        /// <remarks>
        /// Update Assignment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeUpdateshortcodeAsyncWithHttpInfo (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null);
        /// <summary>
        /// View Shortcode
        /// </summary>
        /// <remarks>
        /// The response returned here contains all resource properties associated with the given Shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ShortcodeViewshortcodeAsync (string shortcode);

        /// <summary>
        /// View Shortcode
        /// </summary>
        /// <remarks>
        /// The response returned here contains all resource properties associated with the given Shortcode.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeViewshortcodeAsyncWithHttpInfo (string shortcode);
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// List Shortcode Templates by Type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TemplateListsAsync (string type = null, int? page = null, int? pagesize = null, string shortcode = null);

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// List Shortcode Templates by Type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TemplateListsAsyncWithHttpInfo (string type = null, int? page = null, int? pagesize = null, string shortcode = null);
        /// <summary>
        /// View Template
        /// </summary>
        /// <remarks>
        /// View a Shared ShortCode Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TemplateViewAsync (Guid? templateId);

        /// <summary>
        /// View Template
        /// </summary>
        /// <remarks>
        /// View a Shared ShortCode Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TemplateViewAsyncWithHttpInfo (Guid? templateId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SharedShortCodeApi : ISharedShortCodeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedShortCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharedShortCodeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharedShortCodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharedShortCodeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Keywords Retrieve a list of keywords associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>string</returns>
        public string KeywordLists (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null)
        {
             ApiResponse<string> localVarResponse = KeywordListsWithHttpInfo(page, pagesize, keyword, shortcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Keywords Retrieve a list of keywords associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > KeywordListsWithHttpInfo (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null)
        {

            var localVarPath = "/keyword/lists.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (keyword != null) localVarFormParams.Add("Keyword", Configuration.ApiClient.ParameterToString(keyword)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeywordLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Keywords Retrieve a list of keywords associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> KeywordListsAsync (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null)
        {
             ApiResponse<string> localVarResponse = await KeywordListsAsyncWithHttpInfo(page, pagesize, keyword, shortcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Keywords Retrieve a list of keywords associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="keyword">Only list keywords of keyword (optional)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> KeywordListsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string keyword = null, int? shortcode = null)
        {

            var localVarPath = "/keyword/lists.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (keyword != null) localVarFormParams.Add("Keyword", Configuration.ApiClient.ParameterToString(keyword)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeywordLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Keyword View a set of properties for a single keyword.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>string</returns>
        public string KeywordView (string keywordid)
        {
             ApiResponse<string> localVarResponse = KeywordViewWithHttpInfo(keywordid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Keyword View a set of properties for a single keyword.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > KeywordViewWithHttpInfo (string keywordid)
        {
            // verify the required parameter 'keywordid' is set
            if (keywordid == null)
                throw new ApiException(400, "Missing required parameter 'keywordid' when calling SharedShortCodeApi->KeywordView");

            var localVarPath = "/keyword/view.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywordid != null) localVarFormParams.Add("Keywordid", Configuration.ApiClient.ParameterToString(keywordid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeywordView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Keyword View a set of properties for a single keyword.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> KeywordViewAsync (string keywordid)
        {
             ApiResponse<string> localVarResponse = await KeywordViewAsyncWithHttpInfo(keywordid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Keyword View a set of properties for a single keyword.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywordid">The unique identifier of each keyword</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> KeywordViewAsyncWithHttpInfo (string keywordid)
        {
            // verify the required parameter 'keywordid' is set
            if (keywordid == null)
                throw new ApiException(400, "Missing required parameter 'keywordid' when calling SharedShortCodeApi->KeywordView");

            var localVarPath = "/keyword/view.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywordid != null) localVarFormParams.Add("Keywordid", Configuration.ApiClient.ParameterToString(keywordid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("KeywordView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Inbound SMS List All Inbound ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>string</returns>
        public string ShortcodeGetinboundsms (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {
             ApiResponse<string> localVarResponse = ShortcodeGetinboundsmsWithHttpInfo(page, pagesize, from, shortcode, datecreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inbound SMS List All Inbound ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeGetinboundsmsWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {

            var localVarPath = "/shortcode/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datecreated != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Datecreated", datecreated)); // query parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Inbound SMS List All Inbound ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeGetinboundsmsAsync (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {
             ApiResponse<string> localVarResponse = await ShortcodeGetinboundsmsAsyncWithHttpInfo(page, pagesize, from, shortcode, datecreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inbound SMS List All Inbound ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">From Number to Inbound ShortCode (optional)</param>
        /// <param name="shortcode">Only list messages sent to this Short Code (optional)</param>
        /// <param name="datecreated">Only list messages sent with the specified date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pagesize = null, string from = null, string shortcode = null, string datecreated = null)
        {

            var localVarPath = "/shortcode/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (datecreated != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Datecreated", datecreated)); // query parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (from != null) localVarFormParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>string</returns>
        public string ShortcodeListshortcode (int? page = null, int? pagesize = null, string shortcode = null)
        {
             ApiResponse<string> localVarResponse = ShortcodeListshortcodeWithHttpInfo(page, pagesize, shortcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeListshortcodeWithHttpInfo (int? page = null, int? pagesize = null, string shortcode = null)
        {

            var localVarPath = "/shortcode/listshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Shortcode", shortcode)); // query parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeListshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Shortcodes Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeListshortcodeAsync (int? page = null, int? pagesize = null, string shortcode = null)
        {
             ApiResponse<string> localVarResponse = await ShortcodeListshortcodeAsyncWithHttpInfo(page, pagesize, shortcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shortcodes Retrieve a list of shortcode assignment associated with your Ytel account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="shortcode">Only list keywords of shortcode (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeListshortcodeAsyncWithHttpInfo (int? page = null, int? pagesize = null, string shortcode = null)
        {

            var localVarPath = "/shortcode/listshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Shortcode", shortcode)); // query parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeListshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>string</returns>
        public string ShortcodeSendsms (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null)
        {
             ApiResponse<string> localVarResponse = ShortcodeSendsmsWithHttpInfo(shortcode, to, templateid, data, method, messageStatusCallback);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeSendsmsWithHttpInfo (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SharedShortCodeApi->ShortcodeSendsms");

            var localVarPath = "/shortcode/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (templateid != null) localVarFormParams.Add("templateid", Configuration.ApiClient.ParameterToString(templateid)); // form parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messageStatusCallback != null) localVarFormParams.Add("MessageStatusCallback", Configuration.ApiClient.ParameterToString(messageStatusCallback)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeSendsmsAsync (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null)
        {
             ApiResponse<string> localVarResponse = await ShortcodeSendsmsAsyncWithHttpInfo(shortcode, to, templateid, data, method, messageStatusCallback);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel ShortCode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">The Short Code number that is the sender of this message</param>
        /// <param name="to">A valid 10-digit number that should receive the message</param>
        /// <param name="templateid">The unique identifier for the template used for the message</param>
        /// <param name="data">format of your data, example: {companyname}:test,{otpcode}:1234</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once the Short Code message is sent. (optional, default to GET)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when Short Code message was sent. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeSendsmsAsyncWithHttpInfo (string shortcode, string to, Guid? templateid, string data, string method = null, string messageStatusCallback = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling SharedShortCodeApi->ShortcodeSendsms");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SharedShortCodeApi->ShortcodeSendsms");

            var localVarPath = "/shortcode/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (to != null) localVarFormParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (templateid != null) localVarFormParams.Add("templateid", Configuration.ApiClient.ParameterToString(templateid)); // form parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messageStatusCallback != null) localVarFormParams.Add("MessageStatusCallback", Configuration.ApiClient.ParameterToString(messageStatusCallback)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Shortcode Update Assignment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>string</returns>
        public string ShortcodeUpdateshortcode (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null)
        {
             ApiResponse<string> localVarResponse = ShortcodeUpdateshortcodeWithHttpInfo(shortcode, friendlyName, callbackUrl, callbackMethod, fallbackUrl, fallbackUrlMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shortcode Update Assignment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeUpdateshortcodeWithHttpInfo (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeUpdateshortcode");

            var localVarPath = "/shortcode/updateshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("CallbackUrl", Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (callbackMethod != null) localVarFormParams.Add("CallbackMethod", Configuration.ApiClient.ParameterToString(callbackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter
            if (fallbackUrlMethod != null) localVarFormParams.Add("FallbackUrlMethod", Configuration.ApiClient.ParameterToString(fallbackUrlMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeUpdateshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update Shortcode Update Assignment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeUpdateshortcodeAsync (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null)
        {
             ApiResponse<string> localVarResponse = await ShortcodeUpdateshortcodeAsyncWithHttpInfo(shortcode, friendlyName, callbackUrl, callbackMethod, fallbackUrl, fallbackUrlMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Shortcode Update Assignment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid shortcode to your Ytel account</param>
        /// <param name="friendlyName">User generated name of the shortcode (optional)</param>
        /// <param name="callbackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished. (optional)</param>
        /// <param name="callbackMethod">Specifies the HTTP method used to request the required StatusCallBackUrl once call connects. (optional)</param>
        /// <param name="fallbackUrl">URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST. (optional)</param>
        /// <param name="fallbackUrlMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeUpdateshortcodeAsyncWithHttpInfo (string shortcode, string friendlyName = null, string callbackUrl = null, string callbackMethod = null, string fallbackUrl = null, string fallbackUrlMethod = null)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeUpdateshortcode");

            var localVarPath = "/shortcode/updateshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("CallbackUrl", Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (callbackMethod != null) localVarFormParams.Add("CallbackMethod", Configuration.ApiClient.ParameterToString(callbackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter
            if (fallbackUrlMethod != null) localVarFormParams.Add("FallbackUrlMethod", Configuration.ApiClient.ParameterToString(fallbackUrlMethod)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeUpdateshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Shortcode The response returned here contains all resource properties associated with the given Shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>string</returns>
        public string ShortcodeViewshortcode (string shortcode)
        {
             ApiResponse<string> localVarResponse = ShortcodeViewshortcodeWithHttpInfo(shortcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Shortcode The response returned here contains all resource properties associated with the given Shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ShortcodeViewshortcodeWithHttpInfo (string shortcode)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeViewshortcode");

            var localVarPath = "/shortcode/viewshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeViewshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Shortcode The response returned here contains all resource properties associated with the given Shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ShortcodeViewshortcodeAsync (string shortcode)
        {
             ApiResponse<string> localVarResponse = await ShortcodeViewshortcodeAsyncWithHttpInfo(shortcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Shortcode The response returned here contains all resource properties associated with the given Shortcode.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shortcode">List of valid Shortcode to your Ytel account</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ShortcodeViewshortcodeAsyncWithHttpInfo (string shortcode)
        {
            // verify the required parameter 'shortcode' is set
            if (shortcode == null)
                throw new ApiException(400, "Missing required parameter 'shortcode' when calling SharedShortCodeApi->ShortcodeViewshortcode");

            var localVarPath = "/shortcode/viewshortcode.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShortcodeViewshortcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Templates List Shortcode Templates by Type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>string</returns>
        public string TemplateLists (string type = null, int? page = null, int? pagesize = null, string shortcode = null)
        {
             ApiResponse<string> localVarResponse = TemplateListsWithHttpInfo(type, page, pagesize, shortcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates List Shortcode Templates by Type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TemplateListsWithHttpInfo (string type = null, int? page = null, int? pagesize = null, string shortcode = null)
        {

            var localVarPath = "/template/lists.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Templates List Shortcode Templates by Type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TemplateListsAsync (string type = null, int? page = null, int? pagesize = null, string shortcode = null)
        {
             ApiResponse<string> localVarResponse = await TemplateListsAsyncWithHttpInfo(type, page, pagesize, shortcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Templates List Shortcode Templates by Type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The type (category) of template Valid values: marketing, authorization (optional, default to authorization)</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="shortcode">Only list templates of type (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TemplateListsAsyncWithHttpInfo (string type = null, int? page = null, int? pagesize = null, string shortcode = null)
        {

            var localVarPath = "/template/lists.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (shortcode != null) localVarFormParams.Add("Shortcode", Configuration.ApiClient.ParameterToString(shortcode)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Template View a Shared ShortCode Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>string</returns>
        public string TemplateView (Guid? templateId)
        {
             ApiResponse<string> localVarResponse = TemplateViewWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Template View a Shared ShortCode Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TemplateViewWithHttpInfo (Guid? templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SharedShortCodeApi->TemplateView");

            var localVarPath = "/template/view.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarFormParams.Add("TemplateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Template View a Shared ShortCode Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TemplateViewAsync (Guid? templateId)
        {
             ApiResponse<string> localVarResponse = await TemplateViewAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Template View a Shared ShortCode Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The unique identifier for a template object</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TemplateViewAsyncWithHttpInfo (Guid? templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling SharedShortCodeApi->TemplateView");

            var localVarPath = "/template/view.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarFormParams.Add("TemplateId", Configuration.ApiClient.ParameterToString(templateId)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
