/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// Add Participant in conference 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>string</returns>
        string ConferencesAddParticipant (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// Add Participant in conference 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesAddParticipantWithHttpInfo (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>string</returns>
        string ConferencesCreateConference (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesCreateConferenceWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null);
        /// <summary>
        /// Silence Participant
        /// </summary>
        /// <remarks>
        /// Deaf Mute Participant
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>string</returns>
        string ConferencesDeafMuteParticipant (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// Silence Participant
        /// </summary>
        /// <remarks>
        /// Deaf Mute Participant
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesDeafMuteParticipantWithHttpInfo (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// Hangup Participant
        /// </summary>
        /// <remarks>
        /// Remove a participant from a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>string</returns>
        string ConferencesHangupParticipant (string conferenceSid, string participantSid);

        /// <summary>
        /// Hangup Participant
        /// </summary>
        /// <remarks>
        /// Remove a participant from a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesHangupParticipantWithHttpInfo (string conferenceSid, string participantSid);
        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// Retrieve a list of participants for an in-progress conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>string</returns>
        string ConferencesListParticipant (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// Retrieve a list of participants for an in-progress conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesListParticipantWithHttpInfo (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// Retrieve a list of conference objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>string</returns>
        string ConferencesListconference (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null);

        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// Retrieve a list of conference objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesListconferenceWithHttpInfo (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null);
        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play an audio file during a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>string</returns>
        string ConferencesPlayAudio (string conferenceSid, string participantSid, string audioUrl);

        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play an audio file during a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesPlayAudioWithHttpInfo (string conferenceSid, string participantSid, string audioUrl);
        /// <summary>
        /// View Participant
        /// </summary>
        /// <remarks>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>string</returns>
        string ConferencesViewParticipant (string conferenceSid, string participantSid);

        /// <summary>
        /// View Participant
        /// </summary>
        /// <remarks>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesViewParticipantWithHttpInfo (string conferenceSid, string participantSid);
        /// <summary>
        /// View Conference
        /// </summary>
        /// <remarks>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>string</returns>
        string ConferencesViewconference (string conferenceSid);

        /// <summary>
        /// View Conference
        /// </summary>
        /// <remarks>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ConferencesViewconferenceWithHttpInfo (string conferenceSid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// Add Participant in conference 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesAddParticipantAsync (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// Add Participant
        /// </summary>
        /// <remarks>
        /// Add Participant in conference 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesAddParticipantAsyncWithHttpInfo (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesCreateConferenceAsync (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null);

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <remarks>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesCreateConferenceAsyncWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null);
        /// <summary>
        /// Silence Participant
        /// </summary>
        /// <remarks>
        /// Deaf Mute Participant
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesDeafMuteParticipantAsync (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// Silence Participant
        /// </summary>
        /// <remarks>
        /// Deaf Mute Participant
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesDeafMuteParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// Hangup Participant
        /// </summary>
        /// <remarks>
        /// Remove a participant from a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesHangupParticipantAsync (string conferenceSid, string participantSid);

        /// <summary>
        /// Hangup Participant
        /// </summary>
        /// <remarks>
        /// Remove a participant from a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesHangupParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid);
        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// Retrieve a list of participants for an in-progress conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesListParticipantAsync (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null);

        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// Retrieve a list of participants for an in-progress conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesListParticipantAsyncWithHttpInfo (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null);
        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// Retrieve a list of conference objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesListconferenceAsync (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null);

        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// Retrieve a list of conference objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesListconferenceAsyncWithHttpInfo (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null);
        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play an audio file during a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesPlayAudioAsync (string conferenceSid, string participantSid, string audioUrl);

        /// <summary>
        /// Play Audio
        /// </summary>
        /// <remarks>
        /// Play an audio file during a conference.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesPlayAudioAsyncWithHttpInfo (string conferenceSid, string participantSid, string audioUrl);
        /// <summary>
        /// View Participant
        /// </summary>
        /// <remarks>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesViewParticipantAsync (string conferenceSid, string participantSid);

        /// <summary>
        /// View Participant
        /// </summary>
        /// <remarks>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesViewParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid);
        /// <summary>
        /// View Conference
        /// </summary>
        /// <remarks>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ConferencesViewconferenceAsync (string conferenceSid);

        /// <summary>
        /// View Conference
        /// </summary>
        /// <remarks>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ConferencesViewconferenceAsyncWithHttpInfo (string conferenceSid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConferenceApi : IConferenceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConferenceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConferenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Participant Add Participant in conference 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>string</returns>
        public string ConferencesAddParticipant (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = ConferencesAddParticipantWithHttpInfo(conferenceSid, participantNumber, muted, deaf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Participant Add Participant in conference 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesAddParticipantWithHttpInfo (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesAddParticipant");
            // verify the required parameter 'participantNumber' is set
            if (participantNumber == null)
                throw new ApiException(400, "Missing required parameter 'participantNumber' when calling ConferenceApi->ConferencesAddParticipant");

            var localVarPath = "/conferences/addParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantNumber != null) localVarFormParams.Add("ParticipantNumber", Configuration.ApiClient.ParameterToString(participantNumber)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesAddParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add Participant Add Participant in conference 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesAddParticipantAsync (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = await ConferencesAddParticipantAsyncWithHttpInfo(conferenceSid, participantNumber, muted, deaf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Participant Add Participant in conference 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantNumber">The phone number of the participant to be added.</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesAddParticipantAsyncWithHttpInfo (string conferenceSid, string participantNumber, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesAddParticipant");
            // verify the required parameter 'participantNumber' is set
            if (participantNumber == null)
                throw new ApiException(400, "Missing required parameter 'participantNumber' when calling ConferenceApi->ConferencesAddParticipant");

            var localVarPath = "/conferences/addParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantNumber != null) localVarFormParams.Add("ParticipantNumber", Configuration.ApiClient.ParameterToString(participantNumber)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesAddParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Conference Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>string</returns>
        public string ConferencesCreateConference (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null)
        {
             ApiResponse<string> localVarResponse = ConferencesCreateConferenceWithHttpInfo(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallbackUrl, fallbackMethod, record, recordCallBackUrl, recordCallBackMethod, scheduleTime, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Conference Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesCreateConferenceWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling ConferenceApi->ConferencesCreateConference");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ConferenceApi->ConferencesCreateConference");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ConferenceApi->ConferencesCreateConference");

            var localVarPath = "/conferences/createConference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Url", url)); // query parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter
            if (fallbackMethod != null) localVarFormParams.Add("FallbackMethod", Configuration.ApiClient.ParameterToString(fallbackMethod)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (scheduleTime != null) localVarFormParams.Add("ScheduleTime", Configuration.ApiClient.ParameterToString(scheduleTime)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesCreateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Conference Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesCreateConferenceAsync (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null)
        {
             ApiResponse<string> localVarResponse = await ConferencesCreateConferenceAsyncWithHttpInfo(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallbackUrl, fallbackMethod, record, recordCallBackUrl, recordCallBackMethod, scheduleTime, timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Conference Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="url">URL requested once the conference connects</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once call connects. (optional, default to POST)</param>
        /// <param name="statusCallBackUrl">URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)</param>
        /// <param name="statusCallBackMethod">Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)</param>
        /// <param name="fallbackUrl">URL requested if the initial Url parameter fails or encounters an error (optional)</param>
        /// <param name="fallbackMethod">Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)</param>
        /// <param name="record">Specifies if the conference should be recorded. (optional)</param>
        /// <param name="recordCallBackUrl">Recording parameters will be sent here upon completion. (optional)</param>
        /// <param name="recordCallBackMethod">Specifies the HTTP method used to request the required URL once conference connects. (optional)</param>
        /// <param name="scheduleTime">Schedule conference in future. Schedule time must be greater than current time (optional)</param>
        /// <param name="timeout">The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesCreateConferenceAsyncWithHttpInfo (string from, string to, string url, string method = null, string statusCallBackUrl = null, string statusCallBackMethod = null, string fallbackUrl = null, string fallbackMethod = null, bool? record = null, string recordCallBackUrl = null, string recordCallBackMethod = null, string scheduleTime = null, int? timeout = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling ConferenceApi->ConferencesCreateConference");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ConferenceApi->ConferencesCreateConference");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ConferenceApi->ConferencesCreateConference");

            var localVarPath = "/conferences/createConference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (url != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "Url", url)); // query parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (statusCallBackUrl != null) localVarFormParams.Add("StatusCallBackUrl", Configuration.ApiClient.ParameterToString(statusCallBackUrl)); // form parameter
            if (statusCallBackMethod != null) localVarFormParams.Add("StatusCallBackMethod", Configuration.ApiClient.ParameterToString(statusCallBackMethod)); // form parameter
            if (fallbackUrl != null) localVarFormParams.Add("FallbackUrl", Configuration.ApiClient.ParameterToString(fallbackUrl)); // form parameter
            if (fallbackMethod != null) localVarFormParams.Add("FallbackMethod", Configuration.ApiClient.ParameterToString(fallbackMethod)); // form parameter
            if (record != null) localVarFormParams.Add("Record", Configuration.ApiClient.ParameterToString(record)); // form parameter
            if (recordCallBackUrl != null) localVarFormParams.Add("RecordCallBackUrl", Configuration.ApiClient.ParameterToString(recordCallBackUrl)); // form parameter
            if (recordCallBackMethod != null) localVarFormParams.Add("RecordCallBackMethod", Configuration.ApiClient.ParameterToString(recordCallBackMethod)); // form parameter
            if (scheduleTime != null) localVarFormParams.Add("ScheduleTime", Configuration.ApiClient.ParameterToString(scheduleTime)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesCreateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Silence Participant Deaf Mute Participant
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>string</returns>
        public string ConferencesDeafMuteParticipant (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = ConferencesDeafMuteParticipantWithHttpInfo(conferenceSid, participantSid, muted, deaf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Silence Participant Deaf Mute Participant
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesDeafMuteParticipantWithHttpInfo (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesDeafMuteParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesDeafMuteParticipant");

            var localVarPath = "/conferences/deafMuteParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("conferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesDeafMuteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Silence Participant Deaf Mute Participant
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesDeafMuteParticipantAsync (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = await ConferencesDeafMuteParticipantAsyncWithHttpInfo(conferenceSid, participantSid, muted, deaf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Silence Participant Deaf Mute Participant
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">ID of the active conference</param>
        /// <param name="participantSid">ID of an active participant</param>
        /// <param name="muted">Mute a participant (optional)</param>
        /// <param name="deaf">Make it so a participant cant hear (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesDeafMuteParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesDeafMuteParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesDeafMuteParticipant");

            var localVarPath = "/conferences/deafMuteParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("conferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesDeafMuteParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Hangup Participant Remove a participant from a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>string</returns>
        public string ConferencesHangupParticipant (string conferenceSid, string participantSid)
        {
             ApiResponse<string> localVarResponse = ConferencesHangupParticipantWithHttpInfo(conferenceSid, participantSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hangup Participant Remove a participant from a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesHangupParticipantWithHttpInfo (string conferenceSid, string participantSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesHangupParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesHangupParticipant");

            var localVarPath = "/conferences/hangupParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (participantSid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ParticipantSid", participantSid)); // query parameter
            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesHangupParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Hangup Participant Remove a participant from a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesHangupParticipantAsync (string conferenceSid, string participantSid)
        {
             ApiResponse<string> localVarResponse = await ConferencesHangupParticipantAsyncWithHttpInfo(conferenceSid, participantSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hangup Participant Remove a participant from a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesHangupParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesHangupParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesHangupParticipant");

            var localVarPath = "/conferences/hangupParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (participantSid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ParticipantSid", participantSid)); // query parameter
            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesHangupParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Participants Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>string</returns>
        public string ConferencesListParticipant (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = ConferencesListParticipantWithHttpInfo(conferenceSid, page, pagesize, muted, deaf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Participants Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesListParticipantWithHttpInfo (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesListParticipant");

            var localVarPath = "/conferences/listParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("Pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesListParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Participants Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesListParticipantAsync (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null)
        {
             ApiResponse<string> localVarResponse = await ConferencesListParticipantAsyncWithHttpInfo(conferenceSid, page, pagesize, muted, deaf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Participants Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference.</param>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="muted">Specifies if participant should be muted. (optional)</param>
        /// <param name="deaf">Specifies if the participant should hear audio in the conference. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesListParticipantAsyncWithHttpInfo (string conferenceSid, int? page = null, int? pagesize = null, bool? muted = null, bool? deaf = null)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesListParticipant");

            var localVarPath = "/conferences/listParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("Pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (muted != null) localVarFormParams.Add("Muted", Configuration.ApiClient.ParameterToString(muted)); // form parameter
            if (deaf != null) localVarFormParams.Add("Deaf", Configuration.ApiClient.ParameterToString(deaf)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesListParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Conferences Retrieve a list of conference objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>string</returns>
        public string ConferencesListconference (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = ConferencesListconferenceWithHttpInfo(page, pagesize, friendlyName, dateCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Conferences Retrieve a list of conference objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesListconferenceWithHttpInfo (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null)
        {

            var localVarPath = "/conferences/listconference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("DateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesListconference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Conferences Retrieve a list of conference objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesListconferenceAsync (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null)
        {
             ApiResponse<string> localVarResponse = await ConferencesListconferenceAsyncWithHttpInfo(page, pagesize, friendlyName, dateCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Conferences Retrieve a list of conference objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pagesize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="friendlyName">Only return conferences with the specified FriendlyName (optional)</param>
        /// <param name="dateCreated">Conference created date (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesListconferenceAsyncWithHttpInfo (int? page = null, int? pagesize = null, string friendlyName = null, string dateCreated = null)
        {

            var localVarPath = "/conferences/listconference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pagesize != null) localVarFormParams.Add("pagesize", Configuration.ApiClient.ParameterToString(pagesize)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (dateCreated != null) localVarFormParams.Add("DateCreated", Configuration.ApiClient.ParameterToString(dateCreated)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesListconference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play Audio Play an audio file during a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>string</returns>
        public string ConferencesPlayAudio (string conferenceSid, string participantSid, string audioUrl)
        {
             ApiResponse<string> localVarResponse = ConferencesPlayAudioWithHttpInfo(conferenceSid, participantSid, audioUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play Audio Play an audio file during a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesPlayAudioWithHttpInfo (string conferenceSid, string participantSid, string audioUrl)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesPlayAudio");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesPlayAudio");
            // verify the required parameter 'audioUrl' is set
            if (audioUrl == null)
                throw new ApiException(400, "Missing required parameter 'audioUrl' when calling ConferenceApi->ConferencesPlayAudio");

            var localVarPath = "/conferences/playAudio.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter
            if (audioUrl != null) localVarFormParams.Add("AudioUrl", Configuration.ApiClient.ParameterToString(audioUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesPlayAudio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Play Audio Play an audio file during a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesPlayAudioAsync (string conferenceSid, string participantSid, string audioUrl)
        {
             ApiResponse<string> localVarResponse = await ConferencesPlayAudioAsyncWithHttpInfo(conferenceSid, participantSid, audioUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play Audio Play an audio file during a conference.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <param name="audioUrl">The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesPlayAudioAsyncWithHttpInfo (string conferenceSid, string participantSid, string audioUrl)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesPlayAudio");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesPlayAudio");
            // verify the required parameter 'audioUrl' is set
            if (audioUrl == null)
                throw new ApiException(400, "Missing required parameter 'audioUrl' when calling ConferenceApi->ConferencesPlayAudio");

            var localVarPath = "/conferences/playAudio.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter
            if (audioUrl != null) localVarFormParams.Add("AudioUrl", Configuration.ApiClient.ParameterToString(audioUrl)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesPlayAudio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Participant Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>string</returns>
        public string ConferencesViewParticipant (string conferenceSid, string participantSid)
        {
             ApiResponse<string> localVarResponse = ConferencesViewParticipantWithHttpInfo(conferenceSid, participantSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Participant Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesViewParticipantWithHttpInfo (string conferenceSid, string participantSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesViewParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesViewParticipant");

            var localVarPath = "/conferences/viewParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesViewParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Participant Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesViewParticipantAsync (string conferenceSid, string participantSid)
        {
             ApiResponse<string> localVarResponse = await ConferencesViewParticipantAsyncWithHttpInfo(conferenceSid, participantSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Participant Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier for a conference object.</param>
        /// <param name="participantSid">The unique identifier for a participant object.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesViewParticipantAsyncWithHttpInfo (string conferenceSid, string participantSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesViewParticipant");
            // verify the required parameter 'participantSid' is set
            if (participantSid == null)
                throw new ApiException(400, "Missing required parameter 'participantSid' when calling ConferenceApi->ConferencesViewParticipant");

            var localVarPath = "/conferences/viewParticipant.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter
            if (participantSid != null) localVarFormParams.Add("ParticipantSid", Configuration.ApiClient.ParameterToString(participantSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesViewParticipant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Conference Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>string</returns>
        public string ConferencesViewconference (string conferenceSid)
        {
             ApiResponse<string> localVarResponse = ConferencesViewconferenceWithHttpInfo(conferenceSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View Conference Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ConferencesViewconferenceWithHttpInfo (string conferenceSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesViewconference");

            var localVarPath = "/conferences/viewconference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesViewconference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View Conference Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ConferencesViewconferenceAsync (string conferenceSid)
        {
             ApiResponse<string> localVarResponse = await ConferencesViewconferenceAsyncWithHttpInfo(conferenceSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View Conference Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceSid">The unique identifier of each conference resource</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ConferencesViewconferenceAsyncWithHttpInfo (string conferenceSid)
        {
            // verify the required parameter 'conferenceSid' is set
            if (conferenceSid == null)
                throw new ApiException(400, "Missing required parameter 'conferenceSid' when calling ConferenceApi->ConferencesViewconference");

            var localVarPath = "/conferences/viewconference.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conferenceSid != null) localVarFormParams.Add("ConferenceSid", Configuration.ApiClient.ParameterToString(conferenceSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConferencesViewconference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
