/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Subaccount
        /// </summary>
        /// <remarks>
        /// Create a sub user account under the parent account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>string</returns>
        string UserCreatesubaccount (string firstName, string lastName, string email, string friendlyName, string password);

        /// <summary>
        /// Create Subaccount
        /// </summary>
        /// <remarks>
        /// Create a sub user account under the parent account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UserCreatesubaccountWithHttpInfo (string firstName, string lastName, string email, string friendlyName, string password);
        /// <summary>
        /// Delete Subaccount
        /// </summary>
        /// <remarks>
        /// Delete sub account or merge numbers into parent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>string</returns>
        string UserDeletesubaccount (string subAccountSID, string mergeNumber);

        /// <summary>
        /// Delete Subaccount
        /// </summary>
        /// <remarks>
        /// Delete sub account or merge numbers into parent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UserDeletesubaccountWithHttpInfo (string subAccountSID, string mergeNumber);
        /// <summary>
        /// Toggle Subaccount Status
        /// </summary>
        /// <remarks>
        /// Suspend or unsuspend
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>string</returns>
        string UserSubaccountactivation (string subAccountSID, string activate);

        /// <summary>
        /// Toggle Subaccount Status
        /// </summary>
        /// <remarks>
        /// Suspend or unsuspend
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UserSubaccountactivationWithHttpInfo (string subAccountSID, string activate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Subaccount
        /// </summary>
        /// <remarks>
        /// Create a sub user account under the parent account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UserCreatesubaccountAsync (string firstName, string lastName, string email, string friendlyName, string password);

        /// <summary>
        /// Create Subaccount
        /// </summary>
        /// <remarks>
        /// Create a sub user account under the parent account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UserCreatesubaccountAsyncWithHttpInfo (string firstName, string lastName, string email, string friendlyName, string password);
        /// <summary>
        /// Delete Subaccount
        /// </summary>
        /// <remarks>
        /// Delete sub account or merge numbers into parent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UserDeletesubaccountAsync (string subAccountSID, string mergeNumber);

        /// <summary>
        /// Delete Subaccount
        /// </summary>
        /// <remarks>
        /// Delete sub account or merge numbers into parent
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UserDeletesubaccountAsyncWithHttpInfo (string subAccountSID, string mergeNumber);
        /// <summary>
        /// Toggle Subaccount Status
        /// </summary>
        /// <remarks>
        /// Suspend or unsuspend
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UserSubaccountactivationAsync (string subAccountSID, string activate);

        /// <summary>
        /// Toggle Subaccount Status
        /// </summary>
        /// <remarks>
        /// Suspend or unsuspend
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UserSubaccountactivationAsyncWithHttpInfo (string subAccountSID, string activate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubAccountApi : ISubAccountApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubAccountApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubAccountApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Subaccount Create a sub user account under the parent account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>string</returns>
        public string UserCreatesubaccount (string firstName, string lastName, string email, string friendlyName, string password)
        {
             ApiResponse<string> localVarResponse = UserCreatesubaccountWithHttpInfo(firstName, lastName, email, friendlyName, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subaccount Create a sub user account under the parent account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > UserCreatesubaccountWithHttpInfo (string firstName, string lastName, string email, string friendlyName, string password)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'friendlyName' is set
            if (friendlyName == null)
                throw new ApiException(400, "Missing required parameter 'friendlyName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling SubAccountApi->UserCreatesubaccount");

            var localVarPath = "/user/createsubaccount.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarFormParams.Add("FirstName", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("LastName", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (password != null) localVarFormParams.Add("Password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreatesubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create Subaccount Create a sub user account under the parent account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UserCreatesubaccountAsync (string firstName, string lastName, string email, string friendlyName, string password)
        {
             ApiResponse<string> localVarResponse = await UserCreatesubaccountAsyncWithHttpInfo(firstName, lastName, email, friendlyName, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Subaccount Create a sub user account under the parent account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Sub account user first name</param>
        /// <param name="lastName">sub account user last name</param>
        /// <param name="email">Sub account email address</param>
        /// <param name="friendlyName">Descriptive name of the sub account</param>
        /// <param name="password">The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> UserCreatesubaccountAsyncWithHttpInfo (string firstName, string lastName, string email, string friendlyName, string password)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'friendlyName' is set
            if (friendlyName == null)
                throw new ApiException(400, "Missing required parameter 'friendlyName' when calling SubAccountApi->UserCreatesubaccount");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling SubAccountApi->UserCreatesubaccount");

            var localVarPath = "/user/createsubaccount.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarFormParams.Add("FirstName", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("LastName", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (email != null) localVarFormParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (friendlyName != null) localVarFormParams.Add("FriendlyName", Configuration.ApiClient.ParameterToString(friendlyName)); // form parameter
            if (password != null) localVarFormParams.Add("Password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreatesubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Subaccount Delete sub account or merge numbers into parent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>string</returns>
        public string UserDeletesubaccount (string subAccountSID, string mergeNumber)
        {
             ApiResponse<string> localVarResponse = UserDeletesubaccountWithHttpInfo(subAccountSID, mergeNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Subaccount Delete sub account or merge numbers into parent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > UserDeletesubaccountWithHttpInfo (string subAccountSID, string mergeNumber)
        {
            // verify the required parameter 'subAccountSID' is set
            if (subAccountSID == null)
                throw new ApiException(400, "Missing required parameter 'subAccountSID' when calling SubAccountApi->UserDeletesubaccount");
            // verify the required parameter 'mergeNumber' is set
            if (mergeNumber == null)
                throw new ApiException(400, "Missing required parameter 'mergeNumber' when calling SubAccountApi->UserDeletesubaccount");

            var localVarPath = "/user/deletesubaccount.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountSID != null) localVarFormParams.Add("SubAccountSID", Configuration.ApiClient.ParameterToString(subAccountSID)); // form parameter
            if (mergeNumber != null) localVarFormParams.Add("MergeNumber", Configuration.ApiClient.ParameterToString(mergeNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserDeletesubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Delete Subaccount Delete sub account or merge numbers into parent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UserDeletesubaccountAsync (string subAccountSID, string mergeNumber)
        {
             ApiResponse<string> localVarResponse = await UserDeletesubaccountAsyncWithHttpInfo(subAccountSID, mergeNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Subaccount Delete sub account or merge numbers into parent
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be deleted</param>
        /// <param name="mergeNumber">0 to delete or 1 to merge numbers to parent account.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> UserDeletesubaccountAsyncWithHttpInfo (string subAccountSID, string mergeNumber)
        {
            // verify the required parameter 'subAccountSID' is set
            if (subAccountSID == null)
                throw new ApiException(400, "Missing required parameter 'subAccountSID' when calling SubAccountApi->UserDeletesubaccount");
            // verify the required parameter 'mergeNumber' is set
            if (mergeNumber == null)
                throw new ApiException(400, "Missing required parameter 'mergeNumber' when calling SubAccountApi->UserDeletesubaccount");

            var localVarPath = "/user/deletesubaccount.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountSID != null) localVarFormParams.Add("SubAccountSID", Configuration.ApiClient.ParameterToString(subAccountSID)); // form parameter
            if (mergeNumber != null) localVarFormParams.Add("MergeNumber", Configuration.ApiClient.ParameterToString(mergeNumber)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserDeletesubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Toggle Subaccount Status Suspend or unsuspend
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>string</returns>
        public string UserSubaccountactivation (string subAccountSID, string activate)
        {
             ApiResponse<string> localVarResponse = UserSubaccountactivationWithHttpInfo(subAccountSID, activate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle Subaccount Status Suspend or unsuspend
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > UserSubaccountactivationWithHttpInfo (string subAccountSID, string activate)
        {
            // verify the required parameter 'subAccountSID' is set
            if (subAccountSID == null)
                throw new ApiException(400, "Missing required parameter 'subAccountSID' when calling SubAccountApi->UserSubaccountactivation");
            // verify the required parameter 'activate' is set
            if (activate == null)
                throw new ApiException(400, "Missing required parameter 'activate' when calling SubAccountApi->UserSubaccountactivation");

            var localVarPath = "/user/subaccountactivation.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountSID != null) localVarFormParams.Add("SubAccountSID", Configuration.ApiClient.ParameterToString(subAccountSID)); // form parameter
            if (activate != null) localVarFormParams.Add("Activate", Configuration.ApiClient.ParameterToString(activate)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSubaccountactivation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Toggle Subaccount Status Suspend or unsuspend
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UserSubaccountactivationAsync (string subAccountSID, string activate)
        {
             ApiResponse<string> localVarResponse = await UserSubaccountactivationAsyncWithHttpInfo(subAccountSID, activate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggle Subaccount Status Suspend or unsuspend
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountSID">The SubaccountSid to be activated or suspended</param>
        /// <param name="activate">0 to suspend or 1 to activate</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> UserSubaccountactivationAsyncWithHttpInfo (string subAccountSID, string activate)
        {
            // verify the required parameter 'subAccountSID' is set
            if (subAccountSID == null)
                throw new ApiException(400, "Missing required parameter 'subAccountSID' when calling SubAccountApi->UserSubaccountactivation");
            // verify the required parameter 'activate' is set
            if (activate == null)
                throw new ApiException(400, "Missing required parameter 'activate' when calling SubAccountApi->UserSubaccountactivation");

            var localVarPath = "/user/subaccountactivation.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subAccountSID != null) localVarFormParams.Add("SubAccountSID", Configuration.ApiClient.ParameterToString(subAccountSID)); // form parameter
            if (activate != null) localVarFormParams.Add("Activate", Configuration.ApiClient.ParameterToString(activate)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSubaccountactivation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
