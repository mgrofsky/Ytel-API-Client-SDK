/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Inbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>string</returns>
        string SmsGetinboundsms (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Inbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsGetinboundsmsWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);
        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Outbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>string</returns>
        string SmsListsms (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);

        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Outbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsListsmsWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>string</returns>
        string SmsSendsms (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsSendsmsWithHttpInfo (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>string</returns>
        string SmsViewdetailsms (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsViewdetailsmsWithHttpInfo (string messageSid);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>string</returns>
        string SmsViewsms (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SmsViewsmsWithHttpInfo (string messageSid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Inbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsGetinboundsmsAsync (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);

        /// <summary>
        /// List Inbound SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Inbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);
        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Outbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsListsmsAsync (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);

        /// <summary>
        /// List SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Outbound SMS message objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsListsmsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsSendsmsAsync (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send an SMS from a Ytel number
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsSendsmsAsyncWithHttpInfo (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsViewdetailsmsAsync (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsViewdetailsmsAsyncWithHttpInfo (string messageSid);
        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SmsViewsmsAsync (string messageSid);

        /// <summary>
        /// View SMS
        /// </summary>
        /// <remarks>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SmsViewsmsAsyncWithHttpInfo (string messageSid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSApi : ISMSApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Inbound SMS Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>string</returns>
        public string SmsGetinboundsms (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {
             ApiResponse<string> localVarResponse = SmsGetinboundsmsWithHttpInfo(page, pageSize, from, to, dateSent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inbound SMS Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsGetinboundsmsWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {

            var localVarPath = "/sms/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List Inbound SMS Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsGetinboundsmsAsync (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {
             ApiResponse<string> localVarResponse = await SmsGetinboundsmsAsyncWithHttpInfo(page, pageSize, from, to, dateSent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inbound SMS Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">The count of objects to return per page. (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Filter sms message objects by this date. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsGetinboundsmsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {

            var localVarPath = "/sms/getinboundsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsGetinboundsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List SMS Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>string</returns>
        public string SmsListsms (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {
             ApiResponse<string> localVarResponse = SmsListsmsWithHttpInfo(page, pageSize, from, to, dateSent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsListsmsWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {

            var localVarPath = "/sms/listsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsListsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List SMS Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsListsmsAsync (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {
             ApiResponse<string> localVarResponse = await SmsListsmsAsyncWithHttpInfo(page, pageSize, from, to, dateSent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List SMS Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional, default to 1)</param>
        /// <param name="pageSize">Number of individual resources listed in the response per page (optional, default to 10)</param>
        /// <param name="from">Filter SMS message objects from this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="to">Filter SMS message objects to this valid 10-digit phone number (E.164 format). (optional)</param>
        /// <param name="dateSent">Only list SMS messages sent in the specified date range (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsListsmsAsyncWithHttpInfo (int? page = null, int? pageSize = null, string from = null, string to = null, string dateSent = null)
        {

            var localVarPath = "/sms/listsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarFormParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // form parameter
            if (pageSize != null) localVarFormParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // form parameter
            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (dateSent != null) localVarFormParams.Add("DateSent", Configuration.ApiClient.ParameterToString(dateSent)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsListsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>string</returns>
        public string SmsSendsms (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null)
        {
             ApiResponse<string> localVarResponse = SmsSendsmsWithHttpInfo(from, to, body, method, messageStatusCallback, smartsms, deliveryStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsSendsmsWithHttpInfo (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SMSApi->SmsSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SMSApi->SmsSendsms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SMSApi->SmsSendsms");

            var localVarPath = "/sms/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (body != null) localVarFormParams.Add("Body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messageStatusCallback != null) localVarFormParams.Add("MessageStatusCallback", Configuration.ApiClient.ParameterToString(messageStatusCallback)); // form parameter
            if (smartsms != null) localVarFormParams.Add("Smartsms", Configuration.ApiClient.ParameterToString(smartsms)); // form parameter
            if (deliveryStatus != null) localVarFormParams.Add("DeliveryStatus", Configuration.ApiClient.ParameterToString(deliveryStatus)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsSendsmsAsync (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null)
        {
             ApiResponse<string> localVarResponse = await SmsSendsmsAsyncWithHttpInfo(from, to, body, method, messageStatusCallback, smartsms, deliveryStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Send an SMS from a Ytel number
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">The body message that is to be sent in the text.</param>
        /// <param name="method">Specifies the HTTP method used to request the required URL once SMS sent. (optional)</param>
        /// <param name="messageStatusCallback">URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished. (optional)</param>
        /// <param name="smartsms">Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message. (optional, default to false)</param>
        /// <param name="deliveryStatus">Delivery reports are a method to tell your system if the message has arrived on the destination phone. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsSendsmsAsyncWithHttpInfo (string from, string to, string body, string method = null, string messageStatusCallback = null, bool? smartsms = null, bool? deliveryStatus = null)
        {
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SMSApi->SmsSendsms");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SMSApi->SmsSendsms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SMSApi->SmsSendsms");

            var localVarPath = "/sms/sendsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (from != null) localVarFormParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // form parameter
            if (to != null) localVarFormParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (body != null) localVarFormParams.Add("Body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (method != null) localVarFormParams.Add("Method", Configuration.ApiClient.ParameterToString(method)); // form parameter
            if (messageStatusCallback != null) localVarFormParams.Add("MessageStatusCallback", Configuration.ApiClient.ParameterToString(messageStatusCallback)); // form parameter
            if (smartsms != null) localVarFormParams.Add("Smartsms", Configuration.ApiClient.ParameterToString(smartsms)); // form parameter
            if (deliveryStatus != null) localVarFormParams.Add("DeliveryStatus", Configuration.ApiClient.ParameterToString(deliveryStatus)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSendsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>string</returns>
        public string SmsViewdetailsms (string messageSid)
        {
             ApiResponse<string> localVarResponse = SmsViewdetailsmsWithHttpInfo(messageSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsViewdetailsmsWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling SMSApi->SmsViewdetailsms");

            var localVarPath = "/sms/viewdetailsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsViewdetailsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsViewdetailsmsAsync (string messageSid)
        {
             ApiResponse<string> localVarResponse = await SmsViewdetailsmsAsyncWithHttpInfo(messageSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsViewdetailsmsAsyncWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling SMSApi->SmsViewdetailsms");

            var localVarPath = "/sms/viewdetailsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsViewdetailsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>string</returns>
        public string SmsViewsms (string messageSid)
        {
             ApiResponse<string> localVarResponse = SmsViewsmsWithHttpInfo(messageSid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SmsViewsmsWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling SMSApi->SmsViewsms");

            var localVarPath = "/sms/viewsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsViewsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SmsViewsmsAsync (string messageSid)
        {
             ApiResponse<string> localVarResponse = await SmsViewsmsAsyncWithHttpInfo(messageSid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View SMS Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageSid">The unique identifier for a sms message.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SmsViewsmsAsyncWithHttpInfo (string messageSid)
        {
            // verify the required parameter 'messageSid' is set
            if (messageSid == null)
                throw new ApiException(400, "Missing required parameter 'messageSid' when calling SMSApi->SmsViewsms");

            var localVarPath = "/sms/viewsms.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageSid != null) localVarFormParams.Add("MessageSid", Configuration.ApiClient.ParameterToString(messageSid)); // form parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsViewsms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
