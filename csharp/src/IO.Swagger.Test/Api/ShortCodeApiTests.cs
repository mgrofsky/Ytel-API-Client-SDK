/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ShortCodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ShortCodeApiTests
    {
        private ShortCodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ShortCodeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ShortCodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ShortCodeApi
            //Assert.IsInstanceOfType(typeof(ShortCodeApi), instance, "instance is a ShortCodeApi");
        }

        
        /// <summary>
        /// Test DedicatedshortcodeGetinboundsms
        /// </summary>
        [Test]
        public void DedicatedshortcodeGetinboundsmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pagesize = null;
            //string from = null;
            //string shortcode = null;
            //string datecreated = null;
            //var response = instance.DedicatedshortcodeGetinboundsms(page, pagesize, from, shortcode, datecreated);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DedicatedshortcodeListshortcode
        /// </summary>
        [Test]
        public void DedicatedshortcodeListshortcodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shortcode = null;
            //string page = null;
            //string pagesize = null;
            //var response = instance.DedicatedshortcodeListshortcode(shortcode, page, pagesize);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DedicatedshortcodeSendsms
        /// </summary>
        [Test]
        public void DedicatedshortcodeSendsmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? shortcode = null;
            //double? to = null;
            //string body = null;
            //string method = null;
            //string messagestatuscallback = null;
            //var response = instance.DedicatedshortcodeSendsms(shortcode, to, body, method, messagestatuscallback);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DedicatedshortcodeUpdateshortcode
        /// </summary>
        [Test]
        public void DedicatedshortcodeUpdateshortcodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shortcode = null;
            //string friendlyName = null;
            //string callbackMethod = null;
            //string callbackUrl = null;
            //string fallbackMethod = null;
            //string fallbackUrl = null;
            //var response = instance.DedicatedshortcodeUpdateshortcode(shortcode, friendlyName, callbackMethod, callbackUrl, fallbackMethod, fallbackUrl);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DedicatedshortcodeViewshortcode
        /// </summary>
        [Test]
        public void DedicatedshortcodeViewshortcodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shortcode = null;
            //var response = instance.DedicatedshortcodeViewshortcode(shortcode);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ShortcodeListsms
        /// </summary>
        [Test]
        public void ShortcodeListsmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shortcode = null;
            //string to = null;
            //string dateSent = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.ShortcodeListsms(shortcode, to, dateSent, page, pageSize);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ShortcodeViewsms
        /// </summary>
        [Test]
        public void ShortcodeViewsmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string messageSid = null;
            //var response = instance.ShortcodeViewsms(messageSid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
