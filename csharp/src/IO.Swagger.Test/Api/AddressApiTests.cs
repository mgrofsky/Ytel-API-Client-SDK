/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AddressApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AddressApiTests
    {
        private AddressApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AddressApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddressApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AddressApi
            //Assert.IsInstanceOfType(typeof(AddressApi), instance, "instance is a AddressApi");
        }

        
        /// <summary>
        /// Test AddressCreateaddress
        /// </summary>
        [Test]
        public void AddressCreateaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string address = null;
            //string country = null;
            //string state = null;
            //string city = null;
            //string zip = null;
            //string description = null;
            //string email = null;
            //string phone = null;
            //var response = instance.AddressCreateaddress(name, address, country, state, city, zip, description, email, phone);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddressDeleteaddress
        /// </summary>
        [Test]
        public void AddressDeleteaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addressid = null;
            //var response = instance.AddressDeleteaddress(addressid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddressListaddress
        /// </summary>
        [Test]
        public void AddressListaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pagesize = null;
            //string addressid = null;
            //string dateCreated = null;
            //var response = instance.AddressListaddress(page, pagesize, addressid, dateCreated);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddressVerifyaddress
        /// </summary>
        [Test]
        public void AddressVerifyaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addressid = null;
            //var response = instance.AddressVerifyaddress(addressid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddressViewaddress
        /// </summary>
        [Test]
        public void AddressViewaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addressid = null;
            //var response = instance.AddressViewaddress(addressid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
