/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ConferenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConferenceApiTests
    {
        private ConferenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConferenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConferenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConferenceApi
            //Assert.IsInstanceOfType(typeof(ConferenceApi), instance, "instance is a ConferenceApi");
        }

        
        /// <summary>
        /// Test ConferencesAddParticipant
        /// </summary>
        [Test]
        public void ConferencesAddParticipantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //string participantNumber = null;
            //bool? muted = null;
            //bool? deaf = null;
            //var response = instance.ConferencesAddParticipant(conferenceSid, participantNumber, muted, deaf);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesCreateConference
        /// </summary>
        [Test]
        public void ConferencesCreateConferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string from = null;
            //string to = null;
            //string url = null;
            //string method = null;
            //string statusCallBackUrl = null;
            //string statusCallBackMethod = null;
            //string fallbackUrl = null;
            //string fallbackMethod = null;
            //bool? record = null;
            //string recordCallBackUrl = null;
            //string recordCallBackMethod = null;
            //string scheduleTime = null;
            //int? timeout = null;
            //var response = instance.ConferencesCreateConference(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallbackUrl, fallbackMethod, record, recordCallBackUrl, recordCallBackMethod, scheduleTime, timeout);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesDeafMuteParticipant
        /// </summary>
        [Test]
        public void ConferencesDeafMuteParticipantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //string participantSid = null;
            //bool? muted = null;
            //bool? deaf = null;
            //var response = instance.ConferencesDeafMuteParticipant(conferenceSid, participantSid, muted, deaf);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesHangupParticipant
        /// </summary>
        [Test]
        public void ConferencesHangupParticipantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //string participantSid = null;
            //var response = instance.ConferencesHangupParticipant(conferenceSid, participantSid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesListParticipant
        /// </summary>
        [Test]
        public void ConferencesListParticipantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //int? page = null;
            //int? pagesize = null;
            //bool? muted = null;
            //bool? deaf = null;
            //var response = instance.ConferencesListParticipant(conferenceSid, page, pagesize, muted, deaf);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesListconference
        /// </summary>
        [Test]
        public void ConferencesListconferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pagesize = null;
            //string friendlyName = null;
            //string dateCreated = null;
            //var response = instance.ConferencesListconference(page, pagesize, friendlyName, dateCreated);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesPlayAudio
        /// </summary>
        [Test]
        public void ConferencesPlayAudioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //string participantSid = null;
            //string audioUrl = null;
            //var response = instance.ConferencesPlayAudio(conferenceSid, participantSid, audioUrl);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesViewParticipant
        /// </summary>
        [Test]
        public void ConferencesViewParticipantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //string participantSid = null;
            //var response = instance.ConferencesViewParticipant(conferenceSid, participantSid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConferencesViewconference
        /// </summary>
        [Test]
        public void ConferencesViewconferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conferenceSid = null;
            //var response = instance.ConferencesViewconference(conferenceSid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
