/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubAccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubAccountApiTests
    {
        private SubAccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubAccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubAccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubAccountApi
            //Assert.IsInstanceOfType(typeof(SubAccountApi), instance, "instance is a SubAccountApi");
        }

        
        /// <summary>
        /// Test UserCreatesubaccount
        /// </summary>
        [Test]
        public void UserCreatesubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string email = null;
            //string friendlyName = null;
            //string password = null;
            //var response = instance.UserCreatesubaccount(firstName, lastName, email, friendlyName, password);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserDeletesubaccount
        /// </summary>
        [Test]
        public void UserDeletesubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subAccountSID = null;
            //string mergeNumber = null;
            //var response = instance.UserDeletesubaccount(subAccountSID, mergeNumber);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test UserSubaccountactivation
        /// </summary>
        [Test]
        public void UserSubaccountactivationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subAccountSID = null;
            //string activate = null;
            //var response = instance.UserSubaccountactivation(subAccountSID, activate);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
