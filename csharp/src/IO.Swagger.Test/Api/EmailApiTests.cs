/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EmailApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EmailApiTests
    {
        private EmailApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EmailApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EmailApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EmailApi
            //Assert.IsInstanceOfType(typeof(EmailApi), instance, "instance is a EmailApi");
        }

        
        /// <summary>
        /// Test EmailAddunsubscribesemail
        /// </summary>
        [Test]
        public void EmailAddunsubscribesemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailAddunsubscribesemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailDeleteblocksemail
        /// </summary>
        [Test]
        public void EmailDeleteblocksemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailDeleteblocksemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailDeletebouncesemail
        /// </summary>
        [Test]
        public void EmailDeletebouncesemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailDeletebouncesemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailDeleteinvalidemail
        /// </summary>
        [Test]
        public void EmailDeleteinvalidemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailDeleteinvalidemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailDeletespamemail
        /// </summary>
        [Test]
        public void EmailDeletespamemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailDeletespamemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailDeleteunsubscribedemail
        /// </summary>
        [Test]
        public void EmailDeleteunsubscribedemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.EmailDeleteunsubscribedemail(email);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailListblockemail
        /// </summary>
        [Test]
        public void EmailListblockemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offset = null;
            //string limit = null;
            //var response = instance.EmailListblockemail(offset, limit);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailListbounceemail
        /// </summary>
        [Test]
        public void EmailListbounceemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offset = null;
            //string limit = null;
            //var response = instance.EmailListbounceemail(offset, limit);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailListinvalidemail
        /// </summary>
        [Test]
        public void EmailListinvalidemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offset = null;
            //string limit = null;
            //var response = instance.EmailListinvalidemail(offset, limit);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailListspamemail
        /// </summary>
        [Test]
        public void EmailListspamemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offset = null;
            //string limit = null;
            //var response = instance.EmailListspamemail(offset, limit);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailListunsubscribedemail
        /// </summary>
        [Test]
        public void EmailListunsubscribedemailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string offset = null;
            //string limit = null;
            //var response = instance.EmailListunsubscribedemail(offset, limit);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test EmailSendemails
        /// </summary>
        [Test]
        public void EmailSendemailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string to = null;
            //string type = null;
            //string subject = null;
            //string message = null;
            //string from = null;
            //string cc = null;
            //string bcc = null;
            //string attachment = null;
            //var response = instance.EmailSendemails(to, type, subject, message, from, cc, bcc, attachment);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
