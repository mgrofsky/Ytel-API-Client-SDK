/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CallApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CallApiTests
    {
        private CallApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CallApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CallApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CallApi
            //Assert.IsInstanceOfType(typeof(CallApi), instance, "instance is a CallApi");
        }

        
        /// <summary>
        /// Test CallsGroupcall
        /// </summary>
        [Test]
        public void CallsGroupcallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string from = null;
            //string to = null;
            //string url = null;
            //string groupConfirmKey = null;
            //string groupConfirmFile = null;
            //string method = null;
            //string statusCallBackUrl = null;
            //string statusCallBackMethod = null;
            //string fallBackUrl = null;
            //string fallBackMethod = null;
            //string heartBeatUrl = null;
            //string heartBeatMethod = null;
            //int? timeout = null;
            //string playDtmf = null;
            //string hideCallerId = null;
            //bool? record = null;
            //string recordCallBackUrl = null;
            //string recordCallBackMethod = null;
            //bool? transcribe = null;
            //string transcribeCallBackUrl = null;
            //var response = instance.CallsGroupcall(from, to, url, groupConfirmKey, groupConfirmFile, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsInterruptcalls
        /// </summary>
        [Test]
        public void CallsInterruptcallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //string url = null;
            //string method = null;
            //string status = null;
            //var response = instance.CallsInterruptcalls(callSid, url, method, status);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsListcalls
        /// </summary>
        [Test]
        public void CallsListcallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string to = null;
            //string from = null;
            //string dateCreated = null;
            //var response = instance.CallsListcalls(page, pageSize, to, from, dateCreated);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsMakecall
        /// </summary>
        [Test]
        public void CallsMakecallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string from = null;
            //string to = null;
            //string url = null;
            //string method = null;
            //string statusCallBackUrl = null;
            //string statusCallBackMethod = null;
            //string fallBackUrl = null;
            //string fallBackMethod = null;
            //string heartBeatUrl = null;
            //string heartBeatMethod = null;
            //int? timeout = null;
            //string playDtmf = null;
            //bool? hideCallerId = null;
            //bool? record = null;
            //string recordCallBackUrl = null;
            //string recordCallBackMethod = null;
            //bool? transcribe = null;
            //string transcribeCallBackUrl = null;
            //string ifMachine = null;
            //string ifMachineUrl = null;
            //string ifMachineMethod = null;
            //bool? feedback = null;
            //string surveyId = null;
            //var response = instance.CallsMakecall(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, ifMachine, ifMachineUrl, ifMachineMethod, feedback, surveyId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsMakervm
        /// </summary>
        [Test]
        public void CallsMakervmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string from = null;
            //string rVMCallerId = null;
            //string to = null;
            //string voiceMailURL = null;
            //string method = null;
            //string statusCallBackUrl = null;
            //string statsCallBackMethod = null;
            //var response = instance.CallsMakervm(from, rVMCallerId, to, voiceMailURL, method, statusCallBackUrl, statsCallBackMethod);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsPlayaudios
        /// </summary>
        [Test]
        public void CallsPlayaudiosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //string audioUrl = null;
            //string sayText = null;
            //int? length = null;
            //string direction = null;
            //bool? mix = null;
            //var response = instance.CallsPlayaudios(callSid, audioUrl, sayText, length, direction, mix);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsRecordcalls
        /// </summary>
        [Test]
        public void CallsRecordcallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //bool? record = null;
            //string direction = null;
            //int? timeLimit = null;
            //string callBackUrl = null;
            //string fileformat = null;
            //var response = instance.CallsRecordcalls(callSid, record, direction, timeLimit, callBackUrl, fileformat);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsSenddigits
        /// </summary>
        [Test]
        public void CallsSenddigitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //string playDtmf = null;
            //string playDtmfDirection = null;
            //var response = instance.CallsSenddigits(callSid, playDtmf, playDtmfDirection);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsViewcalldetail
        /// </summary>
        [Test]
        public void CallsViewcalldetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //var response = instance.CallsViewcalldetail(callSid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsViewcalls
        /// </summary>
        [Test]
        public void CallsViewcallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callsid = null;
            //var response = instance.CallsViewcalls(callsid);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CallsVoiceeffect
        /// </summary>
        [Test]
        public void CallsVoiceeffectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string callSid = null;
            //string audioDirection = null;
            //double? pitchSemiTones = null;
            //double? pitchOctaves = null;
            //double? pitch = null;
            //double? rate = null;
            //double? tempo = null;
            //var response = instance.CallsVoiceeffect(callSid, audioDirection, pitchSemiTones, pitchOctaves, pitch, rate, tempo);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
