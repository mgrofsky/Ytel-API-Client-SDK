/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * API version: 3.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type PhoneNumberApiService service


/* PhoneNumberApiService Available Numbers
 Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
 * @param ctx context.Context Authentication Context 
 @param numbertype Number type either SMS,Voice or all
 @param areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "pagesize" (int32) The count of objects to return.
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneAvailablenumber(ctx context.Context, numbertype string, areacode string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/availablenumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["pagesize"], "int32", "pagesize"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("numbertype", parameterToString(numbertype, ""))
	localVarFormParams.Add("areacode", parameterToString(areacode, ""))
	if localVarTempParam, localVarOk := localVarOptionals["pagesize"].(int32); localVarOk {
		localVarFormParams.Add("pagesize", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Bulk Buy Numbers
 Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
 * @param ctx context.Context Authentication Context 
 @param numberType The capability the number supports.
 @param areaCode Specifies the area code for the returned list of available numbers. Only available for North American numbers.
 @param quantity A positive integer that tells how many number you want to buy at a time.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "leftover" (string) If desired quantity is unavailable purchase what is available .
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneBulkbuy(ctx context.Context, numberType string, areaCode string, quantity string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/bulkbuy.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["leftover"], "string", "leftover"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("NumberType", parameterToString(numberType, ""))
	localVarFormParams.Add("AreaCode", parameterToString(areaCode, ""))
	localVarFormParams.Add("Quantity", parameterToString(quantity, ""))
	if localVarTempParam, localVarOk := localVarOptionals["leftover"].(string); localVarOk {
		localVarFormParams.Add("Leftover", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Purchase Number
 Purchase a phone number to be used with your Ytel account
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid 10-digit Ytel number (E.164 format).
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneBuynumber(ctx context.Context, phoneNumber string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/buynumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Get DID Score
 Get DID Score Number
 * @param ctx context.Context Authentication Context 
 @param phonenumber Specifies the multiple phone numbers for check updated spamscore .
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneGetdidscore(ctx context.Context, phonenumber string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/getdidscore.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("Phonenumber", parameterToString(phonenumber, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService List Numbers
 Retrieve a list of purchased phones numbers associated with your Ytel account.
 * @param ctx context.Context Authentication Context 
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "page" (int32) Which page of the overall response will be returned. Page indexing starts at 1.
     @param "pageSize" (int32) The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     @param "numberType" (string) The capability supported by the number.Number type either SMS,Voice or all
     @param "friendlyName" (string) A human-readable label added to the number object.
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneListnumber(ctx context.Context, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/listnumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["pageSize"], "int32", "pageSize"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["numberType"], "string", "numberType"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["friendlyName"], "string", "friendlyName"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarFormParams.Add("Page", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["pageSize"].(int32); localVarOk {
		localVarFormParams.Add("PageSize", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["numberType"].(string); localVarOk {
		localVarFormParams.Add("NumberType", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["friendlyName"].(string); localVarOk {
		localVarFormParams.Add("FriendlyName", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Bulk Release
 Remove a purchased Ytel number from your account.
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid Ytel comma separated numbers (E.164 format).
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneMassreleasenumber(ctx context.Context, phoneNumber string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/massreleasenumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Bulk Update Numbers
 Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid comma(,) separated Ytel numbers. (E.164 format).
 @param voiceUrl The URL returning InboundXML incoming calls should execute when connected.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "friendlyName" (string) A human-readable value for labeling the number.
     @param "voiceMethod" (string) Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
     @param "voiceFallbackUrl" (string) URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
     @param "voiceFallbackMethod" (string) Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
     @param "hangupCallback" (string) URL that can be requested to receive notification when and how incoming call has ended.
     @param "hangupCallbackMethod" (string) The HTTP method Ytel will use when requesting the HangupCallback URL.
     @param "heartbeatUrl" (string) URL that can be used to monitor the phone number.
     @param "heartbeatMethod" (string) The HTTP method Ytel will use when requesting the HeartbeatUrl.
     @param "smsUrl" (string) URL requested when an SMS is received.
     @param "smsMethod" (string) The HTTP method Ytel will use when requesting the SmsUrl.
     @param "smsFallbackUrl" (string) URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     @param "smsFallbackMethod" (string) The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneMassupdatenumber(ctx context.Context, phoneNumber string, voiceUrl string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/massupdatenumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["friendlyName"], "string", "friendlyName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceMethod"], "string", "voiceMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceFallbackUrl"], "string", "voiceFallbackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceFallbackMethod"], "string", "voiceFallbackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hangupCallback"], "string", "hangupCallback"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hangupCallbackMethod"], "string", "hangupCallbackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartbeatUrl"], "string", "heartbeatUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartbeatMethod"], "string", "heartbeatMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsUrl"], "string", "smsUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsMethod"], "string", "smsMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsFallbackUrl"], "string", "smsFallbackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsFallbackMethod"], "string", "smsFallbackMethod"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	localVarFormParams.Add("VoiceUrl", parameterToString(voiceUrl, ""))
	if localVarTempParam, localVarOk := localVarOptionals["friendlyName"].(string); localVarOk {
		localVarFormParams.Add("FriendlyName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceMethod"].(string); localVarOk {
		localVarFormParams.Add("VoiceMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceFallbackUrl"].(string); localVarOk {
		localVarFormParams.Add("VoiceFallbackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceFallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("VoiceFallbackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hangupCallback"].(string); localVarOk {
		localVarFormParams.Add("HangupCallback", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hangupCallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("HangupCallbackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartbeatUrl"].(string); localVarOk {
		localVarFormParams.Add("HeartbeatUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartbeatMethod"].(string); localVarOk {
		localVarFormParams.Add("HeartbeatMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsUrl"].(string); localVarOk {
		localVarFormParams.Add("SmsUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsMethod"].(string); localVarOk {
		localVarFormParams.Add("SmsMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsFallbackUrl"].(string); localVarOk {
		localVarFormParams.Add("SmsFallbackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsFallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("SmsFallbackMethod", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Release Number
 Remove a purchased Ytel number from your account.
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid 10-digit Ytel number (E.164 format).
 @param responseType Response type format xml or json
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneReleasenumberByResponseTypePost(ctx context.Context, phoneNumber string, responseType string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/releasenumber.{ResponseType}"
	localVarPath = strings.Replace(localVarPath, "{"+"ResponseType"+"}", fmt.Sprintf("%v", responseType), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Move Number
 Transfer phone number that has been purchased for from one account to another account.
 * @param ctx context.Context Authentication Context 
 @param phonenumber A valid 10-digit Ytel number (E.164 format).
 @param fromaccountsid A specific Accountsid from where Number is getting transfer.
 @param toaccountsid A specific Accountsid to which Number is getting transfer.
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneTransferphonenumbers(ctx context.Context, phonenumber string, fromaccountsid string, toaccountsid string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/transferphonenumbers.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("phonenumber", parameterToString(phonenumber, ""))
	localVarFormParams.Add("fromaccountsid", parameterToString(fromaccountsid, ""))
	localVarFormParams.Add("toaccountsid", parameterToString(toaccountsid, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService Update Number
 Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid Ytel number (E.164 format).
 @param voiceUrl URL requested once the call connects
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "friendlyName" (string) Phone number friendly name description
     @param "voiceMethod" (string) Post or Get
     @param "voiceFallbackUrl" (string) URL requested if the voice URL is not available
     @param "voiceFallbackMethod" (string) Post or Get
     @param "hangupCallback" (string) callback url after a hangup occurs
     @param "hangupCallbackMethod" (string) Post or Get
     @param "heartbeatUrl" (string) URL requested once the call connects
     @param "heartbeatMethod" (string) URL that can be requested every 60 seconds during the call to notify of elapsed time
     @param "smsUrl" (string) URL requested when an SMS is received
     @param "smsMethod" (string) Post or Get
     @param "smsFallbackUrl" (string) URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     @param "smsFallbackMethod" (string) The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneUpdatenumber(ctx context.Context, phoneNumber string, voiceUrl string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/updatenumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["friendlyName"], "string", "friendlyName"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceMethod"], "string", "voiceMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceFallbackUrl"], "string", "voiceFallbackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["voiceFallbackMethod"], "string", "voiceFallbackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hangupCallback"], "string", "hangupCallback"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hangupCallbackMethod"], "string", "hangupCallbackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartbeatUrl"], "string", "heartbeatUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartbeatMethod"], "string", "heartbeatMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsUrl"], "string", "smsUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsMethod"], "string", "smsMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsFallbackUrl"], "string", "smsFallbackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["smsFallbackMethod"], "string", "smsFallbackMethod"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	localVarFormParams.Add("VoiceUrl", parameterToString(voiceUrl, ""))
	if localVarTempParam, localVarOk := localVarOptionals["friendlyName"].(string); localVarOk {
		localVarFormParams.Add("FriendlyName", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceMethod"].(string); localVarOk {
		localVarFormParams.Add("VoiceMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceFallbackUrl"].(string); localVarOk {
		localVarFormParams.Add("VoiceFallbackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["voiceFallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("VoiceFallbackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hangupCallback"].(string); localVarOk {
		localVarFormParams.Add("HangupCallback", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hangupCallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("HangupCallbackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartbeatUrl"].(string); localVarOk {
		localVarFormParams.Add("HeartbeatUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartbeatMethod"].(string); localVarOk {
		localVarFormParams.Add("HeartbeatMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsUrl"].(string); localVarOk {
		localVarFormParams.Add("SmsUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsMethod"].(string); localVarOk {
		localVarFormParams.Add("SmsMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsFallbackUrl"].(string); localVarOk {
		localVarFormParams.Add("SmsFallbackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["smsFallbackMethod"].(string); localVarOk {
		localVarFormParams.Add("SmsFallbackMethod", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* PhoneNumberApiService View Details
 Retrieve the details for a phone number by its number.
 * @param ctx context.Context Authentication Context 
 @param phoneNumber A valid Ytel 10-digit phone number (E.164 format).
 @return string*/
func (a *PhoneNumberApiService) IncomingphoneViewnumber(ctx context.Context, phoneNumber string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/incomingphone/viewnumber.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("PhoneNumber", parameterToString(phoneNumber, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

