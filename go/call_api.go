/* 
 * Ytel API V3
 *
 * Ytel API version 3
 *
 * API version: 3.11
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
)

// Linger please
var (
	_ context.Context
)

type CallApiService service


/* CallApiService Group Call
 Group Call
 * @param ctx context.Context Authentication Context 
 @param from This number to display on Caller ID as calling
 @param to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
 @param url URL requested once the call connects
 @param groupConfirmKey Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
 @param groupConfirmFile Specify the audio file you want to play when the called party picks up the call
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "method" (string) Specifies the HTTP method used to request the required URL once call connects.
     @param "statusCallBackUrl" (string) URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     @param "statusCallBackMethod" (string) Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     @param "fallBackUrl" (string) URL requested if the initial Url parameter fails or encounters an error
     @param "fallBackMethod" (string) Specifies the HTTP method used to request the required FallbackUrl once call connects.
     @param "heartBeatUrl" (string) URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
     @param "heartBeatMethod" (string) Specifies the HTTP method used to request HeartbeatUrl.
     @param "timeout" (int32) Time (in seconds) we should wait while the call is ringing before canceling the call
     @param "playDtmf" (string) DTMF Digits to play to the call once it connects. 0-9, #, or *
     @param "hideCallerId" (string) Specifies if the caller id will be hidden
     @param "record" (bool) Specifies if the call should be recorded
     @param "recordCallBackUrl" (string) Recording parameters will be sent here upon completion
     @param "recordCallBackMethod" (string) Method used to request the RecordCallback URL.
     @param "transcribe" (bool) Specifies if the call recording should be transcribed
     @param "transcribeCallBackUrl" (string) Transcription parameters will be sent here upon completion
 @return string*/
func (a *CallApiService) CallsGroupcall(ctx context.Context, from string, to string, url string, groupConfirmKey string, groupConfirmFile string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/groupcall.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statusCallBackUrl"], "string", "statusCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statusCallBackMethod"], "string", "statusCallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["fallBackUrl"], "string", "fallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["fallBackMethod"], "string", "fallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartBeatUrl"], "string", "heartBeatUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartBeatMethod"], "string", "heartBeatMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["timeout"], "int32", "timeout"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["playDtmf"], "string", "playDtmf"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hideCallerId"], "string", "hideCallerId"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["record"], "bool", "record"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["recordCallBackUrl"], "string", "recordCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["recordCallBackMethod"], "string", "recordCallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["transcribe"], "bool", "transcribe"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["transcribeCallBackUrl"], "string", "transcribeCallBackUrl"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("From", parameterToString(from, ""))
	localVarFormParams.Add("To", parameterToString(to, ""))
	localVarFormParams.Add("Url", parameterToString(url, ""))
	localVarFormParams.Add("GroupConfirmKey", parameterToString(groupConfirmKey, ""))
	localVarFormParams.Add("GroupConfirmFile", parameterToString(groupConfirmFile, ""))
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarFormParams.Add("Method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statusCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("StatusCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statusCallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("StatusCallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["fallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("FallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["fallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("FallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartBeatUrl"].(string); localVarOk {
		localVarFormParams.Add("HeartBeatUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartBeatMethod"].(string); localVarOk {
		localVarFormParams.Add("HeartBeatMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["timeout"].(int32); localVarOk {
		localVarFormParams.Add("Timeout", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["playDtmf"].(string); localVarOk {
		localVarFormParams.Add("PlayDtmf", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hideCallerId"].(string); localVarOk {
		localVarFormParams.Add("HideCallerId", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["record"].(bool); localVarOk {
		localVarFormParams.Add("Record", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["recordCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("RecordCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["recordCallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("RecordCallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["transcribe"].(bool); localVarOk {
		localVarFormParams.Add("Transcribe", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["transcribeCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("TranscribeCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Interrupt Call
 Interrupt the Call by Call Sid
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier for voice call that is in progress.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "url" (string) URL the in-progress call will be redirected to
     @param "method" (string) The method used to request the above Url parameter
     @param "status" (string) Status to set the in-progress call to
 @return string*/
func (a *CallApiService) CallsInterruptcalls(ctx context.Context, callSid string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/interruptcalls.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["status"], "string", "status"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("CallSid", parameterToString(callSid, ""))
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarFormParams.Add("Url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarFormParams.Add("Method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["status"].(string); localVarOk {
		localVarFormParams.Add("Status", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService List Calls
 A list of calls associated with your Ytel account
 * @param ctx context.Context Authentication Context 
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "page" (int32) The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     @param "pageSize" (int32) Number of individual resources listed in the response per page
     @param "to" (string) Filter calls that were sent to this 10-digit number (E.164 format).
     @param "from" (string) Filter calls that were sent from this 10-digit number (E.164 format).
     @param "dateCreated" (string) Return calls that are from a specified date.
 @return string*/
func (a *CallApiService) CallsListcalls(ctx context.Context, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/listcalls.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["page"], "int32", "page"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["pageSize"], "int32", "pageSize"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["to"], "string", "to"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["from"], "string", "from"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["dateCreated"], "string", "dateCreated"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarTempParam, localVarOk := localVarOptionals["page"].(int32); localVarOk {
		localVarFormParams.Add("Page", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["pageSize"].(int32); localVarOk {
		localVarFormParams.Add("PageSize", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["to"].(string); localVarOk {
		localVarFormParams.Add("To", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["from"].(string); localVarOk {
		localVarFormParams.Add("From", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["dateCreated"].(string); localVarOk {
		localVarFormParams.Add("DateCreated", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Make Call
 You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
 * @param ctx context.Context Authentication Context 
 @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
 @param to To number
 @param url URL requested once the call connects
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "method" (string) Specifies the HTTP method used to request the required URL once call connects.
     @param "statusCallBackUrl" (string) URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     @param "statusCallBackMethod" (string) Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     @param "fallBackUrl" (string) URL requested if the initial Url parameter fails or encounters an error
     @param "fallBackMethod" (string) Specifies the HTTP method used to request the required FallbackUrl once call connects.
     @param "heartBeatUrl" (string) URL that can be requested every 60 seconds during the call to notify of elapsed tim
     @param "heartBeatMethod" (string) Specifies the HTTP method used to request HeartbeatUrl.
     @param "timeout" (int32) Time (in seconds) Ytel should wait while the call is ringing before canceling the call
     @param "playDtmf" (string) DTMF Digits to play to the call once it connects. 0-9, #, or *
     @param "hideCallerId" (bool) Specifies if the caller id will be hidden
     @param "record" (bool) Specifies if the call should be recorded
     @param "recordCallBackUrl" (string) Recording parameters will be sent here upon completion
     @param "recordCallBackMethod" (string) Method used to request the RecordCallback URL.
     @param "transcribe" (bool) Specifies if the call recording should be transcribed
     @param "transcribeCallBackUrl" (string) Transcription parameters will be sent here upon completion
     @param "ifMachine" (string) How Ytel should handle the receiving numbers voicemail machine
     @param "ifMachineUrl" (string) URL requested when IfMachine&#x3D;continue
     @param "ifMachineMethod" (string) Method used to request the IfMachineUrl.
     @param "feedback" (bool) Specify if survey should be enable or not
     @param "surveyId" (string) The unique identifier for the survey.
 @return string*/
func (a *CallApiService) CallsMakecall(ctx context.Context, from string, to string, url string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/makecall.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statusCallBackUrl"], "string", "statusCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statusCallBackMethod"], "string", "statusCallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["fallBackUrl"], "string", "fallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["fallBackMethod"], "string", "fallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartBeatUrl"], "string", "heartBeatUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["heartBeatMethod"], "string", "heartBeatMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["timeout"], "int32", "timeout"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["playDtmf"], "string", "playDtmf"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["hideCallerId"], "bool", "hideCallerId"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["record"], "bool", "record"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["recordCallBackUrl"], "string", "recordCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["recordCallBackMethod"], "string", "recordCallBackMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["transcribe"], "bool", "transcribe"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["transcribeCallBackUrl"], "string", "transcribeCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["ifMachine"], "string", "ifMachine"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["ifMachineUrl"], "string", "ifMachineUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["ifMachineMethod"], "string", "ifMachineMethod"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["feedback"], "bool", "feedback"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["surveyId"], "string", "surveyId"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("From", parameterToString(from, ""))
	localVarFormParams.Add("To", parameterToString(to, ""))
	localVarFormParams.Add("Url", parameterToString(url, ""))
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarFormParams.Add("Method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statusCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("StatusCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statusCallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("StatusCallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["fallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("FallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["fallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("FallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartBeatUrl"].(string); localVarOk {
		localVarFormParams.Add("HeartBeatUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["heartBeatMethod"].(string); localVarOk {
		localVarFormParams.Add("HeartBeatMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["timeout"].(int32); localVarOk {
		localVarFormParams.Add("Timeout", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["playDtmf"].(string); localVarOk {
		localVarFormParams.Add("PlayDtmf", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["hideCallerId"].(bool); localVarOk {
		localVarFormParams.Add("HideCallerId", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["record"].(bool); localVarOk {
		localVarFormParams.Add("Record", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["recordCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("RecordCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["recordCallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("RecordCallBackMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["transcribe"].(bool); localVarOk {
		localVarFormParams.Add("Transcribe", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["transcribeCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("TranscribeCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["ifMachine"].(string); localVarOk {
		localVarFormParams.Add("IfMachine", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["ifMachineUrl"].(string); localVarOk {
		localVarFormParams.Add("IfMachineUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["ifMachineMethod"].(string); localVarOk {
		localVarFormParams.Add("IfMachineMethod", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["feedback"].(bool); localVarOk {
		localVarFormParams.Add("Feedback", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["surveyId"].(string); localVarOk {
		localVarFormParams.Add("SurveyId", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Send RVM
 Initiate an outbound Ringless Voicemail through Ytel.
 * @param ctx context.Context Authentication Context 
 @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
 @param rVMCallerId A required secondary Caller ID for RVM to work.
 @param to A valid number (E.164 format) that will receive the phone call.
 @param voiceMailURL The URL requested once the RVM connects. A set of default parameters will be sent here.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "method" (string) Specifies the HTTP method used to request the required URL once call connects.
     @param "statusCallBackUrl" (string) URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     @param "statsCallBackMethod" (string) Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
 @return string*/
func (a *CallApiService) CallsMakervm(ctx context.Context, from string, rVMCallerId string, to string, voiceMailURL string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/makervm.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["method"], "string", "method"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statusCallBackUrl"], "string", "statusCallBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["statsCallBackMethod"], "string", "statsCallBackMethod"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("From", parameterToString(from, ""))
	localVarFormParams.Add("RVMCallerId", parameterToString(rVMCallerId, ""))
	localVarFormParams.Add("To", parameterToString(to, ""))
	localVarFormParams.Add("VoiceMailURL", parameterToString(voiceMailURL, ""))
	if localVarTempParam, localVarOk := localVarOptionals["method"].(string); localVarOk {
		localVarFormParams.Add("Method", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statusCallBackUrl"].(string); localVarOk {
		localVarFormParams.Add("StatusCallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["statsCallBackMethod"].(string); localVarOk {
		localVarFormParams.Add("StatsCallBackMethod", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Play Audio
 Play Audio from a url
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier of each call resource
 @param audioUrl URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
 @param sayText Valid alphanumeric string that should be played to the In-progress call.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "length" (int32) Time limit in seconds for audio play back
     @param "direction" (string) The leg of the call audio will be played to
     @param "mix" (bool) If false, all other audio will be muted
 @return string*/
func (a *CallApiService) CallsPlayaudios(ctx context.Context, callSid string, audioUrl string, sayText string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/playaudios.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["length"], "int32", "length"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["direction"], "string", "direction"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["mix"], "bool", "mix"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("CallSid", parameterToString(callSid, ""))
	localVarFormParams.Add("AudioUrl", parameterToString(audioUrl, ""))
	localVarFormParams.Add("SayText", parameterToString(sayText, ""))
	if localVarTempParam, localVarOk := localVarOptionals["length"].(int32); localVarOk {
		localVarFormParams.Add("Length", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["direction"].(string); localVarOk {
		localVarFormParams.Add("Direction", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["mix"].(bool); localVarOk {
		localVarFormParams.Add("Mix", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Record Call
 Start or stop recording of an in-progress voice call.
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier of each call resource
 @param record Set true to initiate recording or false to terminate recording
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "direction" (string) The leg of the call to record
     @param "timeLimit" (int32) Time in seconds the recording duration should not exceed
     @param "callBackUrl" (string) URL consulted after the recording completes
     @param "fileformat" (string) Format of the recording file. Can be .mp3 or .wav
 @return string*/
func (a *CallApiService) CallsRecordcalls(ctx context.Context, callSid string, record bool, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/recordcalls.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["direction"], "string", "direction"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["timeLimit"], "int32", "timeLimit"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["callBackUrl"], "string", "callBackUrl"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["fileformat"], "string", "fileformat"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("CallSid", parameterToString(callSid, ""))
	localVarFormParams.Add("Record", parameterToString(record, ""))
	if localVarTempParam, localVarOk := localVarOptionals["direction"].(string); localVarOk {
		localVarFormParams.Add("Direction", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["timeLimit"].(int32); localVarOk {
		localVarFormParams.Add("TimeLimit", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["callBackUrl"].(string); localVarOk {
		localVarFormParams.Add("CallBackUrl", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["fileformat"].(string); localVarOk {
		localVarFormParams.Add("Fileformat", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Play DTMF
 Play Dtmf and send the Digit
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier of each call resource
 @param playDtmf DTMF digits to play to the call. 0-9, #, *, W, or w
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "playDtmfDirection" (string) The leg of the call DTMF digits should be sent to
 @return string*/
func (a *CallApiService) CallsSenddigits(ctx context.Context, callSid string, playDtmf string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/senddigits.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["playDtmfDirection"], "string", "playDtmfDirection"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("CallSid", parameterToString(callSid, ""))
	localVarFormParams.Add("PlayDtmf", parameterToString(playDtmf, ""))
	if localVarTempParam, localVarOk := localVarOptionals["playDtmfDirection"].(string); localVarOk {
		localVarFormParams.Add("PlayDtmfDirection", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService View Call
 Retrieve a single voice call’s information by its CallSid.
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier for the voice call.
 @return string*/
func (a *CallApiService) CallsViewcalldetail(ctx context.Context, callSid string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/viewcalldetail.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("callSid", parameterToString(callSid, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService View Call
 Retrieve a single voice call’s information by its CallSid.
 * @param ctx context.Context Authentication Context 
 @param callsid The unique identifier for the voice call.
 @return string*/
func (a *CallApiService) CallsViewcalls(ctx context.Context, callsid string) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/viewcalls.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("callsid", parameterToString(callsid, ""))
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CallApiService Voice Effect
 Add audio voice effects to the an in-progress voice call.
 * @param ctx context.Context Authentication Context 
 @param callSid The unique identifier for the in-progress voice call.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "audioDirection" (string) The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
     @param "pitchSemiTones" (float64) Set the pitch in semitone (half-step) intervals. Value between -14 and 14
     @param "pitchOctaves" (float64) Set the pitch in octave intervals.. Value between -1 and 1
     @param "pitch" (float64) Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
     @param "rate" (float64) Set the rate for audio. The lower the value, the lower the rate. value greater than 0
     @param "tempo" (float64) Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
 @return string*/
func (a *CallApiService) CallsVoiceeffect(ctx context.Context, callSid string, localVarOptionals map[string]interface{}) (string,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calls/voiceeffect.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["audioDirection"], "string", "audioDirection"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["pitchSemiTones"], "float64", "pitchSemiTones"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["pitchOctaves"], "float64", "pitchOctaves"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["pitch"], "float64", "pitch"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["rate"], "float64", "rate"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["tempo"], "float64", "tempo"); err != nil {
		return successPayload, nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("CallSid", parameterToString(callSid, ""))
	if localVarTempParam, localVarOk := localVarOptionals["audioDirection"].(string); localVarOk {
		localVarFormParams.Add("AudioDirection", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["pitchSemiTones"].(float64); localVarOk {
		localVarFormParams.Add("PitchSemiTones", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["pitchOctaves"].(float64); localVarOk {
		localVarFormParams.Add("PitchOctaves", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["pitch"].(float64); localVarOk {
		localVarFormParams.Add("Pitch", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["rate"].(float64); localVarOk {
		localVarFormParams.Add("Rate", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["tempo"].(float64); localVarOk {
		localVarFormParams.Add("Tempo", parameterToString(localVarTempParam, ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

