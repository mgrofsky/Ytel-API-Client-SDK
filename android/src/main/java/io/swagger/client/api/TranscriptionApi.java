/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TranscriptionApi {
  String basePath = "https://api.ytel.com/api/v3";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Transcribe Audio URL
  * Transcribe an audio recording from a file.
   * @param audiourl URL pointing to the location of the audio file that is to be transcribed.
   * @return String
  */
  public String transcriptionsAudiourltranscription (String audiourl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'audiourl' is set
    if (audiourl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audiourl' when calling transcriptionsAudiourltranscription",
        new ApiException(400, "Missing the required parameter 'audiourl' when calling transcriptionsAudiourltranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/audiourltranscription.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (audiourl != null) {
        localVarBuilder.addTextBody("audiourl", ApiInvoker.parameterToString(audiourl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("audiourl", ApiInvoker.parameterToString(audiourl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transcribe Audio URL
   * Transcribe an audio recording from a file.
   * @param audiourl URL pointing to the location of the audio file that is to be transcribed.
  */
  public void transcriptionsAudiourltranscription (String audiourl, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'audiourl' is set
    if (audiourl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audiourl' when calling transcriptionsAudiourltranscription",
        new ApiException(400, "Missing the required parameter 'audiourl' when calling transcriptionsAudiourltranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/audiourltranscription.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (audiourl != null) {
        localVarBuilder.addTextBody("audiourl", ApiInvoker.parameterToString(audiourl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("audiourl", ApiInvoker.parameterToString(audiourl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Transcriptions
  * Retrieve a list of transcription objects for your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param status The state of the transcription.
   * @param dateTranscribed The date the transcription took place.
   * @return String
  */
  public String transcriptionsListtranscription (Integer page, Integer pagesize, String status, String dateTranscribed) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/transcriptions/listtranscription.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (status != null) {
        localVarBuilder.addTextBody("status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateTranscribed != null) {
        localVarBuilder.addTextBody("dateTranscribed", ApiInvoker.parameterToString(dateTranscribed), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("status", ApiInvoker.parameterToString(status));
      formParams.put("dateTranscribed", ApiInvoker.parameterToString(dateTranscribed));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Transcriptions
   * Retrieve a list of transcription objects for your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.   * @param status The state of the transcription.   * @param dateTranscribed The date the transcription took place.
  */
  public void transcriptionsListtranscription (Integer page, Integer pagesize, String status, String dateTranscribed, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/transcriptions/listtranscription.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (status != null) {
        localVarBuilder.addTextBody("status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateTranscribed != null) {
        localVarBuilder.addTextBody("dateTranscribed", ApiInvoker.parameterToString(dateTranscribed), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("status", ApiInvoker.parameterToString(status));
formParams.put("dateTranscribed", ApiInvoker.parameterToString(dateTranscribed));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transcribe Recording
  * Transcribe a recording by its RecordingSid.
   * @param recordingSid The unique identifier for a recording object.
   * @return String
  */
  public String transcriptionsRecordingtranscription (String recordingSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'recordingSid' is set
    if (recordingSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'recordingSid' when calling transcriptionsRecordingtranscription",
        new ApiException(400, "Missing the required parameter 'recordingSid' when calling transcriptionsRecordingtranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/recordingtranscription.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (recordingSid != null) {
        localVarBuilder.addTextBody("recordingSid", ApiInvoker.parameterToString(recordingSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("recordingSid", ApiInvoker.parameterToString(recordingSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Transcribe Recording
   * Transcribe a recording by its RecordingSid.
   * @param recordingSid The unique identifier for a recording object.
  */
  public void transcriptionsRecordingtranscription (String recordingSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'recordingSid' is set
    if (recordingSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'recordingSid' when calling transcriptionsRecordingtranscription",
        new ApiException(400, "Missing the required parameter 'recordingSid' when calling transcriptionsRecordingtranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/recordingtranscription.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (recordingSid != null) {
        localVarBuilder.addTextBody("recordingSid", ApiInvoker.parameterToString(recordingSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("recordingSid", ApiInvoker.parameterToString(recordingSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Transcription
  * Retrieve information about a transaction by its TranscriptionSid.
   * @param transcriptionsid The unique identifier for a transcription object.
   * @return String
  */
  public String transcriptionsViewtranscription (String transcriptionsid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'transcriptionsid' is set
    if (transcriptionsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transcriptionsid' when calling transcriptionsViewtranscription",
        new ApiException(400, "Missing the required parameter 'transcriptionsid' when calling transcriptionsViewtranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/viewtranscription.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (transcriptionsid != null) {
        localVarBuilder.addTextBody("transcriptionsid", ApiInvoker.parameterToString(transcriptionsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("transcriptionsid", ApiInvoker.parameterToString(transcriptionsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Transcription
   * Retrieve information about a transaction by its TranscriptionSid.
   * @param transcriptionsid The unique identifier for a transcription object.
  */
  public void transcriptionsViewtranscription (String transcriptionsid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'transcriptionsid' is set
    if (transcriptionsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transcriptionsid' when calling transcriptionsViewtranscription",
        new ApiException(400, "Missing the required parameter 'transcriptionsid' when calling transcriptionsViewtranscription"));
    }

    // create path and map variables
    String path = "/transcriptions/viewtranscription.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (transcriptionsid != null) {
        localVarBuilder.addTextBody("transcriptionsid", ApiInvoker.parameterToString(transcriptionsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("transcriptionsid", ApiInvoker.parameterToString(transcriptionsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
