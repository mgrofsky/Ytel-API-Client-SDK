/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class LetterApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create Letter
  * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
   * @param to The AddressId or an object structured when creating an address by addresses/Create.
   * @param from The AddressId or an object structured when creating an address by addresses/Create.
   * @param attachbyid Set an existing letter by attaching its LetterId.
   * @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.
   * @param color Specify if letter should be printed in color.
   * @param description A description for the letter.
   * @param extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
   * @param doublesided Specify if letter should be printed on both sides.
   * @param template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
   * @param htmldata A string value that contains HTML markup.
   * @return String
  */
  public String letterCreate (String to, String from, String attachbyid, String file, String color, String description, String extraservice, String doublesided, String template, String htmldata) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'to' when calling letterCreate"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'from' when calling letterCreate"));
    }
    // verify the required parameter 'attachbyid' is set
    if (attachbyid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachbyid' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'attachbyid' when calling letterCreate"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'file' when calling letterCreate"));
    }
    // verify the required parameter 'color' is set
    if (color == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'color' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'color' when calling letterCreate"));
    }

    // create path and map variables
    String path = "/letter/create.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (attachbyid != null) {
        localVarBuilder.addTextBody("attachbyid", ApiInvoker.parameterToString(attachbyid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (file != null) {
        localVarBuilder.addTextBody("file", ApiInvoker.parameterToString(file), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (color != null) {
        localVarBuilder.addTextBody("color", ApiInvoker.parameterToString(color), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (extraservice != null) {
        localVarBuilder.addTextBody("extraservice", ApiInvoker.parameterToString(extraservice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (doublesided != null) {
        localVarBuilder.addTextBody("doublesided", ApiInvoker.parameterToString(doublesided), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (template != null) {
        localVarBuilder.addTextBody("template", ApiInvoker.parameterToString(template), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (htmldata != null) {
        localVarBuilder.addTextBody("htmldata", ApiInvoker.parameterToString(htmldata), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("to", ApiInvoker.parameterToString(to));
      formParams.put("from", ApiInvoker.parameterToString(from));
      formParams.put("attachbyid", ApiInvoker.parameterToString(attachbyid));
      formParams.put("file", ApiInvoker.parameterToString(file));
      formParams.put("color", ApiInvoker.parameterToString(color));
      formParams.put("description", ApiInvoker.parameterToString(description));
      formParams.put("extraservice", ApiInvoker.parameterToString(extraservice));
      formParams.put("doublesided", ApiInvoker.parameterToString(doublesided));
      formParams.put("template", ApiInvoker.parameterToString(template));
      formParams.put("htmldata", ApiInvoker.parameterToString(htmldata));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Letter
   * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
   * @param to The AddressId or an object structured when creating an address by addresses/Create.   * @param from The AddressId or an object structured when creating an address by addresses/Create.   * @param attachbyid Set an existing letter by attaching its LetterId.   * @param file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.   * @param color Specify if letter should be printed in color.   * @param description A description for the letter.   * @param extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.   * @param doublesided Specify if letter should be printed on both sides.   * @param template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.   * @param htmldata A string value that contains HTML markup.
  */
  public void letterCreate (String to, String from, String attachbyid, String file, String color, String description, String extraservice, String doublesided, String template, String htmldata, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'to' when calling letterCreate"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'from' when calling letterCreate"));
    }
    // verify the required parameter 'attachbyid' is set
    if (attachbyid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachbyid' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'attachbyid' when calling letterCreate"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'file' when calling letterCreate"));
    }
    // verify the required parameter 'color' is set
    if (color == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'color' when calling letterCreate",
        new ApiException(400, "Missing the required parameter 'color' when calling letterCreate"));
    }

    // create path and map variables
    String path = "/letter/create.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (attachbyid != null) {
        localVarBuilder.addTextBody("attachbyid", ApiInvoker.parameterToString(attachbyid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (file != null) {
        localVarBuilder.addTextBody("file", ApiInvoker.parameterToString(file), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (color != null) {
        localVarBuilder.addTextBody("color", ApiInvoker.parameterToString(color), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (extraservice != null) {
        localVarBuilder.addTextBody("extraservice", ApiInvoker.parameterToString(extraservice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (doublesided != null) {
        localVarBuilder.addTextBody("doublesided", ApiInvoker.parameterToString(doublesided), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (template != null) {
        localVarBuilder.addTextBody("template", ApiInvoker.parameterToString(template), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (htmldata != null) {
        localVarBuilder.addTextBody("htmldata", ApiInvoker.parameterToString(htmldata), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("to", ApiInvoker.parameterToString(to));
formParams.put("from", ApiInvoker.parameterToString(from));
formParams.put("attachbyid", ApiInvoker.parameterToString(attachbyid));
formParams.put("file", ApiInvoker.parameterToString(file));
formParams.put("color", ApiInvoker.parameterToString(color));
formParams.put("description", ApiInvoker.parameterToString(description));
formParams.put("extraservice", ApiInvoker.parameterToString(extraservice));
formParams.put("doublesided", ApiInvoker.parameterToString(doublesided));
formParams.put("template", ApiInvoker.parameterToString(template));
formParams.put("htmldata", ApiInvoker.parameterToString(htmldata));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Letter
  * Remove a letter object by its LetterId.
   * @param lettersid The unique identifier for a letter object.
   * @return String
  */
  public String letterDelete (String lettersid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lettersid' is set
    if (lettersid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lettersid' when calling letterDelete",
        new ApiException(400, "Missing the required parameter 'lettersid' when calling letterDelete"));
    }

    // create path and map variables
    String path = "/letter/delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Letter
   * Remove a letter object by its LetterId.
   * @param lettersid The unique identifier for a letter object.
  */
  public void letterDelete (String lettersid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lettersid' is set
    if (lettersid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lettersid' when calling letterDelete",
        new ApiException(400, "Missing the required parameter 'lettersid' when calling letterDelete"));
    }

    // create path and map variables
    String path = "/letter/delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Letters
  * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param lettersid The unique identifier for a letter object.
   * @param dateCreated The date the letter was created.
   * @return String
  */
  public String letterListsletter (Integer page, Integer pagesize, String lettersid, String dateCreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/letter/listsletter.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateCreated != null) {
        localVarBuilder.addTextBody("dateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
      formParams.put("dateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Letters
   * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.   * @param lettersid The unique identifier for a letter object.   * @param dateCreated The date the letter was created.
  */
  public void letterListsletter (Integer page, Integer pagesize, String lettersid, String dateCreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/letter/listsletter.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateCreated != null) {
        localVarBuilder.addTextBody("dateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
formParams.put("dateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Letter
  * Retrieve a letter object by its LetterSid.
   * @param lettersid The unique identifier for a letter object.
   * @return String
  */
  public String letterViewletter (String lettersid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lettersid' is set
    if (lettersid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lettersid' when calling letterViewletter",
        new ApiException(400, "Missing the required parameter 'lettersid' when calling letterViewletter"));
    }

    // create path and map variables
    String path = "/letter/viewletter.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Letter
   * Retrieve a letter object by its LetterSid.
   * @param lettersid The unique identifier for a letter object.
  */
  public void letterViewletter (String lettersid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lettersid' is set
    if (lettersid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lettersid' when calling letterViewletter",
        new ApiException(400, "Missing the required parameter 'lettersid' when calling letterViewletter"));
    }

    // create path and map variables
    String path = "/letter/viewletter.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (lettersid != null) {
        localVarBuilder.addTextBody("lettersid", ApiInvoker.parameterToString(lettersid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("lettersid", ApiInvoker.parameterToString(lettersid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
