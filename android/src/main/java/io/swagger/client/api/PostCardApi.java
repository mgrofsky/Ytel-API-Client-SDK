/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PostCardApi {
  String basePath = "https://api.ytel.com/api/v3";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create Postcard
  * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
   * @param to The AddressId or an object structured when creating an address by addresses/Create.
   * @param from The AddressId or an object structured when creating an address by addresses/Create.
   * @param attachbyid Set an existing postcard by attaching its PostcardId.
   * @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
   * @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
   * @param message The message for the back of the postcard with a maximum of 350 characters.
   * @param setting Code for the dimensions of the media to be printed.
   * @param description A description for the postcard.
   * @param htmldata A string value that contains HTML markup.
   * @return String
  */
  public String postcardCreatepostcard (String to, String from, String attachbyid, String front, String back, String message, String setting, String description, String htmldata) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'to' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'from' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'attachbyid' is set
    if (attachbyid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachbyid' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'attachbyid' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'front' is set
    if (front == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'front' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'front' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'back' is set
    if (back == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'back' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'back' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'message' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'setting' is set
    if (setting == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setting' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'setting' when calling postcardCreatepostcard"));
    }

    // create path and map variables
    String path = "/Postcard/createpostcard.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (attachbyid != null) {
        localVarBuilder.addTextBody("attachbyid", ApiInvoker.parameterToString(attachbyid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (front != null) {
        localVarBuilder.addTextBody("front", ApiInvoker.parameterToString(front), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (back != null) {
        localVarBuilder.addTextBody("back", ApiInvoker.parameterToString(back), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (message != null) {
        localVarBuilder.addTextBody("message", ApiInvoker.parameterToString(message), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (setting != null) {
        localVarBuilder.addTextBody("setting", ApiInvoker.parameterToString(setting), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (htmldata != null) {
        localVarBuilder.addTextBody("htmldata", ApiInvoker.parameterToString(htmldata), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("to", ApiInvoker.parameterToString(to));
      formParams.put("from", ApiInvoker.parameterToString(from));
      formParams.put("attachbyid", ApiInvoker.parameterToString(attachbyid));
      formParams.put("front", ApiInvoker.parameterToString(front));
      formParams.put("back", ApiInvoker.parameterToString(back));
      formParams.put("message", ApiInvoker.parameterToString(message));
      formParams.put("setting", ApiInvoker.parameterToString(setting));
      formParams.put("description", ApiInvoker.parameterToString(description));
      formParams.put("htmldata", ApiInvoker.parameterToString(htmldata));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Postcard
   * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
   * @param to The AddressId or an object structured when creating an address by addresses/Create.   * @param from The AddressId or an object structured when creating an address by addresses/Create.   * @param attachbyid Set an existing postcard by attaching its PostcardId.   * @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.   * @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.   * @param message The message for the back of the postcard with a maximum of 350 characters.   * @param setting Code for the dimensions of the media to be printed.   * @param description A description for the postcard.   * @param htmldata A string value that contains HTML markup.
  */
  public void postcardCreatepostcard (String to, String from, String attachbyid, String front, String back, String message, String setting, String description, String htmldata, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'to' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'from' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'attachbyid' is set
    if (attachbyid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachbyid' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'attachbyid' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'front' is set
    if (front == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'front' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'front' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'back' is set
    if (back == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'back' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'back' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'message' when calling postcardCreatepostcard"));
    }
    // verify the required parameter 'setting' is set
    if (setting == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setting' when calling postcardCreatepostcard",
        new ApiException(400, "Missing the required parameter 'setting' when calling postcardCreatepostcard"));
    }

    // create path and map variables
    String path = "/Postcard/createpostcard.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (attachbyid != null) {
        localVarBuilder.addTextBody("attachbyid", ApiInvoker.parameterToString(attachbyid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (front != null) {
        localVarBuilder.addTextBody("front", ApiInvoker.parameterToString(front), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (back != null) {
        localVarBuilder.addTextBody("back", ApiInvoker.parameterToString(back), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (message != null) {
        localVarBuilder.addTextBody("message", ApiInvoker.parameterToString(message), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (setting != null) {
        localVarBuilder.addTextBody("setting", ApiInvoker.parameterToString(setting), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (htmldata != null) {
        localVarBuilder.addTextBody("htmldata", ApiInvoker.parameterToString(htmldata), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("to", ApiInvoker.parameterToString(to));
formParams.put("from", ApiInvoker.parameterToString(from));
formParams.put("attachbyid", ApiInvoker.parameterToString(attachbyid));
formParams.put("front", ApiInvoker.parameterToString(front));
formParams.put("back", ApiInvoker.parameterToString(back));
formParams.put("message", ApiInvoker.parameterToString(message));
formParams.put("setting", ApiInvoker.parameterToString(setting));
formParams.put("description", ApiInvoker.parameterToString(description));
formParams.put("htmldata", ApiInvoker.parameterToString(htmldata));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Postcard
  * Remove a postcard object.
   * @param postcardid The unique identifier of a postcard object.
   * @return String
  */
  public String postcardDeletepostcard (String postcardid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'postcardid' is set
    if (postcardid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postcardid' when calling postcardDeletepostcard",
        new ApiException(400, "Missing the required parameter 'postcardid' when calling postcardDeletepostcard"));
    }

    // create path and map variables
    String path = "/Postcard/deletepostcard.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Postcard
   * Remove a postcard object.
   * @param postcardid The unique identifier of a postcard object.
  */
  public void postcardDeletepostcard (String postcardid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'postcardid' is set
    if (postcardid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postcardid' when calling postcardDeletepostcard",
        new ApiException(400, "Missing the required parameter 'postcardid' when calling postcardDeletepostcard"));
    }

    // create path and map variables
    String path = "/Postcard/deletepostcard.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Postcards
  * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param postcardid The unique identifier for a postcard object.
   * @param dateCreated The date the postcard was created.
   * @return String
  */
  public String postcardListpostcard (Integer page, Integer pagesize, String postcardid, String dateCreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/Postcard/listpostcard.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateCreated != null) {
        localVarBuilder.addTextBody("dateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
      formParams.put("dateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Postcards
   * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.   * @param postcardid The unique identifier for a postcard object.   * @param dateCreated The date the postcard was created.
  */
  public void postcardListpostcard (Integer page, Integer pagesize, String postcardid, String dateCreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/Postcard/listpostcard.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateCreated != null) {
        localVarBuilder.addTextBody("dateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
formParams.put("dateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Postcard
  * Retrieve a postcard object by its PostcardId.
   * @param postcardid The unique identifier for a postcard object.
   * @return String
  */
  public String postcardViewpostcard (String postcardid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'postcardid' is set
    if (postcardid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postcardid' when calling postcardViewpostcard",
        new ApiException(400, "Missing the required parameter 'postcardid' when calling postcardViewpostcard"));
    }

    // create path and map variables
    String path = "/Postcard/viewpostcard.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Postcard
   * Retrieve a postcard object by its PostcardId.
   * @param postcardid The unique identifier for a postcard object.
  */
  public void postcardViewpostcard (String postcardid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'postcardid' is set
    if (postcardid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postcardid' when calling postcardViewpostcard",
        new ApiException(400, "Missing the required parameter 'postcardid' when calling postcardViewpostcard"));
    }

    // create path and map variables
    String path = "/Postcard/viewpostcard.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (postcardid != null) {
        localVarBuilder.addTextBody("postcardid", ApiInvoker.parameterToString(postcardid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("postcardid", ApiInvoker.parameterToString(postcardid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
