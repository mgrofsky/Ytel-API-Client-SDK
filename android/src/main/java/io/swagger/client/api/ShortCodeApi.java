/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ShortCodeApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * List Inbound SMS
  * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize Number of individual resources listed in the response per page
   * @param from Only list SMS messages sent from this number
   * @param shortcode Only list SMS messages sent to Shortcode
   * @param datecreated Only list SMS messages sent in the specified date MAKE REQUEST
   * @return String
  */
  public String dedicatedshortcodeGetinboundsms (Integer page, Integer pagesize, String from, String shortcode, String datecreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/dedicatedshortcode/getinboundsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (datecreated != null) {
        localVarBuilder.addTextBody("Datecreated", ApiInvoker.parameterToString(datecreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("Datecreated", ApiInvoker.parameterToString(datecreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Inbound SMS
   * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize Number of individual resources listed in the response per page   * @param from Only list SMS messages sent from this number   * @param shortcode Only list SMS messages sent to Shortcode   * @param datecreated Only list SMS messages sent in the specified date MAKE REQUEST
  */
  public void dedicatedshortcodeGetinboundsms (Integer page, Integer pagesize, String from, String shortcode, String datecreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/dedicatedshortcode/getinboundsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (datecreated != null) {
        localVarBuilder.addTextBody("Datecreated", ApiInvoker.parameterToString(datecreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("Datecreated", ApiInvoker.parameterToString(datecreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Shortcodes
  * Retrieve a list of Short Code assignment associated with your Ytel account.
   * @param shortcode Only list Short Code Assignment sent from this Short Code
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @return String
  */
  public String dedicatedshortcodeListshortcode (String shortcode, String page, String pagesize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/dedicatedshortcode/listshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Shortcodes
   * Retrieve a list of Short Code assignment associated with your Ytel account.
   * @param shortcode Only list Short Code Assignment sent from this Short Code   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.
  */
  public void dedicatedshortcodeListshortcode (String shortcode, String page, String pagesize, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/dedicatedshortcode/listshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send SMS
  * Send Dedicated Shortcode
   * @param shortcode Your dedicated shortcode
   * @param to The number to send your SMS to
   * @param body The body of your message
   * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
   * @param messagestatuscallback URL that can be requested to receive notification when Short Code message was sent.
   * @return String
  */
  public String dedicatedshortcodeSendsms (Integer shortcode, Double to, String body, String method, String messagestatuscallback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeSendsms"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'to' when calling dedicatedshortcodeSendsms"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'body' when calling dedicatedshortcodeSendsms"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/sendsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (body != null) {
        localVarBuilder.addTextBody("body", ApiInvoker.parameterToString(body), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (messagestatuscallback != null) {
        localVarBuilder.addTextBody("messagestatuscallback", ApiInvoker.parameterToString(messagestatuscallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("to", ApiInvoker.parameterToString(to));
      formParams.put("body", ApiInvoker.parameterToString(body));
      formParams.put("method", ApiInvoker.parameterToString(method));
      formParams.put("messagestatuscallback", ApiInvoker.parameterToString(messagestatuscallback));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send SMS
   * Send Dedicated Shortcode
   * @param shortcode Your dedicated shortcode   * @param to The number to send your SMS to   * @param body The body of your message   * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST   * @param messagestatuscallback URL that can be requested to receive notification when Short Code message was sent.
  */
  public void dedicatedshortcodeSendsms (Integer shortcode, Double to, String body, String method, String messagestatuscallback, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeSendsms"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'to' when calling dedicatedshortcodeSendsms"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling dedicatedshortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'body' when calling dedicatedshortcodeSendsms"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/sendsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (body != null) {
        localVarBuilder.addTextBody("body", ApiInvoker.parameterToString(body), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (messagestatuscallback != null) {
        localVarBuilder.addTextBody("messagestatuscallback", ApiInvoker.parameterToString(messagestatuscallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("to", ApiInvoker.parameterToString(to));
formParams.put("body", ApiInvoker.parameterToString(body));
formParams.put("method", ApiInvoker.parameterToString(method));
formParams.put("messagestatuscallback", ApiInvoker.parameterToString(messagestatuscallback));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Shortcode
  * Update a dedicated shortcode.
   * @param shortcode List of valid dedicated shortcode to your Ytel account.
   * @param friendlyName User generated name of the dedicated shortcode.
   * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
   * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
   * @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
   * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
   * @return String
  */
  public String dedicatedshortcodeUpdateshortcode (String shortcode, String friendlyName, String callbackMethod, String callbackUrl, String fallbackMethod, String fallbackUrl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeUpdateshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeUpdateshortcode"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/updateshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (callbackMethod != null) {
        localVarBuilder.addTextBody("CallbackMethod", ApiInvoker.parameterToString(callbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (callbackUrl != null) {
        localVarBuilder.addTextBody("CallbackUrl", ApiInvoker.parameterToString(callbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackMethod != null) {
        localVarBuilder.addTextBody("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
      formParams.put("CallbackMethod", ApiInvoker.parameterToString(callbackMethod));
      formParams.put("CallbackUrl", ApiInvoker.parameterToString(callbackUrl));
      formParams.put("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod));
      formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Shortcode
   * Update a dedicated shortcode.
   * @param shortcode List of valid dedicated shortcode to your Ytel account.   * @param friendlyName User generated name of the dedicated shortcode.   * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.   * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.   * @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.   * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
  */
  public void dedicatedshortcodeUpdateshortcode (String shortcode, String friendlyName, String callbackMethod, String callbackUrl, String fallbackMethod, String fallbackUrl, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeUpdateshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeUpdateshortcode"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/updateshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callbackMethod != null) {
        localVarBuilder.addTextBody("CallbackMethod", ApiInvoker.parameterToString(callbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callbackUrl != null) {
        localVarBuilder.addTextBody("CallbackUrl", ApiInvoker.parameterToString(callbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackMethod != null) {
        localVarBuilder.addTextBody("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
formParams.put("CallbackMethod", ApiInvoker.parameterToString(callbackMethod));
formParams.put("CallbackUrl", ApiInvoker.parameterToString(callbackUrl));
formParams.put("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod));
formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View SMS
  * Retrieve a single Short Code object by its shortcode assignment.
   * @param shortcode List of valid Dedicated Short Code to your Ytel account
   * @return String
  */
  public String dedicatedshortcodeViewshortcode (String shortcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeViewshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeViewshortcode"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/viewshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View SMS
   * Retrieve a single Short Code object by its shortcode assignment.
   * @param shortcode List of valid Dedicated Short Code to your Ytel account
  */
  public void dedicatedshortcodeViewshortcode (String shortcode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling dedicatedshortcodeViewshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling dedicatedshortcodeViewshortcode"));
    }

    // create path and map variables
    String path = "/dedicatedshortcode/viewshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List SMS
  * Retrieve a list of Short Code messages.
   * @param shortcode Only list messages sent from this Short Code
   * @param to Only list messages sent to this number
   * @param dateSent Only list messages sent with the specified date
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pageSize The count of objects to return per page.
   * @return String
  */
  public String shortcodeListsms (String shortcode, String to, String dateSent, Integer page, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/shortcode/listsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateSent != null) {
        localVarBuilder.addTextBody("DateSent", ApiInvoker.parameterToString(dateSent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("DateSent", ApiInvoker.parameterToString(dateSent));
      formParams.put("Page", ApiInvoker.parameterToString(page));
      formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List SMS
   * Retrieve a list of Short Code messages.
   * @param shortcode Only list messages sent from this Short Code   * @param to Only list messages sent to this number   * @param dateSent Only list messages sent with the specified date   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pageSize The count of objects to return per page.
  */
  public void shortcodeListsms (String shortcode, String to, String dateSent, Integer page, Integer pageSize, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/shortcode/listsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateSent != null) {
        localVarBuilder.addTextBody("DateSent", ApiInvoker.parameterToString(dateSent), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("DateSent", ApiInvoker.parameterToString(dateSent));
formParams.put("Page", ApiInvoker.parameterToString(page));
formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View SMS
  * View a single Sms Short Code message.
   * @param messageSid The unique identifier for the sms resource
   * @return String
  */
  public String shortcodeViewsms (String messageSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'messageSid' is set
    if (messageSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageSid' when calling shortcodeViewsms",
        new ApiException(400, "Missing the required parameter 'messageSid' when calling shortcodeViewsms"));
    }

    // create path and map variables
    String path = "/shortcode/viewsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (messageSid != null) {
        localVarBuilder.addTextBody("MessageSid", ApiInvoker.parameterToString(messageSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("MessageSid", ApiInvoker.parameterToString(messageSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View SMS
   * View a single Sms Short Code message.
   * @param messageSid The unique identifier for the sms resource
  */
  public void shortcodeViewsms (String messageSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'messageSid' is set
    if (messageSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageSid' when calling shortcodeViewsms",
        new ApiException(400, "Missing the required parameter 'messageSid' when calling shortcodeViewsms"));
    }

    // create path and map variables
    String path = "/shortcode/viewsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (messageSid != null) {
        localVarBuilder.addTextBody("MessageSid", ApiInvoker.parameterToString(messageSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("MessageSid", ApiInvoker.parameterToString(messageSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
