/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PhoneNumberApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Available Numbers
  * Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
   * @param numbertype Number type either SMS,Voice or all
   * @param areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers.
   * @param pagesize The count of objects to return.
   * @return String
  */
  public String incomingphoneAvailablenumber (String numbertype, String areacode, Integer pagesize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'numbertype' is set
    if (numbertype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numbertype' when calling incomingphoneAvailablenumber",
        new ApiException(400, "Missing the required parameter 'numbertype' when calling incomingphoneAvailablenumber"));
    }
    // verify the required parameter 'areacode' is set
    if (areacode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areacode' when calling incomingphoneAvailablenumber",
        new ApiException(400, "Missing the required parameter 'areacode' when calling incomingphoneAvailablenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/availablenumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (numbertype != null) {
        localVarBuilder.addTextBody("numbertype", ApiInvoker.parameterToString(numbertype), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (areacode != null) {
        localVarBuilder.addTextBody("areacode", ApiInvoker.parameterToString(areacode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("numbertype", ApiInvoker.parameterToString(numbertype));
      formParams.put("areacode", ApiInvoker.parameterToString(areacode));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Available Numbers
   * Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
   * @param numbertype Number type either SMS,Voice or all   * @param areacode Specifies the area code for the returned list of available numbers. Only available for North American numbers.   * @param pagesize The count of objects to return.
  */
  public void incomingphoneAvailablenumber (String numbertype, String areacode, Integer pagesize, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'numbertype' is set
    if (numbertype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numbertype' when calling incomingphoneAvailablenumber",
        new ApiException(400, "Missing the required parameter 'numbertype' when calling incomingphoneAvailablenumber"));
    }
    // verify the required parameter 'areacode' is set
    if (areacode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areacode' when calling incomingphoneAvailablenumber",
        new ApiException(400, "Missing the required parameter 'areacode' when calling incomingphoneAvailablenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/availablenumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (numbertype != null) {
        localVarBuilder.addTextBody("numbertype", ApiInvoker.parameterToString(numbertype), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (areacode != null) {
        localVarBuilder.addTextBody("areacode", ApiInvoker.parameterToString(areacode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("numbertype", ApiInvoker.parameterToString(numbertype));
formParams.put("areacode", ApiInvoker.parameterToString(areacode));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Bulk Buy Numbers
  * Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
   * @param numberType The capability the number supports.
   * @param areaCode Specifies the area code for the returned list of available numbers. Only available for North American numbers.
   * @param quantity A positive integer that tells how many number you want to buy at a time.
   * @param leftover If desired quantity is unavailable purchase what is available .
   * @return String
  */
  public String incomingphoneBulkbuy (String numberType, String areaCode, String quantity, String leftover) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'numberType' is set
    if (numberType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numberType' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'numberType' when calling incomingphoneBulkbuy"));
    }
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling incomingphoneBulkbuy"));
    }
    // verify the required parameter 'quantity' is set
    if (quantity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'quantity' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'quantity' when calling incomingphoneBulkbuy"));
    }

    // create path and map variables
    String path = "/incomingphone/bulkbuy.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (numberType != null) {
        localVarBuilder.addTextBody("NumberType", ApiInvoker.parameterToString(numberType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (areaCode != null) {
        localVarBuilder.addTextBody("AreaCode", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (quantity != null) {
        localVarBuilder.addTextBody("Quantity", ApiInvoker.parameterToString(quantity), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (leftover != null) {
        localVarBuilder.addTextBody("Leftover", ApiInvoker.parameterToString(leftover), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("NumberType", ApiInvoker.parameterToString(numberType));
      formParams.put("AreaCode", ApiInvoker.parameterToString(areaCode));
      formParams.put("Quantity", ApiInvoker.parameterToString(quantity));
      formParams.put("Leftover", ApiInvoker.parameterToString(leftover));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Bulk Buy Numbers
   * Purchase a selected number of DID&#39;s from specific area codes to be used with your Ytel account.
   * @param numberType The capability the number supports.   * @param areaCode Specifies the area code for the returned list of available numbers. Only available for North American numbers.   * @param quantity A positive integer that tells how many number you want to buy at a time.   * @param leftover If desired quantity is unavailable purchase what is available .
  */
  public void incomingphoneBulkbuy (String numberType, String areaCode, String quantity, String leftover, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'numberType' is set
    if (numberType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'numberType' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'numberType' when calling incomingphoneBulkbuy"));
    }
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling incomingphoneBulkbuy"));
    }
    // verify the required parameter 'quantity' is set
    if (quantity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'quantity' when calling incomingphoneBulkbuy",
        new ApiException(400, "Missing the required parameter 'quantity' when calling incomingphoneBulkbuy"));
    }

    // create path and map variables
    String path = "/incomingphone/bulkbuy.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (numberType != null) {
        localVarBuilder.addTextBody("NumberType", ApiInvoker.parameterToString(numberType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("AreaCode", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (quantity != null) {
        localVarBuilder.addTextBody("Quantity", ApiInvoker.parameterToString(quantity), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (leftover != null) {
        localVarBuilder.addTextBody("Leftover", ApiInvoker.parameterToString(leftover), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("NumberType", ApiInvoker.parameterToString(numberType));
formParams.put("AreaCode", ApiInvoker.parameterToString(areaCode));
formParams.put("Quantity", ApiInvoker.parameterToString(quantity));
formParams.put("Leftover", ApiInvoker.parameterToString(leftover));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Purchase Number
  * Purchase a phone number to be used with your Ytel account
   * @param phoneNumber A valid 10-digit Ytel number (E.164 format).
   * @return String
  */
  public String incomingphoneBuynumber (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneBuynumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneBuynumber"));
    }

    // create path and map variables
    String path = "/incomingphone/buynumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Purchase Number
   * Purchase a phone number to be used with your Ytel account
   * @param phoneNumber A valid 10-digit Ytel number (E.164 format).
  */
  public void incomingphoneBuynumber (String phoneNumber, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneBuynumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneBuynumber"));
    }

    // create path and map variables
    String path = "/incomingphone/buynumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get DID Score
  * Get DID Score Number
   * @param phonenumber Specifies the multiple phone numbers for check updated spamscore .
   * @return String
  */
  public String incomingphoneGetdidscore (String phonenumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling incomingphoneGetdidscore",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling incomingphoneGetdidscore"));
    }

    // create path and map variables
    String path = "/incomingphone/getdidscore.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phonenumber != null) {
        localVarBuilder.addTextBody("Phonenumber", ApiInvoker.parameterToString(phonenumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Phonenumber", ApiInvoker.parameterToString(phonenumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get DID Score
   * Get DID Score Number
   * @param phonenumber Specifies the multiple phone numbers for check updated spamscore .
  */
  public void incomingphoneGetdidscore (String phonenumber, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling incomingphoneGetdidscore",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling incomingphoneGetdidscore"));
    }

    // create path and map variables
    String path = "/incomingphone/getdidscore.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phonenumber != null) {
        localVarBuilder.addTextBody("Phonenumber", ApiInvoker.parameterToString(phonenumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Phonenumber", ApiInvoker.parameterToString(phonenumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Numbers
  * Retrieve a list of purchased phones numbers associated with your Ytel account.
   * @param page Which page of the overall response will be returned. Page indexing starts at 1.
   * @param pageSize The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param numberType The capability supported by the number.Number type either SMS,Voice or all
   * @param friendlyName A human-readable label added to the number object.
   * @return String
  */
  public String incomingphoneListnumber (Integer page, Integer pageSize, String numberType, String friendlyName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/incomingphone/listnumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (numberType != null) {
        localVarBuilder.addTextBody("NumberType", ApiInvoker.parameterToString(numberType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Page", ApiInvoker.parameterToString(page));
      formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
      formParams.put("NumberType", ApiInvoker.parameterToString(numberType));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Numbers
   * Retrieve a list of purchased phones numbers associated with your Ytel account.
   * @param page Which page of the overall response will be returned. Page indexing starts at 1.   * @param pageSize The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param numberType The capability supported by the number.Number type either SMS,Voice or all   * @param friendlyName A human-readable label added to the number object.
  */
  public void incomingphoneListnumber (Integer page, Integer pageSize, String numberType, String friendlyName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/incomingphone/listnumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (numberType != null) {
        localVarBuilder.addTextBody("NumberType", ApiInvoker.parameterToString(numberType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Page", ApiInvoker.parameterToString(page));
formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
formParams.put("NumberType", ApiInvoker.parameterToString(numberType));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Bulk Release
  * Remove a purchased Ytel number from your account.
   * @param phoneNumber A valid Ytel comma separated numbers (E.164 format).
   * @return String
  */
  public String incomingphoneMassreleasenumber (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneMassreleasenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneMassreleasenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/massreleasenumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Bulk Release
   * Remove a purchased Ytel number from your account.
   * @param phoneNumber A valid Ytel comma separated numbers (E.164 format).
  */
  public void incomingphoneMassreleasenumber (String phoneNumber, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneMassreleasenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneMassreleasenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/massreleasenumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Bulk Update Numbers
  * Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
   * @param phoneNumber A valid comma(,) separated Ytel numbers. (E.164 format).
   * @param voiceUrl The URL returning InboundXML incoming calls should execute when connected.
   * @param friendlyName A human-readable value for labeling the number.
   * @param voiceMethod Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
   * @param voiceFallbackUrl URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
   * @param voiceFallbackMethod Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
   * @param hangupCallback URL that can be requested to receive notification when and how incoming call has ended.
   * @param hangupCallbackMethod The HTTP method Ytel will use when requesting the HangupCallback URL.
   * @param heartbeatUrl URL that can be used to monitor the phone number.
   * @param heartbeatMethod The HTTP method Ytel will use when requesting the HeartbeatUrl.
   * @param smsUrl URL requested when an SMS is received.
   * @param smsMethod The HTTP method Ytel will use when requesting the SmsUrl.
   * @param smsFallbackUrl URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
   * @param smsFallbackMethod The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
   * @return String
  */
  public String incomingphoneMassupdatenumber (String phoneNumber, String voiceUrl, String friendlyName, String voiceMethod, String voiceFallbackUrl, String voiceFallbackMethod, String hangupCallback, String hangupCallbackMethod, String heartbeatUrl, String heartbeatMethod, String smsUrl, String smsMethod, String smsFallbackUrl, String smsFallbackMethod) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneMassupdatenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneMassupdatenumber"));
    }
    // verify the required parameter 'voiceUrl' is set
    if (voiceUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceUrl' when calling incomingphoneMassupdatenumber",
        new ApiException(400, "Missing the required parameter 'voiceUrl' when calling incomingphoneMassupdatenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/massupdatenumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceUrl != null) {
        localVarBuilder.addTextBody("VoiceUrl", ApiInvoker.parameterToString(voiceUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceMethod != null) {
        localVarBuilder.addTextBody("VoiceMethod", ApiInvoker.parameterToString(voiceMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceFallbackUrl != null) {
        localVarBuilder.addTextBody("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceFallbackMethod != null) {
        localVarBuilder.addTextBody("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hangupCallback != null) {
        localVarBuilder.addTextBody("HangupCallback", ApiInvoker.parameterToString(hangupCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hangupCallbackMethod != null) {
        localVarBuilder.addTextBody("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartbeatUrl != null) {
        localVarBuilder.addTextBody("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartbeatMethod != null) {
        localVarBuilder.addTextBody("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsUrl != null) {
        localVarBuilder.addTextBody("SmsUrl", ApiInvoker.parameterToString(smsUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsMethod != null) {
        localVarBuilder.addTextBody("SmsMethod", ApiInvoker.parameterToString(smsMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsFallbackUrl != null) {
        localVarBuilder.addTextBody("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsFallbackMethod != null) {
        localVarBuilder.addTextBody("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
      formParams.put("VoiceUrl", ApiInvoker.parameterToString(voiceUrl));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
      formParams.put("VoiceMethod", ApiInvoker.parameterToString(voiceMethod));
      formParams.put("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl));
      formParams.put("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod));
      formParams.put("HangupCallback", ApiInvoker.parameterToString(hangupCallback));
      formParams.put("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod));
      formParams.put("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl));
      formParams.put("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod));
      formParams.put("SmsUrl", ApiInvoker.parameterToString(smsUrl));
      formParams.put("SmsMethod", ApiInvoker.parameterToString(smsMethod));
      formParams.put("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl));
      formParams.put("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Bulk Update Numbers
   * Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
   * @param phoneNumber A valid comma(,) separated Ytel numbers. (E.164 format).   * @param voiceUrl The URL returning InboundXML incoming calls should execute when connected.   * @param friendlyName A human-readable value for labeling the number.   * @param voiceMethod Specifies the HTTP method used to request the VoiceUrl once incoming call connects.   * @param voiceFallbackUrl URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url   * @param voiceFallbackMethod Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.   * @param hangupCallback URL that can be requested to receive notification when and how incoming call has ended.   * @param hangupCallbackMethod The HTTP method Ytel will use when requesting the HangupCallback URL.   * @param heartbeatUrl URL that can be used to monitor the phone number.   * @param heartbeatMethod The HTTP method Ytel will use when requesting the HeartbeatUrl.   * @param smsUrl URL requested when an SMS is received.   * @param smsMethod The HTTP method Ytel will use when requesting the SmsUrl.   * @param smsFallbackUrl URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.   * @param smsFallbackMethod The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
  */
  public void incomingphoneMassupdatenumber (String phoneNumber, String voiceUrl, String friendlyName, String voiceMethod, String voiceFallbackUrl, String voiceFallbackMethod, String hangupCallback, String hangupCallbackMethod, String heartbeatUrl, String heartbeatMethod, String smsUrl, String smsMethod, String smsFallbackUrl, String smsFallbackMethod, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneMassupdatenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneMassupdatenumber"));
    }
    // verify the required parameter 'voiceUrl' is set
    if (voiceUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceUrl' when calling incomingphoneMassupdatenumber",
        new ApiException(400, "Missing the required parameter 'voiceUrl' when calling incomingphoneMassupdatenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/massupdatenumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceUrl != null) {
        localVarBuilder.addTextBody("VoiceUrl", ApiInvoker.parameterToString(voiceUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceMethod != null) {
        localVarBuilder.addTextBody("VoiceMethod", ApiInvoker.parameterToString(voiceMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceFallbackUrl != null) {
        localVarBuilder.addTextBody("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceFallbackMethod != null) {
        localVarBuilder.addTextBody("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hangupCallback != null) {
        localVarBuilder.addTextBody("HangupCallback", ApiInvoker.parameterToString(hangupCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hangupCallbackMethod != null) {
        localVarBuilder.addTextBody("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartbeatUrl != null) {
        localVarBuilder.addTextBody("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartbeatMethod != null) {
        localVarBuilder.addTextBody("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsUrl != null) {
        localVarBuilder.addTextBody("SmsUrl", ApiInvoker.parameterToString(smsUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsMethod != null) {
        localVarBuilder.addTextBody("SmsMethod", ApiInvoker.parameterToString(smsMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsFallbackUrl != null) {
        localVarBuilder.addTextBody("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsFallbackMethod != null) {
        localVarBuilder.addTextBody("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
formParams.put("VoiceUrl", ApiInvoker.parameterToString(voiceUrl));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
formParams.put("VoiceMethod", ApiInvoker.parameterToString(voiceMethod));
formParams.put("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl));
formParams.put("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod));
formParams.put("HangupCallback", ApiInvoker.parameterToString(hangupCallback));
formParams.put("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod));
formParams.put("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl));
formParams.put("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod));
formParams.put("SmsUrl", ApiInvoker.parameterToString(smsUrl));
formParams.put("SmsMethod", ApiInvoker.parameterToString(smsMethod));
formParams.put("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl));
formParams.put("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Release Number
  * Remove a purchased Ytel number from your account.
   * @param phoneNumber A valid 10-digit Ytel number (E.164 format).
   * @param responseType Response type format xml or json
   * @return String
  */
  public String incomingphoneReleasenumberByResponseTypePost (String phoneNumber, String responseType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneReleasenumberByResponseTypePost",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneReleasenumberByResponseTypePost"));
    }
    // verify the required parameter 'responseType' is set
    if (responseType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responseType' when calling incomingphoneReleasenumberByResponseTypePost",
        new ApiException(400, "Missing the required parameter 'responseType' when calling incomingphoneReleasenumberByResponseTypePost"));
    }

    // create path and map variables
    String path = "/incomingphone/releasenumber.{ResponseType}".replaceAll("\\{" + "ResponseType" + "\\}", apiInvoker.escapeString(responseType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Release Number
   * Remove a purchased Ytel number from your account.
   * @param phoneNumber A valid 10-digit Ytel number (E.164 format).   * @param responseType Response type format xml or json
  */
  public void incomingphoneReleasenumberByResponseTypePost (String phoneNumber, String responseType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneReleasenumberByResponseTypePost",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneReleasenumberByResponseTypePost"));
    }
    // verify the required parameter 'responseType' is set
    if (responseType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responseType' when calling incomingphoneReleasenumberByResponseTypePost",
        new ApiException(400, "Missing the required parameter 'responseType' when calling incomingphoneReleasenumberByResponseTypePost"));
    }

    // create path and map variables
    String path = "/incomingphone/releasenumber.{ResponseType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ResponseType" + "\\}", apiInvoker.escapeString(responseType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Move Number
  * Transfer phone number that has been purchased for from one account to another account.
   * @param phonenumber A valid 10-digit Ytel number (E.164 format).
   * @param fromaccountsid A specific Accountsid from where Number is getting transfer.
   * @param toaccountsid A specific Accountsid to which Number is getting transfer.
   * @return String
  */
  public String incomingphoneTransferphonenumbers (String phonenumber, String fromaccountsid, String toaccountsid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling incomingphoneTransferphonenumbers"));
    }
    // verify the required parameter 'fromaccountsid' is set
    if (fromaccountsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fromaccountsid' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'fromaccountsid' when calling incomingphoneTransferphonenumbers"));
    }
    // verify the required parameter 'toaccountsid' is set
    if (toaccountsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'toaccountsid' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'toaccountsid' when calling incomingphoneTransferphonenumbers"));
    }

    // create path and map variables
    String path = "/incomingphone/transferphonenumbers.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phonenumber != null) {
        localVarBuilder.addTextBody("phonenumber", ApiInvoker.parameterToString(phonenumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fromaccountsid != null) {
        localVarBuilder.addTextBody("fromaccountsid", ApiInvoker.parameterToString(fromaccountsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (toaccountsid != null) {
        localVarBuilder.addTextBody("toaccountsid", ApiInvoker.parameterToString(toaccountsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("phonenumber", ApiInvoker.parameterToString(phonenumber));
      formParams.put("fromaccountsid", ApiInvoker.parameterToString(fromaccountsid));
      formParams.put("toaccountsid", ApiInvoker.parameterToString(toaccountsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Move Number
   * Transfer phone number that has been purchased for from one account to another account.
   * @param phonenumber A valid 10-digit Ytel number (E.164 format).   * @param fromaccountsid A specific Accountsid from where Number is getting transfer.   * @param toaccountsid A specific Accountsid to which Number is getting transfer.
  */
  public void incomingphoneTransferphonenumbers (String phonenumber, String fromaccountsid, String toaccountsid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phonenumber' is set
    if (phonenumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phonenumber' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'phonenumber' when calling incomingphoneTransferphonenumbers"));
    }
    // verify the required parameter 'fromaccountsid' is set
    if (fromaccountsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fromaccountsid' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'fromaccountsid' when calling incomingphoneTransferphonenumbers"));
    }
    // verify the required parameter 'toaccountsid' is set
    if (toaccountsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'toaccountsid' when calling incomingphoneTransferphonenumbers",
        new ApiException(400, "Missing the required parameter 'toaccountsid' when calling incomingphoneTransferphonenumbers"));
    }

    // create path and map variables
    String path = "/incomingphone/transferphonenumbers.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phonenumber != null) {
        localVarBuilder.addTextBody("phonenumber", ApiInvoker.parameterToString(phonenumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fromaccountsid != null) {
        localVarBuilder.addTextBody("fromaccountsid", ApiInvoker.parameterToString(fromaccountsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (toaccountsid != null) {
        localVarBuilder.addTextBody("toaccountsid", ApiInvoker.parameterToString(toaccountsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("phonenumber", ApiInvoker.parameterToString(phonenumber));
formParams.put("fromaccountsid", ApiInvoker.parameterToString(fromaccountsid));
formParams.put("toaccountsid", ApiInvoker.parameterToString(toaccountsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Number
  * Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
   * @param phoneNumber A valid Ytel number (E.164 format).
   * @param voiceUrl URL requested once the call connects
   * @param friendlyName Phone number friendly name description
   * @param voiceMethod Post or Get
   * @param voiceFallbackUrl URL requested if the voice URL is not available
   * @param voiceFallbackMethod Post or Get
   * @param hangupCallback callback url after a hangup occurs
   * @param hangupCallbackMethod Post or Get
   * @param heartbeatUrl URL requested once the call connects
   * @param heartbeatMethod URL that can be requested every 60 seconds during the call to notify of elapsed time
   * @param smsUrl URL requested when an SMS is received
   * @param smsMethod Post or Get
   * @param smsFallbackUrl URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
   * @param smsFallbackMethod The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
   * @return String
  */
  public String incomingphoneUpdatenumber (String phoneNumber, String voiceUrl, String friendlyName, String voiceMethod, String voiceFallbackUrl, String voiceFallbackMethod, String hangupCallback, String hangupCallbackMethod, String heartbeatUrl, String heartbeatMethod, String smsUrl, String smsMethod, String smsFallbackUrl, String smsFallbackMethod) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneUpdatenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneUpdatenumber"));
    }
    // verify the required parameter 'voiceUrl' is set
    if (voiceUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceUrl' when calling incomingphoneUpdatenumber",
        new ApiException(400, "Missing the required parameter 'voiceUrl' when calling incomingphoneUpdatenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/updatenumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceUrl != null) {
        localVarBuilder.addTextBody("VoiceUrl", ApiInvoker.parameterToString(voiceUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceMethod != null) {
        localVarBuilder.addTextBody("VoiceMethod", ApiInvoker.parameterToString(voiceMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceFallbackUrl != null) {
        localVarBuilder.addTextBody("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceFallbackMethod != null) {
        localVarBuilder.addTextBody("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hangupCallback != null) {
        localVarBuilder.addTextBody("HangupCallback", ApiInvoker.parameterToString(hangupCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hangupCallbackMethod != null) {
        localVarBuilder.addTextBody("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartbeatUrl != null) {
        localVarBuilder.addTextBody("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartbeatMethod != null) {
        localVarBuilder.addTextBody("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsUrl != null) {
        localVarBuilder.addTextBody("SmsUrl", ApiInvoker.parameterToString(smsUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsMethod != null) {
        localVarBuilder.addTextBody("SmsMethod", ApiInvoker.parameterToString(smsMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsFallbackUrl != null) {
        localVarBuilder.addTextBody("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (smsFallbackMethod != null) {
        localVarBuilder.addTextBody("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
      formParams.put("VoiceUrl", ApiInvoker.parameterToString(voiceUrl));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
      formParams.put("VoiceMethod", ApiInvoker.parameterToString(voiceMethod));
      formParams.put("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl));
      formParams.put("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod));
      formParams.put("HangupCallback", ApiInvoker.parameterToString(hangupCallback));
      formParams.put("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod));
      formParams.put("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl));
      formParams.put("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod));
      formParams.put("SmsUrl", ApiInvoker.parameterToString(smsUrl));
      formParams.put("SmsMethod", ApiInvoker.parameterToString(smsMethod));
      formParams.put("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl));
      formParams.put("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Number
   * Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
   * @param phoneNumber A valid Ytel number (E.164 format).   * @param voiceUrl URL requested once the call connects   * @param friendlyName Phone number friendly name description   * @param voiceMethod Post or Get   * @param voiceFallbackUrl URL requested if the voice URL is not available   * @param voiceFallbackMethod Post or Get   * @param hangupCallback callback url after a hangup occurs   * @param hangupCallbackMethod Post or Get   * @param heartbeatUrl URL requested once the call connects   * @param heartbeatMethod URL that can be requested every 60 seconds during the call to notify of elapsed time   * @param smsUrl URL requested when an SMS is received   * @param smsMethod Post or Get   * @param smsFallbackUrl URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.   * @param smsFallbackMethod The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
  */
  public void incomingphoneUpdatenumber (String phoneNumber, String voiceUrl, String friendlyName, String voiceMethod, String voiceFallbackUrl, String voiceFallbackMethod, String hangupCallback, String hangupCallbackMethod, String heartbeatUrl, String heartbeatMethod, String smsUrl, String smsMethod, String smsFallbackUrl, String smsFallbackMethod, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneUpdatenumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneUpdatenumber"));
    }
    // verify the required parameter 'voiceUrl' is set
    if (voiceUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceUrl' when calling incomingphoneUpdatenumber",
        new ApiException(400, "Missing the required parameter 'voiceUrl' when calling incomingphoneUpdatenumber"));
    }

    // create path and map variables
    String path = "/incomingphone/updatenumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceUrl != null) {
        localVarBuilder.addTextBody("VoiceUrl", ApiInvoker.parameterToString(voiceUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceMethod != null) {
        localVarBuilder.addTextBody("VoiceMethod", ApiInvoker.parameterToString(voiceMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceFallbackUrl != null) {
        localVarBuilder.addTextBody("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceFallbackMethod != null) {
        localVarBuilder.addTextBody("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hangupCallback != null) {
        localVarBuilder.addTextBody("HangupCallback", ApiInvoker.parameterToString(hangupCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hangupCallbackMethod != null) {
        localVarBuilder.addTextBody("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartbeatUrl != null) {
        localVarBuilder.addTextBody("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartbeatMethod != null) {
        localVarBuilder.addTextBody("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsUrl != null) {
        localVarBuilder.addTextBody("SmsUrl", ApiInvoker.parameterToString(smsUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsMethod != null) {
        localVarBuilder.addTextBody("SmsMethod", ApiInvoker.parameterToString(smsMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsFallbackUrl != null) {
        localVarBuilder.addTextBody("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (smsFallbackMethod != null) {
        localVarBuilder.addTextBody("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
formParams.put("VoiceUrl", ApiInvoker.parameterToString(voiceUrl));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
formParams.put("VoiceMethod", ApiInvoker.parameterToString(voiceMethod));
formParams.put("VoiceFallbackUrl", ApiInvoker.parameterToString(voiceFallbackUrl));
formParams.put("VoiceFallbackMethod", ApiInvoker.parameterToString(voiceFallbackMethod));
formParams.put("HangupCallback", ApiInvoker.parameterToString(hangupCallback));
formParams.put("HangupCallbackMethod", ApiInvoker.parameterToString(hangupCallbackMethod));
formParams.put("HeartbeatUrl", ApiInvoker.parameterToString(heartbeatUrl));
formParams.put("HeartbeatMethod", ApiInvoker.parameterToString(heartbeatMethod));
formParams.put("SmsUrl", ApiInvoker.parameterToString(smsUrl));
formParams.put("SmsMethod", ApiInvoker.parameterToString(smsMethod));
formParams.put("SmsFallbackUrl", ApiInvoker.parameterToString(smsFallbackUrl));
formParams.put("SmsFallbackMethod", ApiInvoker.parameterToString(smsFallbackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Details
  * Retrieve the details for a phone number by its number.
   * @param phoneNumber A valid Ytel 10-digit phone number (E.164 format).
   * @return String
  */
  public String incomingphoneViewnumber (String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneViewnumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneViewnumber"));
    }

    // create path and map variables
    String path = "/incomingphone/viewnumber.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Details
   * Retrieve the details for a phone number by its number.
   * @param phoneNumber A valid Ytel 10-digit phone number (E.164 format).
  */
  public void incomingphoneViewnumber (String phoneNumber, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling incomingphoneViewnumber",
        new ApiException(400, "Missing the required parameter 'phoneNumber' when calling incomingphoneViewnumber"));
    }

    // create path and map variables
    String path = "/incomingphone/viewnumber.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("PhoneNumber", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("PhoneNumber", ApiInvoker.parameterToString(phoneNumber));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
