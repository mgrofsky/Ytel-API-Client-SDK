/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UsageApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * List Usage
  * Retrieve usage metrics regarding your Ytel account. The results includes inbound/outbound voice calls and inbound/outbound SMS messages as well as carrier lookup requests.
   * @param productCode Filter usage results by product type.
   * @param startDate Filter usage objects by start date.
   * @param endDate Filter usage objects by end date.
   * @param includeSubAccounts Will include all subaccount usage data
   * @return String
  */
  public String usageListusage (String productCode, String startDate, String endDate, String includeSubAccounts) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/usage/listusage.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (productCode != null) {
        localVarBuilder.addTextBody("ProductCode", ApiInvoker.parameterToString(productCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (startDate != null) {
        localVarBuilder.addTextBody("startDate", ApiInvoker.parameterToString(startDate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (endDate != null) {
        localVarBuilder.addTextBody("endDate", ApiInvoker.parameterToString(endDate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (includeSubAccounts != null) {
        localVarBuilder.addTextBody("IncludeSubAccounts", ApiInvoker.parameterToString(includeSubAccounts), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ProductCode", ApiInvoker.parameterToString(productCode));
      formParams.put("startDate", ApiInvoker.parameterToString(startDate));
      formParams.put("endDate", ApiInvoker.parameterToString(endDate));
      formParams.put("IncludeSubAccounts", ApiInvoker.parameterToString(includeSubAccounts));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Usage
   * Retrieve usage metrics regarding your Ytel account. The results includes inbound/outbound voice calls and inbound/outbound SMS messages as well as carrier lookup requests.
   * @param productCode Filter usage results by product type.   * @param startDate Filter usage objects by start date.   * @param endDate Filter usage objects by end date.   * @param includeSubAccounts Will include all subaccount usage data
  */
  public void usageListusage (String productCode, String startDate, String endDate, String includeSubAccounts, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/usage/listusage.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (productCode != null) {
        localVarBuilder.addTextBody("ProductCode", ApiInvoker.parameterToString(productCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (startDate != null) {
        localVarBuilder.addTextBody("startDate", ApiInvoker.parameterToString(startDate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (endDate != null) {
        localVarBuilder.addTextBody("endDate", ApiInvoker.parameterToString(endDate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (includeSubAccounts != null) {
        localVarBuilder.addTextBody("IncludeSubAccounts", ApiInvoker.parameterToString(includeSubAccounts), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ProductCode", ApiInvoker.parameterToString(productCode));
formParams.put("startDate", ApiInvoker.parameterToString(startDate));
formParams.put("endDate", ApiInvoker.parameterToString(endDate));
formParams.put("IncludeSubAccounts", ApiInvoker.parameterToString(includeSubAccounts));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
