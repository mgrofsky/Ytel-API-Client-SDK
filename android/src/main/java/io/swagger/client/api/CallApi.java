/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CallApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Group Call
  * Group Call
   * @param from This number to display on Caller ID as calling
   * @param to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
   * @param url URL requested once the call connects
   * @param groupConfirmKey Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
   * @param groupConfirmFile Specify the audio file you want to play when the called party picks up the call
   * @param method Specifies the HTTP method used to request the required URL once call connects.
   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
   * @param fallBackUrl URL requested if the initial Url parameter fails or encounters an error
   * @param fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
   * @param heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
   * @param heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.
   * @param timeout Time (in seconds) we should wait while the call is ringing before canceling the call
   * @param playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
   * @param hideCallerId Specifies if the caller id will be hidden
   * @param record Specifies if the call should be recorded
   * @param recordCallBackUrl Recording parameters will be sent here upon completion
   * @param recordCallBackMethod Method used to request the RecordCallback URL.
   * @param transcribe Specifies if the call recording should be transcribed
   * @param transcribeCallBackUrl Transcription parameters will be sent here upon completion
   * @return String
  */
  public String callsGroupcall (String from, String to, String url, String groupConfirmKey, String groupConfirmFile, String method, String statusCallBackUrl, String statusCallBackMethod, String fallBackUrl, String fallBackMethod, String heartBeatUrl, String heartBeatMethod, Integer timeout, String playDtmf, String hideCallerId, Boolean record, String recordCallBackUrl, String recordCallBackMethod, Boolean transcribe, String transcribeCallBackUrl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'from' when calling callsGroupcall"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'to' when calling callsGroupcall"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'url' when calling callsGroupcall"));
    }
    // verify the required parameter 'groupConfirmKey' is set
    if (groupConfirmKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupConfirmKey' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'groupConfirmKey' when calling callsGroupcall"));
    }
    // verify the required parameter 'groupConfirmFile' is set
    if (groupConfirmFile == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupConfirmFile' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'groupConfirmFile' when calling callsGroupcall"));
    }

    // create path and map variables
    String path = "/calls/groupcall.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (groupConfirmKey != null) {
        localVarBuilder.addTextBody("GroupConfirmKey", ApiInvoker.parameterToString(groupConfirmKey), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (groupConfirmFile != null) {
        localVarBuilder.addTextBody("GroupConfirmFile", ApiInvoker.parameterToString(groupConfirmFile), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallBackUrl != null) {
        localVarBuilder.addTextBody("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallBackMethod != null) {
        localVarBuilder.addTextBody("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartBeatUrl != null) {
        localVarBuilder.addTextBody("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartBeatMethod != null) {
        localVarBuilder.addTextBody("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hideCallerId != null) {
        localVarBuilder.addTextBody("HideCallerId", ApiInvoker.parameterToString(hideCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (transcribe != null) {
        localVarBuilder.addTextBody("Transcribe", ApiInvoker.parameterToString(transcribe), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (transcribeCallBackUrl != null) {
        localVarBuilder.addTextBody("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("Url", ApiInvoker.parameterToString(url));
      formParams.put("GroupConfirmKey", ApiInvoker.parameterToString(groupConfirmKey));
      formParams.put("GroupConfirmFile", ApiInvoker.parameterToString(groupConfirmFile));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
      formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
      formParams.put("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl));
      formParams.put("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod));
      formParams.put("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl));
      formParams.put("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod));
      formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
      formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
      formParams.put("HideCallerId", ApiInvoker.parameterToString(hideCallerId));
      formParams.put("Record", ApiInvoker.parameterToString(record));
      formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
      formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
      formParams.put("Transcribe", ApiInvoker.parameterToString(transcribe));
      formParams.put("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Group Call
   * Group Call
   * @param from This number to display on Caller ID as calling   * @param to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222   * @param url URL requested once the call connects   * @param groupConfirmKey Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *   * @param groupConfirmFile Specify the audio file you want to play when the called party picks up the call   * @param method Specifies the HTTP method used to request the required URL once call connects.   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.   * @param fallBackUrl URL requested if the initial Url parameter fails or encounters an error   * @param fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.   * @param heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.   * @param heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.   * @param timeout Time (in seconds) we should wait while the call is ringing before canceling the call   * @param playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *   * @param hideCallerId Specifies if the caller id will be hidden   * @param record Specifies if the call should be recorded   * @param recordCallBackUrl Recording parameters will be sent here upon completion   * @param recordCallBackMethod Method used to request the RecordCallback URL.   * @param transcribe Specifies if the call recording should be transcribed   * @param transcribeCallBackUrl Transcription parameters will be sent here upon completion
  */
  public void callsGroupcall (String from, String to, String url, String groupConfirmKey, String groupConfirmFile, String method, String statusCallBackUrl, String statusCallBackMethod, String fallBackUrl, String fallBackMethod, String heartBeatUrl, String heartBeatMethod, Integer timeout, String playDtmf, String hideCallerId, Boolean record, String recordCallBackUrl, String recordCallBackMethod, Boolean transcribe, String transcribeCallBackUrl, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'from' when calling callsGroupcall"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'to' when calling callsGroupcall"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'url' when calling callsGroupcall"));
    }
    // verify the required parameter 'groupConfirmKey' is set
    if (groupConfirmKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupConfirmKey' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'groupConfirmKey' when calling callsGroupcall"));
    }
    // verify the required parameter 'groupConfirmFile' is set
    if (groupConfirmFile == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupConfirmFile' when calling callsGroupcall",
        new ApiException(400, "Missing the required parameter 'groupConfirmFile' when calling callsGroupcall"));
    }

    // create path and map variables
    String path = "/calls/groupcall.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (groupConfirmKey != null) {
        localVarBuilder.addTextBody("GroupConfirmKey", ApiInvoker.parameterToString(groupConfirmKey), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (groupConfirmFile != null) {
        localVarBuilder.addTextBody("GroupConfirmFile", ApiInvoker.parameterToString(groupConfirmFile), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallBackUrl != null) {
        localVarBuilder.addTextBody("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallBackMethod != null) {
        localVarBuilder.addTextBody("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartBeatUrl != null) {
        localVarBuilder.addTextBody("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartBeatMethod != null) {
        localVarBuilder.addTextBody("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hideCallerId != null) {
        localVarBuilder.addTextBody("HideCallerId", ApiInvoker.parameterToString(hideCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (transcribe != null) {
        localVarBuilder.addTextBody("Transcribe", ApiInvoker.parameterToString(transcribe), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (transcribeCallBackUrl != null) {
        localVarBuilder.addTextBody("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("Url", ApiInvoker.parameterToString(url));
formParams.put("GroupConfirmKey", ApiInvoker.parameterToString(groupConfirmKey));
formParams.put("GroupConfirmFile", ApiInvoker.parameterToString(groupConfirmFile));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
formParams.put("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl));
formParams.put("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod));
formParams.put("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl));
formParams.put("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod));
formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
formParams.put("HideCallerId", ApiInvoker.parameterToString(hideCallerId));
formParams.put("Record", ApiInvoker.parameterToString(record));
formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
formParams.put("Transcribe", ApiInvoker.parameterToString(transcribe));
formParams.put("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Interrupt Call
  * Interrupt the Call by Call Sid
   * @param callSid The unique identifier for voice call that is in progress.
   * @param url URL the in-progress call will be redirected to
   * @param method The method used to request the above Url parameter
   * @param status Status to set the in-progress call to
   * @return String
  */
  public String callsInterruptcalls (String callSid, String url, String method, String status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsInterruptcalls",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsInterruptcalls"));
    }

    // create path and map variables
    String path = "/calls/interruptcalls.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (status != null) {
        localVarBuilder.addTextBody("Status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
      formParams.put("Url", ApiInvoker.parameterToString(url));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("Status", ApiInvoker.parameterToString(status));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Interrupt Call
   * Interrupt the Call by Call Sid
   * @param callSid The unique identifier for voice call that is in progress.   * @param url URL the in-progress call will be redirected to   * @param method The method used to request the above Url parameter   * @param status Status to set the in-progress call to
  */
  public void callsInterruptcalls (String callSid, String url, String method, String status, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsInterruptcalls",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsInterruptcalls"));
    }

    // create path and map variables
    String path = "/calls/interruptcalls.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (status != null) {
        localVarBuilder.addTextBody("Status", ApiInvoker.parameterToString(status), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
formParams.put("Url", ApiInvoker.parameterToString(url));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("Status", ApiInvoker.parameterToString(status));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Calls
  * A list of calls associated with your Ytel account
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pageSize Number of individual resources listed in the response per page
   * @param to Filter calls that were sent to this 10-digit number (E.164 format).
   * @param from Filter calls that were sent from this 10-digit number (E.164 format).
   * @param dateCreated Return calls that are from a specified date.
   * @return String
  */
  public String callsListcalls (Integer page, Integer pageSize, String to, String from, String dateCreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/calls/listcalls.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateCreated != null) {
        localVarBuilder.addTextBody("DateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Page", ApiInvoker.parameterToString(page));
      formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("DateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Calls
   * A list of calls associated with your Ytel account
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pageSize Number of individual resources listed in the response per page   * @param to Filter calls that were sent to this 10-digit number (E.164 format).   * @param from Filter calls that were sent from this 10-digit number (E.164 format).   * @param dateCreated Return calls that are from a specified date.
  */
  public void callsListcalls (Integer page, Integer pageSize, String to, String from, String dateCreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/calls/listcalls.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pageSize != null) {
        localVarBuilder.addTextBody("PageSize", ApiInvoker.parameterToString(pageSize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateCreated != null) {
        localVarBuilder.addTextBody("DateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Page", ApiInvoker.parameterToString(page));
formParams.put("PageSize", ApiInvoker.parameterToString(pageSize));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("DateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Make Call
  * You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
   * @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
   * @param to To number
   * @param url URL requested once the call connects
   * @param method Specifies the HTTP method used to request the required URL once call connects.
   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
   * @param fallBackUrl URL requested if the initial Url parameter fails or encounters an error
   * @param fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
   * @param heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed tim
   * @param heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.
   * @param timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call
   * @param playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
   * @param hideCallerId Specifies if the caller id will be hidden
   * @param record Specifies if the call should be recorded
   * @param recordCallBackUrl Recording parameters will be sent here upon completion
   * @param recordCallBackMethod Method used to request the RecordCallback URL.
   * @param transcribe Specifies if the call recording should be transcribed
   * @param transcribeCallBackUrl Transcription parameters will be sent here upon completion
   * @param ifMachine How Ytel should handle the receiving numbers voicemail machine
   * @param ifMachineUrl URL requested when IfMachine&#x3D;continue
   * @param ifMachineMethod Method used to request the IfMachineUrl.
   * @param feedback Specify if survey should be enable or not
   * @param surveyId The unique identifier for the survey.
   * @return String
  */
  public String callsMakecall (String from, String to, String url, String method, String statusCallBackUrl, String statusCallBackMethod, String fallBackUrl, String fallBackMethod, String heartBeatUrl, String heartBeatMethod, Integer timeout, String playDtmf, Boolean hideCallerId, Boolean record, String recordCallBackUrl, String recordCallBackMethod, Boolean transcribe, String transcribeCallBackUrl, String ifMachine, String ifMachineUrl, String ifMachineMethod, Boolean feedback, String surveyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'from' when calling callsMakecall"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'to' when calling callsMakecall"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'url' when calling callsMakecall"));
    }

    // create path and map variables
    String path = "/calls/makecall.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallBackUrl != null) {
        localVarBuilder.addTextBody("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallBackMethod != null) {
        localVarBuilder.addTextBody("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartBeatUrl != null) {
        localVarBuilder.addTextBody("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (heartBeatMethod != null) {
        localVarBuilder.addTextBody("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (hideCallerId != null) {
        localVarBuilder.addTextBody("HideCallerId", ApiInvoker.parameterToString(hideCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (transcribe != null) {
        localVarBuilder.addTextBody("Transcribe", ApiInvoker.parameterToString(transcribe), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (transcribeCallBackUrl != null) {
        localVarBuilder.addTextBody("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (ifMachine != null) {
        localVarBuilder.addTextBody("IfMachine", ApiInvoker.parameterToString(ifMachine), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (ifMachineUrl != null) {
        localVarBuilder.addTextBody("IfMachineUrl", ApiInvoker.parameterToString(ifMachineUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (ifMachineMethod != null) {
        localVarBuilder.addTextBody("IfMachineMethod", ApiInvoker.parameterToString(ifMachineMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (feedback != null) {
        localVarBuilder.addTextBody("Feedback", ApiInvoker.parameterToString(feedback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (surveyId != null) {
        localVarBuilder.addTextBody("SurveyId", ApiInvoker.parameterToString(surveyId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("Url", ApiInvoker.parameterToString(url));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
      formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
      formParams.put("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl));
      formParams.put("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod));
      formParams.put("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl));
      formParams.put("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod));
      formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
      formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
      formParams.put("HideCallerId", ApiInvoker.parameterToString(hideCallerId));
      formParams.put("Record", ApiInvoker.parameterToString(record));
      formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
      formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
      formParams.put("Transcribe", ApiInvoker.parameterToString(transcribe));
      formParams.put("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl));
      formParams.put("IfMachine", ApiInvoker.parameterToString(ifMachine));
      formParams.put("IfMachineUrl", ApiInvoker.parameterToString(ifMachineUrl));
      formParams.put("IfMachineMethod", ApiInvoker.parameterToString(ifMachineMethod));
      formParams.put("Feedback", ApiInvoker.parameterToString(feedback));
      formParams.put("SurveyId", ApiInvoker.parameterToString(surveyId));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Make Call
   * You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
   * @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.   * @param to To number   * @param url URL requested once the call connects   * @param method Specifies the HTTP method used to request the required URL once call connects.   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.   * @param fallBackUrl URL requested if the initial Url parameter fails or encounters an error   * @param fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.   * @param heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed tim   * @param heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.   * @param timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call   * @param playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *   * @param hideCallerId Specifies if the caller id will be hidden   * @param record Specifies if the call should be recorded   * @param recordCallBackUrl Recording parameters will be sent here upon completion   * @param recordCallBackMethod Method used to request the RecordCallback URL.   * @param transcribe Specifies if the call recording should be transcribed   * @param transcribeCallBackUrl Transcription parameters will be sent here upon completion   * @param ifMachine How Ytel should handle the receiving numbers voicemail machine   * @param ifMachineUrl URL requested when IfMachine&#x3D;continue   * @param ifMachineMethod Method used to request the IfMachineUrl.   * @param feedback Specify if survey should be enable or not   * @param surveyId The unique identifier for the survey.
  */
  public void callsMakecall (String from, String to, String url, String method, String statusCallBackUrl, String statusCallBackMethod, String fallBackUrl, String fallBackMethod, String heartBeatUrl, String heartBeatMethod, Integer timeout, String playDtmf, Boolean hideCallerId, Boolean record, String recordCallBackUrl, String recordCallBackMethod, Boolean transcribe, String transcribeCallBackUrl, String ifMachine, String ifMachineUrl, String ifMachineMethod, Boolean feedback, String surveyId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'from' when calling callsMakecall"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'to' when calling callsMakecall"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling callsMakecall",
        new ApiException(400, "Missing the required parameter 'url' when calling callsMakecall"));
    }

    // create path and map variables
    String path = "/calls/makecall.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (url != null) {
        localVarBuilder.addTextBody("Url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallBackUrl != null) {
        localVarBuilder.addTextBody("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallBackMethod != null) {
        localVarBuilder.addTextBody("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartBeatUrl != null) {
        localVarBuilder.addTextBody("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (heartBeatMethod != null) {
        localVarBuilder.addTextBody("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hideCallerId != null) {
        localVarBuilder.addTextBody("HideCallerId", ApiInvoker.parameterToString(hideCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (transcribe != null) {
        localVarBuilder.addTextBody("Transcribe", ApiInvoker.parameterToString(transcribe), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (transcribeCallBackUrl != null) {
        localVarBuilder.addTextBody("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (ifMachine != null) {
        localVarBuilder.addTextBody("IfMachine", ApiInvoker.parameterToString(ifMachine), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (ifMachineUrl != null) {
        localVarBuilder.addTextBody("IfMachineUrl", ApiInvoker.parameterToString(ifMachineUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (ifMachineMethod != null) {
        localVarBuilder.addTextBody("IfMachineMethod", ApiInvoker.parameterToString(ifMachineMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (feedback != null) {
        localVarBuilder.addTextBody("Feedback", ApiInvoker.parameterToString(feedback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (surveyId != null) {
        localVarBuilder.addTextBody("SurveyId", ApiInvoker.parameterToString(surveyId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("Url", ApiInvoker.parameterToString(url));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
formParams.put("FallBackUrl", ApiInvoker.parameterToString(fallBackUrl));
formParams.put("FallBackMethod", ApiInvoker.parameterToString(fallBackMethod));
formParams.put("HeartBeatUrl", ApiInvoker.parameterToString(heartBeatUrl));
formParams.put("HeartBeatMethod", ApiInvoker.parameterToString(heartBeatMethod));
formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
formParams.put("HideCallerId", ApiInvoker.parameterToString(hideCallerId));
formParams.put("Record", ApiInvoker.parameterToString(record));
formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
formParams.put("Transcribe", ApiInvoker.parameterToString(transcribe));
formParams.put("TranscribeCallBackUrl", ApiInvoker.parameterToString(transcribeCallBackUrl));
formParams.put("IfMachine", ApiInvoker.parameterToString(ifMachine));
formParams.put("IfMachineUrl", ApiInvoker.parameterToString(ifMachineUrl));
formParams.put("IfMachineMethod", ApiInvoker.parameterToString(ifMachineMethod));
formParams.put("Feedback", ApiInvoker.parameterToString(feedback));
formParams.put("SurveyId", ApiInvoker.parameterToString(surveyId));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send RVM
  * Initiate an outbound Ringless Voicemail through Ytel.
   * @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
   * @param rVMCallerId A required secondary Caller ID for RVM to work.
   * @param to A valid number (E.164 format) that will receive the phone call.
   * @param voiceMailURL The URL requested once the RVM connects. A set of default parameters will be sent here.
   * @param method Specifies the HTTP method used to request the required URL once call connects.
   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
   * @param statsCallBackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
   * @return String
  */
  public String callsMakervm (String from, String rVMCallerId, String to, String voiceMailURL, String method, String statusCallBackUrl, String statsCallBackMethod) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'from' when calling callsMakervm"));
    }
    // verify the required parameter 'rVMCallerId' is set
    if (rVMCallerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rVMCallerId' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'rVMCallerId' when calling callsMakervm"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'to' when calling callsMakervm"));
    }
    // verify the required parameter 'voiceMailURL' is set
    if (voiceMailURL == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceMailURL' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'voiceMailURL' when calling callsMakervm"));
    }

    // create path and map variables
    String path = "/calls/makervm.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (rVMCallerId != null) {
        localVarBuilder.addTextBody("RVMCallerId", ApiInvoker.parameterToString(rVMCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (voiceMailURL != null) {
        localVarBuilder.addTextBody("VoiceMailURL", ApiInvoker.parameterToString(voiceMailURL), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statsCallBackMethod != null) {
        localVarBuilder.addTextBody("StatsCallBackMethod", ApiInvoker.parameterToString(statsCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("RVMCallerId", ApiInvoker.parameterToString(rVMCallerId));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("VoiceMailURL", ApiInvoker.parameterToString(voiceMailURL));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
      formParams.put("StatsCallBackMethod", ApiInvoker.parameterToString(statsCallBackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send RVM
   * Initiate an outbound Ringless Voicemail through Ytel.
   * @param from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.   * @param rVMCallerId A required secondary Caller ID for RVM to work.   * @param to A valid number (E.164 format) that will receive the phone call.   * @param voiceMailURL The URL requested once the RVM connects. A set of default parameters will be sent here.   * @param method Specifies the HTTP method used to request the required URL once call connects.   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.   * @param statsCallBackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
  */
  public void callsMakervm (String from, String rVMCallerId, String to, String voiceMailURL, String method, String statusCallBackUrl, String statsCallBackMethod, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'from' when calling callsMakervm"));
    }
    // verify the required parameter 'rVMCallerId' is set
    if (rVMCallerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rVMCallerId' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'rVMCallerId' when calling callsMakervm"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'to' when calling callsMakervm"));
    }
    // verify the required parameter 'voiceMailURL' is set
    if (voiceMailURL == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'voiceMailURL' when calling callsMakervm",
        new ApiException(400, "Missing the required parameter 'voiceMailURL' when calling callsMakervm"));
    }

    // create path and map variables
    String path = "/calls/makervm.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (rVMCallerId != null) {
        localVarBuilder.addTextBody("RVMCallerId", ApiInvoker.parameterToString(rVMCallerId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (voiceMailURL != null) {
        localVarBuilder.addTextBody("VoiceMailURL", ApiInvoker.parameterToString(voiceMailURL), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statsCallBackMethod != null) {
        localVarBuilder.addTextBody("StatsCallBackMethod", ApiInvoker.parameterToString(statsCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("RVMCallerId", ApiInvoker.parameterToString(rVMCallerId));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("VoiceMailURL", ApiInvoker.parameterToString(voiceMailURL));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
formParams.put("StatsCallBackMethod", ApiInvoker.parameterToString(statsCallBackMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Play Audio
  * Play Audio from a url
   * @param callSid The unique identifier of each call resource
   * @param audioUrl URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
   * @param sayText Valid alphanumeric string that should be played to the In-progress call.
   * @param length Time limit in seconds for audio play back
   * @param direction The leg of the call audio will be played to
   * @param mix If false, all other audio will be muted
   * @return String
  */
  public String callsPlayaudios (String callSid, String audioUrl, String sayText, Integer length, String direction, Boolean mix) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsPlayaudios"));
    }
    // verify the required parameter 'audioUrl' is set
    if (audioUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audioUrl' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'audioUrl' when calling callsPlayaudios"));
    }
    // verify the required parameter 'sayText' is set
    if (sayText == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sayText' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'sayText' when calling callsPlayaudios"));
    }

    // create path and map variables
    String path = "/calls/playaudios.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (audioUrl != null) {
        localVarBuilder.addTextBody("AudioUrl", ApiInvoker.parameterToString(audioUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (sayText != null) {
        localVarBuilder.addTextBody("SayText", ApiInvoker.parameterToString(sayText), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (length != null) {
        localVarBuilder.addTextBody("Length", ApiInvoker.parameterToString(length), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (direction != null) {
        localVarBuilder.addTextBody("Direction", ApiInvoker.parameterToString(direction), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (mix != null) {
        localVarBuilder.addTextBody("Mix", ApiInvoker.parameterToString(mix), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
      formParams.put("AudioUrl", ApiInvoker.parameterToString(audioUrl));
      formParams.put("SayText", ApiInvoker.parameterToString(sayText));
      formParams.put("Length", ApiInvoker.parameterToString(length));
      formParams.put("Direction", ApiInvoker.parameterToString(direction));
      formParams.put("Mix", ApiInvoker.parameterToString(mix));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Play Audio
   * Play Audio from a url
   * @param callSid The unique identifier of each call resource   * @param audioUrl URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav   * @param sayText Valid alphanumeric string that should be played to the In-progress call.   * @param length Time limit in seconds for audio play back   * @param direction The leg of the call audio will be played to   * @param mix If false, all other audio will be muted
  */
  public void callsPlayaudios (String callSid, String audioUrl, String sayText, Integer length, String direction, Boolean mix, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsPlayaudios"));
    }
    // verify the required parameter 'audioUrl' is set
    if (audioUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audioUrl' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'audioUrl' when calling callsPlayaudios"));
    }
    // verify the required parameter 'sayText' is set
    if (sayText == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sayText' when calling callsPlayaudios",
        new ApiException(400, "Missing the required parameter 'sayText' when calling callsPlayaudios"));
    }

    // create path and map variables
    String path = "/calls/playaudios.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (audioUrl != null) {
        localVarBuilder.addTextBody("AudioUrl", ApiInvoker.parameterToString(audioUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (sayText != null) {
        localVarBuilder.addTextBody("SayText", ApiInvoker.parameterToString(sayText), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (length != null) {
        localVarBuilder.addTextBody("Length", ApiInvoker.parameterToString(length), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (direction != null) {
        localVarBuilder.addTextBody("Direction", ApiInvoker.parameterToString(direction), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mix != null) {
        localVarBuilder.addTextBody("Mix", ApiInvoker.parameterToString(mix), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
formParams.put("AudioUrl", ApiInvoker.parameterToString(audioUrl));
formParams.put("SayText", ApiInvoker.parameterToString(sayText));
formParams.put("Length", ApiInvoker.parameterToString(length));
formParams.put("Direction", ApiInvoker.parameterToString(direction));
formParams.put("Mix", ApiInvoker.parameterToString(mix));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Record Call
  * Start or stop recording of an in-progress voice call.
   * @param callSid The unique identifier of each call resource
   * @param record Set true to initiate recording or false to terminate recording
   * @param direction The leg of the call to record
   * @param timeLimit Time in seconds the recording duration should not exceed
   * @param callBackUrl URL consulted after the recording completes
   * @param fileformat Format of the recording file. Can be .mp3 or .wav
   * @return String
  */
  public String callsRecordcalls (String callSid, Boolean record, String direction, Integer timeLimit, String callBackUrl, String fileformat) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsRecordcalls",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsRecordcalls"));
    }
    // verify the required parameter 'record' is set
    if (record == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'record' when calling callsRecordcalls",
        new ApiException(400, "Missing the required parameter 'record' when calling callsRecordcalls"));
    }

    // create path and map variables
    String path = "/calls/recordcalls.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (direction != null) {
        localVarBuilder.addTextBody("Direction", ApiInvoker.parameterToString(direction), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timeLimit != null) {
        localVarBuilder.addTextBody("TimeLimit", ApiInvoker.parameterToString(timeLimit), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (callBackUrl != null) {
        localVarBuilder.addTextBody("CallBackUrl", ApiInvoker.parameterToString(callBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fileformat != null) {
        localVarBuilder.addTextBody("Fileformat", ApiInvoker.parameterToString(fileformat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
      formParams.put("Record", ApiInvoker.parameterToString(record));
      formParams.put("Direction", ApiInvoker.parameterToString(direction));
      formParams.put("TimeLimit", ApiInvoker.parameterToString(timeLimit));
      formParams.put("CallBackUrl", ApiInvoker.parameterToString(callBackUrl));
      formParams.put("Fileformat", ApiInvoker.parameterToString(fileformat));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Record Call
   * Start or stop recording of an in-progress voice call.
   * @param callSid The unique identifier of each call resource   * @param record Set true to initiate recording or false to terminate recording   * @param direction The leg of the call to record   * @param timeLimit Time in seconds the recording duration should not exceed   * @param callBackUrl URL consulted after the recording completes   * @param fileformat Format of the recording file. Can be .mp3 or .wav
  */
  public void callsRecordcalls (String callSid, Boolean record, String direction, Integer timeLimit, String callBackUrl, String fileformat, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsRecordcalls",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsRecordcalls"));
    }
    // verify the required parameter 'record' is set
    if (record == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'record' when calling callsRecordcalls",
        new ApiException(400, "Missing the required parameter 'record' when calling callsRecordcalls"));
    }

    // create path and map variables
    String path = "/calls/recordcalls.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (direction != null) {
        localVarBuilder.addTextBody("Direction", ApiInvoker.parameterToString(direction), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timeLimit != null) {
        localVarBuilder.addTextBody("TimeLimit", ApiInvoker.parameterToString(timeLimit), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callBackUrl != null) {
        localVarBuilder.addTextBody("CallBackUrl", ApiInvoker.parameterToString(callBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fileformat != null) {
        localVarBuilder.addTextBody("Fileformat", ApiInvoker.parameterToString(fileformat), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
formParams.put("Record", ApiInvoker.parameterToString(record));
formParams.put("Direction", ApiInvoker.parameterToString(direction));
formParams.put("TimeLimit", ApiInvoker.parameterToString(timeLimit));
formParams.put("CallBackUrl", ApiInvoker.parameterToString(callBackUrl));
formParams.put("Fileformat", ApiInvoker.parameterToString(fileformat));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Play DTMF
  * Play Dtmf and send the Digit
   * @param callSid The unique identifier of each call resource
   * @param playDtmf DTMF digits to play to the call. 0-9, #, *, W, or w
   * @param playDtmfDirection The leg of the call DTMF digits should be sent to
   * @return String
  */
  public String callsSenddigits (String callSid, String playDtmf, String playDtmfDirection) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsSenddigits",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsSenddigits"));
    }
    // verify the required parameter 'playDtmf' is set
    if (playDtmf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playDtmf' when calling callsSenddigits",
        new ApiException(400, "Missing the required parameter 'playDtmf' when calling callsSenddigits"));
    }

    // create path and map variables
    String path = "/calls/senddigits.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (playDtmfDirection != null) {
        localVarBuilder.addTextBody("PlayDtmfDirection", ApiInvoker.parameterToString(playDtmfDirection), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
      formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
      formParams.put("PlayDtmfDirection", ApiInvoker.parameterToString(playDtmfDirection));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Play DTMF
   * Play Dtmf and send the Digit
   * @param callSid The unique identifier of each call resource   * @param playDtmf DTMF digits to play to the call. 0-9, #, *, W, or w   * @param playDtmfDirection The leg of the call DTMF digits should be sent to
  */
  public void callsSenddigits (String callSid, String playDtmf, String playDtmfDirection, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsSenddigits",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsSenddigits"));
    }
    // verify the required parameter 'playDtmf' is set
    if (playDtmf == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'playDtmf' when calling callsSenddigits",
        new ApiException(400, "Missing the required parameter 'playDtmf' when calling callsSenddigits"));
    }

    // create path and map variables
    String path = "/calls/senddigits.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (playDtmf != null) {
        localVarBuilder.addTextBody("PlayDtmf", ApiInvoker.parameterToString(playDtmf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (playDtmfDirection != null) {
        localVarBuilder.addTextBody("PlayDtmfDirection", ApiInvoker.parameterToString(playDtmfDirection), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
formParams.put("PlayDtmf", ApiInvoker.parameterToString(playDtmf));
formParams.put("PlayDtmfDirection", ApiInvoker.parameterToString(playDtmfDirection));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Call
  * Retrieve a single voice call’s information by its CallSid.
   * @param callSid The unique identifier for the voice call.
   * @return String
  */
  public String callsViewcalldetail (String callSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsViewcalldetail",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsViewcalldetail"));
    }

    // create path and map variables
    String path = "/calls/viewcalldetail.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("callSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("callSid", ApiInvoker.parameterToString(callSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Call
   * Retrieve a single voice call’s information by its CallSid.
   * @param callSid The unique identifier for the voice call.
  */
  public void callsViewcalldetail (String callSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsViewcalldetail",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsViewcalldetail"));
    }

    // create path and map variables
    String path = "/calls/viewcalldetail.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("callSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("callSid", ApiInvoker.parameterToString(callSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Call
  * Retrieve a single voice call’s information by its CallSid.
   * @param callsid The unique identifier for the voice call.
   * @return String
  */
  public String callsViewcalls (String callsid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callsid' is set
    if (callsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callsid' when calling callsViewcalls",
        new ApiException(400, "Missing the required parameter 'callsid' when calling callsViewcalls"));
    }

    // create path and map variables
    String path = "/calls/viewcalls.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callsid != null) {
        localVarBuilder.addTextBody("callsid", ApiInvoker.parameterToString(callsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("callsid", ApiInvoker.parameterToString(callsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Call
   * Retrieve a single voice call’s information by its CallSid.
   * @param callsid The unique identifier for the voice call.
  */
  public void callsViewcalls (String callsid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callsid' is set
    if (callsid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callsid' when calling callsViewcalls",
        new ApiException(400, "Missing the required parameter 'callsid' when calling callsViewcalls"));
    }

    // create path and map variables
    String path = "/calls/viewcalls.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callsid != null) {
        localVarBuilder.addTextBody("callsid", ApiInvoker.parameterToString(callsid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("callsid", ApiInvoker.parameterToString(callsid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Voice Effect
  * Add audio voice effects to the an in-progress voice call.
   * @param callSid The unique identifier for the in-progress voice call.
   * @param audioDirection The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
   * @param pitchSemiTones Set the pitch in semitone (half-step) intervals. Value between -14 and 14
   * @param pitchOctaves Set the pitch in octave intervals.. Value between -1 and 1
   * @param pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
   * @param rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0
   * @param tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
   * @return String
  */
  public String callsVoiceeffect (String callSid, String audioDirection, Double pitchSemiTones, Double pitchOctaves, Double pitch, Double rate, Double tempo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsVoiceeffect",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsVoiceeffect"));
    }

    // create path and map variables
    String path = "/calls/voiceeffect.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (audioDirection != null) {
        localVarBuilder.addTextBody("AudioDirection", ApiInvoker.parameterToString(audioDirection), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pitchSemiTones != null) {
        localVarBuilder.addTextBody("PitchSemiTones", ApiInvoker.parameterToString(pitchSemiTones), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pitchOctaves != null) {
        localVarBuilder.addTextBody("PitchOctaves", ApiInvoker.parameterToString(pitchOctaves), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pitch != null) {
        localVarBuilder.addTextBody("Pitch", ApiInvoker.parameterToString(pitch), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (rate != null) {
        localVarBuilder.addTextBody("Rate", ApiInvoker.parameterToString(rate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (tempo != null) {
        localVarBuilder.addTextBody("Tempo", ApiInvoker.parameterToString(tempo), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
      formParams.put("AudioDirection", ApiInvoker.parameterToString(audioDirection));
      formParams.put("PitchSemiTones", ApiInvoker.parameterToString(pitchSemiTones));
      formParams.put("PitchOctaves", ApiInvoker.parameterToString(pitchOctaves));
      formParams.put("Pitch", ApiInvoker.parameterToString(pitch));
      formParams.put("Rate", ApiInvoker.parameterToString(rate));
      formParams.put("Tempo", ApiInvoker.parameterToString(tempo));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Voice Effect
   * Add audio voice effects to the an in-progress voice call.
   * @param callSid The unique identifier for the in-progress voice call.   * @param audioDirection The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.   * @param pitchSemiTones Set the pitch in semitone (half-step) intervals. Value between -14 and 14   * @param pitchOctaves Set the pitch in octave intervals.. Value between -1 and 1   * @param pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0   * @param rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0   * @param tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
  */
  public void callsVoiceeffect (String callSid, String audioDirection, Double pitchSemiTones, Double pitchOctaves, Double pitch, Double rate, Double tempo, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'callSid' is set
    if (callSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'callSid' when calling callsVoiceeffect",
        new ApiException(400, "Missing the required parameter 'callSid' when calling callsVoiceeffect"));
    }

    // create path and map variables
    String path = "/calls/voiceeffect.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (callSid != null) {
        localVarBuilder.addTextBody("CallSid", ApiInvoker.parameterToString(callSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (audioDirection != null) {
        localVarBuilder.addTextBody("AudioDirection", ApiInvoker.parameterToString(audioDirection), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pitchSemiTones != null) {
        localVarBuilder.addTextBody("PitchSemiTones", ApiInvoker.parameterToString(pitchSemiTones), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pitchOctaves != null) {
        localVarBuilder.addTextBody("PitchOctaves", ApiInvoker.parameterToString(pitchOctaves), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pitch != null) {
        localVarBuilder.addTextBody("Pitch", ApiInvoker.parameterToString(pitch), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (rate != null) {
        localVarBuilder.addTextBody("Rate", ApiInvoker.parameterToString(rate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (tempo != null) {
        localVarBuilder.addTextBody("Tempo", ApiInvoker.parameterToString(tempo), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("CallSid", ApiInvoker.parameterToString(callSid));
formParams.put("AudioDirection", ApiInvoker.parameterToString(audioDirection));
formParams.put("PitchSemiTones", ApiInvoker.parameterToString(pitchSemiTones));
formParams.put("PitchOctaves", ApiInvoker.parameterToString(pitchOctaves));
formParams.put("Pitch", ApiInvoker.parameterToString(pitch));
formParams.put("Rate", ApiInvoker.parameterToString(rate));
formParams.put("Tempo", ApiInvoker.parameterToString(tempo));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
