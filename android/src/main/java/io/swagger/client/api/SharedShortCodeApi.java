/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SharedShortCodeApi {
  String basePath = "https://api.ytel.com/api/v3";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * List Keywords
  * Retrieve a list of keywords associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize Number of individual resources listed in the response per page
   * @param keyword Only list keywords of keyword
   * @param shortcode Only list keywords of shortcode
   * @return String
  */
  public String keywordLists (Integer page, Integer pagesize, String keyword, Integer shortcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/keyword/lists.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (keyword != null) {
        localVarBuilder.addTextBody("Keyword", ApiInvoker.parameterToString(keyword), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("Keyword", ApiInvoker.parameterToString(keyword));
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Keywords
   * Retrieve a list of keywords associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize Number of individual resources listed in the response per page   * @param keyword Only list keywords of keyword   * @param shortcode Only list keywords of shortcode
  */
  public void keywordLists (Integer page, Integer pagesize, String keyword, Integer shortcode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/keyword/lists.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (keyword != null) {
        localVarBuilder.addTextBody("Keyword", ApiInvoker.parameterToString(keyword), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("Keyword", ApiInvoker.parameterToString(keyword));
formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Keyword
  * View a set of properties for a single keyword.
   * @param keywordid The unique identifier of each keyword
   * @return String
  */
  public String keywordView (String keywordid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'keywordid' is set
    if (keywordid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywordid' when calling keywordView",
        new ApiException(400, "Missing the required parameter 'keywordid' when calling keywordView"));
    }

    // create path and map variables
    String path = "/keyword/view.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (keywordid != null) {
        localVarBuilder.addTextBody("Keywordid", ApiInvoker.parameterToString(keywordid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Keywordid", ApiInvoker.parameterToString(keywordid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Keyword
   * View a set of properties for a single keyword.
   * @param keywordid The unique identifier of each keyword
  */
  public void keywordView (String keywordid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'keywordid' is set
    if (keywordid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywordid' when calling keywordView",
        new ApiException(400, "Missing the required parameter 'keywordid' when calling keywordView"));
    }

    // create path and map variables
    String path = "/keyword/view.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (keywordid != null) {
        localVarBuilder.addTextBody("Keywordid", ApiInvoker.parameterToString(keywordid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Keywordid", ApiInvoker.parameterToString(keywordid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Inbound SMS
  * List All Inbound ShortCode
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize Number of individual resources listed in the response per page
   * @param from From Number to Inbound ShortCode
   * @param shortcode Only list messages sent to this Short Code
   * @param datecreated Only list messages sent with the specified date
   * @return String
  */
  public String shortcodeGetinboundsms (Integer page, Integer pagesize, String from, String shortcode, String datecreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/shortcode/getinboundsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Datecreated", datecreated));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("from", ApiInvoker.parameterToString(from));
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Inbound SMS
   * List All Inbound ShortCode
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize Number of individual resources listed in the response per page   * @param from From Number to Inbound ShortCode   * @param shortcode Only list messages sent to this Short Code   * @param datecreated Only list messages sent with the specified date
  */
  public void shortcodeGetinboundsms (Integer page, Integer pagesize, String from, String shortcode, String datecreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/shortcode/getinboundsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "Datecreated", datecreated));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (from != null) {
        localVarBuilder.addTextBody("from", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("from", ApiInvoker.parameterToString(from));
formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Shortcodes
  * Retrieve a list of shortcode assignment associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize Number of individual resources listed in the response per page
   * @param shortcode Only list keywords of shortcode
   * @return String
  */
  public String shortcodeListshortcode (Integer page, Integer pagesize, String shortcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/shortcode/listshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Shortcode", shortcode));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Shortcodes
   * Retrieve a list of shortcode assignment associated with your Ytel account.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize Number of individual resources listed in the response per page   * @param shortcode Only list keywords of shortcode
  */
  public void shortcodeListshortcode (Integer page, Integer pagesize, String shortcode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/shortcode/listshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "Shortcode", shortcode));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Send SMS
  * Send an SMS from a Ytel ShortCode
   * @param shortcode The Short Code number that is the sender of this message
   * @param to A valid 10-digit number that should receive the message
   * @param templateid The unique identifier for the template used for the message
   * @param data format of your data, example: {companyname}:test,{otpcode}:1234
   * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent.
   * @param messageStatusCallback URL that can be requested to receive notification when Short Code message was sent.
   * @return String
  */
  public String shortcodeSendsms (String shortcode, String to, UUID templateid, String data, String method, String messageStatusCallback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'to' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'templateid' is set
    if (templateid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateid' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'templateid' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'data' when calling shortcodeSendsms"));
    }

    // create path and map variables
    String path = "/shortcode/sendsms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (templateid != null) {
        localVarBuilder.addTextBody("templateid", ApiInvoker.parameterToString(templateid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (data != null) {
        localVarBuilder.addTextBody("data", ApiInvoker.parameterToString(data), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (messageStatusCallback != null) {
        localVarBuilder.addTextBody("MessageStatusCallback", ApiInvoker.parameterToString(messageStatusCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("to", ApiInvoker.parameterToString(to));
      formParams.put("templateid", ApiInvoker.parameterToString(templateid));
      formParams.put("data", ApiInvoker.parameterToString(data));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("MessageStatusCallback", ApiInvoker.parameterToString(messageStatusCallback));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Send SMS
   * Send an SMS from a Ytel ShortCode
   * @param shortcode The Short Code number that is the sender of this message   * @param to A valid 10-digit number that should receive the message   * @param templateid The unique identifier for the template used for the message   * @param data format of your data, example: {companyname}:test,{otpcode}:1234   * @param method Specifies the HTTP method used to request the required URL once the Short Code message is sent.   * @param messageStatusCallback URL that can be requested to receive notification when Short Code message was sent.
  */
  public void shortcodeSendsms (String shortcode, String to, UUID templateid, String data, String method, String messageStatusCallback, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'to' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'templateid' is set
    if (templateid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateid' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'templateid' when calling shortcodeSendsms"));
    }
    // verify the required parameter 'data' is set
    if (data == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'data' when calling shortcodeSendsms",
        new ApiException(400, "Missing the required parameter 'data' when calling shortcodeSendsms"));
    }

    // create path and map variables
    String path = "/shortcode/sendsms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("to", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (templateid != null) {
        localVarBuilder.addTextBody("templateid", ApiInvoker.parameterToString(templateid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (data != null) {
        localVarBuilder.addTextBody("data", ApiInvoker.parameterToString(data), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (messageStatusCallback != null) {
        localVarBuilder.addTextBody("MessageStatusCallback", ApiInvoker.parameterToString(messageStatusCallback), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("to", ApiInvoker.parameterToString(to));
formParams.put("templateid", ApiInvoker.parameterToString(templateid));
formParams.put("data", ApiInvoker.parameterToString(data));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("MessageStatusCallback", ApiInvoker.parameterToString(messageStatusCallback));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Shortcode
  * Update Assignment
   * @param shortcode List of valid shortcode to your Ytel account
   * @param friendlyName User generated name of the shortcode
   * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
   * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
   * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
   * @param fallbackUrlMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
   * @return String
  */
  public String shortcodeUpdateshortcode (String shortcode, String friendlyName, String callbackUrl, String callbackMethod, String fallbackUrl, String fallbackUrlMethod) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeUpdateshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeUpdateshortcode"));
    }

    // create path and map variables
    String path = "/shortcode/updateshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (callbackUrl != null) {
        localVarBuilder.addTextBody("CallbackUrl", ApiInvoker.parameterToString(callbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (callbackMethod != null) {
        localVarBuilder.addTextBody("CallbackMethod", ApiInvoker.parameterToString(callbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackUrlMethod != null) {
        localVarBuilder.addTextBody("FallbackUrlMethod", ApiInvoker.parameterToString(fallbackUrlMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
      formParams.put("CallbackUrl", ApiInvoker.parameterToString(callbackUrl));
      formParams.put("CallbackMethod", ApiInvoker.parameterToString(callbackMethod));
      formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
      formParams.put("FallbackUrlMethod", ApiInvoker.parameterToString(fallbackUrlMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Shortcode
   * Update Assignment
   * @param shortcode List of valid shortcode to your Ytel account   * @param friendlyName User generated name of the shortcode   * @param callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.   * @param callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.   * @param fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.   * @param fallbackUrlMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
  */
  public void shortcodeUpdateshortcode (String shortcode, String friendlyName, String callbackUrl, String callbackMethod, String fallbackUrl, String fallbackUrlMethod, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeUpdateshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeUpdateshortcode"));
    }

    // create path and map variables
    String path = "/shortcode/updateshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callbackUrl != null) {
        localVarBuilder.addTextBody("CallbackUrl", ApiInvoker.parameterToString(callbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (callbackMethod != null) {
        localVarBuilder.addTextBody("CallbackMethod", ApiInvoker.parameterToString(callbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackUrlMethod != null) {
        localVarBuilder.addTextBody("FallbackUrlMethod", ApiInvoker.parameterToString(fallbackUrlMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
formParams.put("CallbackUrl", ApiInvoker.parameterToString(callbackUrl));
formParams.put("CallbackMethod", ApiInvoker.parameterToString(callbackMethod));
formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
formParams.put("FallbackUrlMethod", ApiInvoker.parameterToString(fallbackUrlMethod));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Shortcode
  * The response returned here contains all resource properties associated with the given Shortcode.
   * @param shortcode List of valid Shortcode to your Ytel account
   * @return String
  */
  public String shortcodeViewshortcode (String shortcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeViewshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeViewshortcode"));
    }

    // create path and map variables
    String path = "/shortcode/viewshortcode.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Shortcode
   * The response returned here contains all resource properties associated with the given Shortcode.
   * @param shortcode List of valid Shortcode to your Ytel account
  */
  public void shortcodeViewshortcode (String shortcode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shortcode' is set
    if (shortcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortcode' when calling shortcodeViewshortcode",
        new ApiException(400, "Missing the required parameter 'shortcode' when calling shortcodeViewshortcode"));
    }

    // create path and map variables
    String path = "/shortcode/viewshortcode.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Templates
  * List Shortcode Templates by Type
   * @param type The type (category) of template Valid values: marketing, authorization
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param shortcode Only list templates of type
   * @return String
  */
  public String templateLists (String type, Integer page, Integer pagesize, String shortcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/template/lists.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("type", ApiInvoker.parameterToString(type));
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Templates
   * List Shortcode Templates by Type
   * @param type The type (category) of template Valid values: marketing, authorization   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.   * @param shortcode Only list templates of type
  */
  public void templateLists (String type, Integer page, Integer pagesize, String shortcode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/template/lists.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (shortcode != null) {
        localVarBuilder.addTextBody("Shortcode", ApiInvoker.parameterToString(shortcode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("type", ApiInvoker.parameterToString(type));
formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("Shortcode", ApiInvoker.parameterToString(shortcode));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Template
  * View a Shared ShortCode Template
   * @param templateId The unique identifier for a template object
   * @return String
  */
  public String templateView (UUID templateId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateId' when calling templateView",
        new ApiException(400, "Missing the required parameter 'templateId' when calling templateView"));
    }

    // create path and map variables
    String path = "/template/view.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (templateId != null) {
        localVarBuilder.addTextBody("TemplateId", ApiInvoker.parameterToString(templateId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("TemplateId", ApiInvoker.parameterToString(templateId));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Template
   * View a Shared ShortCode Template
   * @param templateId The unique identifier for a template object
  */
  public void templateView (UUID templateId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateId' when calling templateView",
        new ApiException(400, "Missing the required parameter 'templateId' when calling templateView"));
    }

    // create path and map variables
    String path = "/template/view.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (templateId != null) {
        localVarBuilder.addTextBody("TemplateId", ApiInvoker.parameterToString(templateId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("TemplateId", ApiInvoker.parameterToString(templateId));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
