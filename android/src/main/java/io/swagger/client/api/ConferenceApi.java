/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ConferenceApi {
  String basePath = "https://api.message360.com/api/v3/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add Participant
  * Add Participant in conference 
   * @param conferenceSid The unique identifier for a conference object.
   * @param participantNumber The phone number of the participant to be added.
   * @param muted Specifies if participant should be muted.
   * @param deaf Specifies if the participant should hear audio in the conference.
   * @return String
  */
  public String conferencesAddParticipant (String conferenceSid, String participantNumber, Boolean muted, Boolean deaf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesAddParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesAddParticipant"));
    }
    // verify the required parameter 'participantNumber' is set
    if (participantNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantNumber' when calling conferencesAddParticipant",
        new ApiException(400, "Missing the required parameter 'participantNumber' when calling conferencesAddParticipant"));
    }

    // create path and map variables
    String path = "/conferences/addParticipant.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (participantNumber != null) {
        localVarBuilder.addTextBody("ParticipantNumber", ApiInvoker.parameterToString(participantNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
      formParams.put("ParticipantNumber", ApiInvoker.parameterToString(participantNumber));
      formParams.put("Muted", ApiInvoker.parameterToString(muted));
      formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Participant
   * Add Participant in conference 
   * @param conferenceSid The unique identifier for a conference object.   * @param participantNumber The phone number of the participant to be added.   * @param muted Specifies if participant should be muted.   * @param deaf Specifies if the participant should hear audio in the conference.
  */
  public void conferencesAddParticipant (String conferenceSid, String participantNumber, Boolean muted, Boolean deaf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesAddParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesAddParticipant"));
    }
    // verify the required parameter 'participantNumber' is set
    if (participantNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantNumber' when calling conferencesAddParticipant",
        new ApiException(400, "Missing the required parameter 'participantNumber' when calling conferencesAddParticipant"));
    }

    // create path and map variables
    String path = "/conferences/addParticipant.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (participantNumber != null) {
        localVarBuilder.addTextBody("ParticipantNumber", ApiInvoker.parameterToString(participantNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
formParams.put("ParticipantNumber", ApiInvoker.parameterToString(participantNumber));
formParams.put("Muted", ApiInvoker.parameterToString(muted));
formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Conference
  * Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
   * @param from A valid 10-digit number (E.164 format) that will be initiating the conference call.
   * @param to A valid 10-digit number (E.164 format) that is to receive the conference call.
   * @param url URL requested once the conference connects
   * @param method Specifies the HTTP method used to request the required URL once call connects.
   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
   * @param fallbackUrl URL requested if the initial Url parameter fails or encounters an error
   * @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
   * @param record Specifies if the conference should be recorded.
   * @param recordCallBackUrl Recording parameters will be sent here upon completion.
   * @param recordCallBackMethod Specifies the HTTP method used to request the required URL once conference connects.
   * @param scheduleTime Schedule conference in future. Schedule time must be greater than current time
   * @param timeout The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
   * @return String
  */
  public String conferencesCreateConference (String from, String to, String url, String method, String statusCallBackUrl, String statusCallBackMethod, String fallbackUrl, String fallbackMethod, Boolean record, String recordCallBackUrl, String recordCallBackMethod, String scheduleTime, Integer timeout) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'from' when calling conferencesCreateConference"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'to' when calling conferencesCreateConference"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'url' when calling conferencesCreateConference"));
    }

    // create path and map variables
    String path = "/conferences/createConference.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "Url", url));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (fallbackMethod != null) {
        localVarBuilder.addTextBody("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (scheduleTime != null) {
        localVarBuilder.addTextBody("ScheduleTime", ApiInvoker.parameterToString(scheduleTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
      formParams.put("To", ApiInvoker.parameterToString(to));
      formParams.put("Method", ApiInvoker.parameterToString(method));
      formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
      formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
      formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
      formParams.put("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod));
      formParams.put("Record", ApiInvoker.parameterToString(record));
      formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
      formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
      formParams.put("ScheduleTime", ApiInvoker.parameterToString(scheduleTime));
      formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Conference
   * Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
   * @param from A valid 10-digit number (E.164 format) that will be initiating the conference call.   * @param to A valid 10-digit number (E.164 format) that is to receive the conference call.   * @param url URL requested once the conference connects   * @param method Specifies the HTTP method used to request the required URL once call connects.   * @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.   * @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.   * @param fallbackUrl URL requested if the initial Url parameter fails or encounters an error   * @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.   * @param record Specifies if the conference should be recorded.   * @param recordCallBackUrl Recording parameters will be sent here upon completion.   * @param recordCallBackMethod Specifies the HTTP method used to request the required URL once conference connects.   * @param scheduleTime Schedule conference in future. Schedule time must be greater than current time   * @param timeout The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
  */
  public void conferencesCreateConference (String from, String to, String url, String method, String statusCallBackUrl, String statusCallBackMethod, String fallbackUrl, String fallbackMethod, Boolean record, String recordCallBackUrl, String recordCallBackMethod, String scheduleTime, Integer timeout, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'from' when calling conferencesCreateConference"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'to' when calling conferencesCreateConference"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling conferencesCreateConference",
        new ApiException(400, "Missing the required parameter 'url' when calling conferencesCreateConference"));
    }

    // create path and map variables
    String path = "/conferences/createConference.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "Url", url));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (from != null) {
        localVarBuilder.addTextBody("From", ApiInvoker.parameterToString(from), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (to != null) {
        localVarBuilder.addTextBody("To", ApiInvoker.parameterToString(to), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (method != null) {
        localVarBuilder.addTextBody("Method", ApiInvoker.parameterToString(method), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackUrl != null) {
        localVarBuilder.addTextBody("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (statusCallBackMethod != null) {
        localVarBuilder.addTextBody("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackUrl != null) {
        localVarBuilder.addTextBody("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fallbackMethod != null) {
        localVarBuilder.addTextBody("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (record != null) {
        localVarBuilder.addTextBody("Record", ApiInvoker.parameterToString(record), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackUrl != null) {
        localVarBuilder.addTextBody("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (recordCallBackMethod != null) {
        localVarBuilder.addTextBody("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (scheduleTime != null) {
        localVarBuilder.addTextBody("ScheduleTime", ApiInvoker.parameterToString(scheduleTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timeout != null) {
        localVarBuilder.addTextBody("Timeout", ApiInvoker.parameterToString(timeout), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("From", ApiInvoker.parameterToString(from));
formParams.put("To", ApiInvoker.parameterToString(to));
formParams.put("Method", ApiInvoker.parameterToString(method));
formParams.put("StatusCallBackUrl", ApiInvoker.parameterToString(statusCallBackUrl));
formParams.put("StatusCallBackMethod", ApiInvoker.parameterToString(statusCallBackMethod));
formParams.put("FallbackUrl", ApiInvoker.parameterToString(fallbackUrl));
formParams.put("FallbackMethod", ApiInvoker.parameterToString(fallbackMethod));
formParams.put("Record", ApiInvoker.parameterToString(record));
formParams.put("RecordCallBackUrl", ApiInvoker.parameterToString(recordCallBackUrl));
formParams.put("RecordCallBackMethod", ApiInvoker.parameterToString(recordCallBackMethod));
formParams.put("ScheduleTime", ApiInvoker.parameterToString(scheduleTime));
formParams.put("Timeout", ApiInvoker.parameterToString(timeout));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Silence Participant
  * Deaf Mute Participant
   * @param conferenceSid ID of the active conference
   * @param participantSid ID of an active participant
   * @param muted Mute a participant
   * @param deaf Make it so a participant cant hear
   * @return String
  */
  public String conferencesDeafMuteParticipant (String conferenceSid, String participantSid, Boolean muted, Boolean deaf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesDeafMuteParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesDeafMuteParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesDeafMuteParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesDeafMuteParticipant"));
    }

    // create path and map variables
    String path = "/conferences/deafMuteParticipant.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("conferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("conferenceSid", ApiInvoker.parameterToString(conferenceSid));
      formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
      formParams.put("Muted", ApiInvoker.parameterToString(muted));
      formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Silence Participant
   * Deaf Mute Participant
   * @param conferenceSid ID of the active conference   * @param participantSid ID of an active participant   * @param muted Mute a participant   * @param deaf Make it so a participant cant hear
  */
  public void conferencesDeafMuteParticipant (String conferenceSid, String participantSid, Boolean muted, Boolean deaf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesDeafMuteParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesDeafMuteParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesDeafMuteParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesDeafMuteParticipant"));
    }

    // create path and map variables
    String path = "/conferences/deafMuteParticipant.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("conferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("conferenceSid", ApiInvoker.parameterToString(conferenceSid));
formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
formParams.put("Muted", ApiInvoker.parameterToString(muted));
formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Hangup Participant
  * Remove a participant from a conference.
   * @param conferenceSid The unique identifier for a conference object.
   * @param participantSid The unique identifier for a participant object.
   * @return String
  */
  public String conferencesHangupParticipant (String conferenceSid, String participantSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesHangupParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesHangupParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesHangupParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesHangupParticipant"));
    }

    // create path and map variables
    String path = "/conferences/hangupParticipant.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ParticipantSid", participantSid));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Hangup Participant
   * Remove a participant from a conference.
   * @param conferenceSid The unique identifier for a conference object.   * @param participantSid The unique identifier for a participant object.
  */
  public void conferencesHangupParticipant (String conferenceSid, String participantSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesHangupParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesHangupParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesHangupParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesHangupParticipant"));
    }

    // create path and map variables
    String path = "/conferences/hangupParticipant.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ParticipantSid", participantSid));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Participants
  * Retrieve a list of participants for an in-progress conference.
   * @param conferenceSid The unique identifier for a conference.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize The count of objects to return per page.
   * @param muted Specifies if participant should be muted.
   * @param deaf Specifies if the participant should hear audio in the conference.
   * @return String
  */
  public String conferencesListParticipant (String conferenceSid, Integer page, Integer pagesize, Boolean muted, Boolean deaf) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesListParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesListParticipant"));
    }

    // create path and map variables
    String path = "/conferences/listParticipant.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("Pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
      formParams.put("Page", ApiInvoker.parameterToString(page));
      formParams.put("Pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("Muted", ApiInvoker.parameterToString(muted));
      formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Participants
   * Retrieve a list of participants for an in-progress conference.
   * @param conferenceSid The unique identifier for a conference.   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize The count of objects to return per page.   * @param muted Specifies if participant should be muted.   * @param deaf Specifies if the participant should hear audio in the conference.
  */
  public void conferencesListParticipant (String conferenceSid, Integer page, Integer pagesize, Boolean muted, Boolean deaf, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesListParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesListParticipant"));
    }

    // create path and map variables
    String path = "/conferences/listParticipant.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (page != null) {
        localVarBuilder.addTextBody("Page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("Pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (muted != null) {
        localVarBuilder.addTextBody("Muted", ApiInvoker.parameterToString(muted), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (deaf != null) {
        localVarBuilder.addTextBody("Deaf", ApiInvoker.parameterToString(deaf), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
formParams.put("Page", ApiInvoker.parameterToString(page));
formParams.put("Pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("Muted", ApiInvoker.parameterToString(muted));
formParams.put("Deaf", ApiInvoker.parameterToString(deaf));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Conferences
  * Retrieve a list of conference objects.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
   * @param pagesize Number of individual resources listed in the response per page
   * @param friendlyName Only return conferences with the specified FriendlyName
   * @param dateCreated Conference created date
   * @return String
  */
  public String conferencesListconference (Integer page, Integer pagesize, String friendlyName, String dateCreated) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/conferences/listconference.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (dateCreated != null) {
        localVarBuilder.addTextBody("DateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
      formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
      formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
      formParams.put("DateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Conferences
   * Retrieve a list of conference objects.
   * @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1.   * @param pagesize Number of individual resources listed in the response per page   * @param friendlyName Only return conferences with the specified FriendlyName   * @param dateCreated Conference created date
  */
  public void conferencesListconference (Integer page, Integer pagesize, String friendlyName, String dateCreated, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/conferences/listconference.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pagesize != null) {
        localVarBuilder.addTextBody("pagesize", ApiInvoker.parameterToString(pagesize), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (friendlyName != null) {
        localVarBuilder.addTextBody("FriendlyName", ApiInvoker.parameterToString(friendlyName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dateCreated != null) {
        localVarBuilder.addTextBody("DateCreated", ApiInvoker.parameterToString(dateCreated), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("pagesize", ApiInvoker.parameterToString(pagesize));
formParams.put("FriendlyName", ApiInvoker.parameterToString(friendlyName));
formParams.put("DateCreated", ApiInvoker.parameterToString(dateCreated));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Play Audio
  * Play an audio file during a conference.
   * @param conferenceSid The unique identifier for a conference object.
   * @param participantSid The unique identifier for a participant object.
   * @param audioUrl The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.
   * @return String
  */
  public String conferencesPlayAudio (String conferenceSid, String participantSid, String audioUrl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesPlayAudio"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesPlayAudio"));
    }
    // verify the required parameter 'audioUrl' is set
    if (audioUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audioUrl' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'audioUrl' when calling conferencesPlayAudio"));
    }

    // create path and map variables
    String path = "/conferences/playAudio.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (audioUrl != null) {
        localVarBuilder.addTextBody("AudioUrl", ApiInvoker.parameterToString(audioUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
      formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
      formParams.put("AudioUrl", ApiInvoker.parameterToString(audioUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Play Audio
   * Play an audio file during a conference.
   * @param conferenceSid The unique identifier for a conference object.   * @param participantSid The unique identifier for a participant object.   * @param audioUrl The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.
  */
  public void conferencesPlayAudio (String conferenceSid, String participantSid, String audioUrl, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesPlayAudio"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesPlayAudio"));
    }
    // verify the required parameter 'audioUrl' is set
    if (audioUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audioUrl' when calling conferencesPlayAudio",
        new ApiException(400, "Missing the required parameter 'audioUrl' when calling conferencesPlayAudio"));
    }

    // create path and map variables
    String path = "/conferences/playAudio.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (audioUrl != null) {
        localVarBuilder.addTextBody("AudioUrl", ApiInvoker.parameterToString(audioUrl), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
formParams.put("AudioUrl", ApiInvoker.parameterToString(audioUrl));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Participant
  * Retrieve information about a participant by its ParticipantSid.
   * @param conferenceSid The unique identifier for a conference object.
   * @param participantSid The unique identifier for a participant object.
   * @return String
  */
  public String conferencesViewParticipant (String conferenceSid, String participantSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesViewParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesViewParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesViewParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesViewParticipant"));
    }

    // create path and map variables
    String path = "/conferences/viewParticipant.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
      formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Participant
   * Retrieve information about a participant by its ParticipantSid.
   * @param conferenceSid The unique identifier for a conference object.   * @param participantSid The unique identifier for a participant object.
  */
  public void conferencesViewParticipant (String conferenceSid, String participantSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesViewParticipant",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesViewParticipant"));
    }
    // verify the required parameter 'participantSid' is set
    if (participantSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'participantSid' when calling conferencesViewParticipant",
        new ApiException(400, "Missing the required parameter 'participantSid' when calling conferencesViewParticipant"));
    }

    // create path and map variables
    String path = "/conferences/viewParticipant.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (participantSid != null) {
        localVarBuilder.addTextBody("ParticipantSid", ApiInvoker.parameterToString(participantSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
formParams.put("ParticipantSid", ApiInvoker.parameterToString(participantSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Conference
  * Retrieve information about a conference by its ConferenceSid.
   * @param conferenceSid The unique identifier of each conference resource
   * @return String
  */
  public String conferencesViewconference (String conferenceSid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesViewconference",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesViewconference"));
    }

    // create path and map variables
    String path = "/conferences/viewconference.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Conference
   * Retrieve information about a conference by its ConferenceSid.
   * @param conferenceSid The unique identifier of each conference resource
  */
  public void conferencesViewconference (String conferenceSid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'conferenceSid' is set
    if (conferenceSid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'conferenceSid' when calling conferencesViewconference",
        new ApiException(400, "Missing the required parameter 'conferenceSid' when calling conferencesViewconference"));
    }

    // create path and map variables
    String path = "/conferences/viewconference.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (conferenceSid != null) {
        localVarBuilder.addTextBody("ConferenceSid", ApiInvoker.parameterToString(conferenceSid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("ConferenceSid", ApiInvoker.parameterToString(conferenceSid));
    }

    String[] authNames = new String[] { "auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
