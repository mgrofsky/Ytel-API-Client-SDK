/**
 * Ytel API V3
 * Ytel API version 3
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Activate".equalsIgnoreCase(className)) {
      return new TypeToken<List<Activate>>(){}.getType();
    }
    
    if ("ActivateStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActivateStatus>>(){}.getType();
    }
    
    if ("AudioDirection".equalsIgnoreCase(className)) {
      return new TypeToken<List<AudioDirection>>(){}.getType();
    }
    
    if ("AudioFormat".equalsIgnoreCase(className)) {
      return new TypeToken<List<AudioFormat>>(){}.getType();
    }
    
    if ("AudioUrl".equalsIgnoreCase(className)) {
      return new TypeToken<List<AudioUrl>>(){}.getType();
    }
    
    if ("Direction".equalsIgnoreCase(className)) {
      return new TypeToken<List<Direction>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("Errors".equalsIgnoreCase(className)) {
      return new TypeToken<List<Errors>>(){}.getType();
    }
    
    if ("Fileformat".equalsIgnoreCase(className)) {
      return new TypeToken<List<Fileformat>>(){}.getType();
    }
    
    if ("GroupConfirmFile".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupConfirmFile>>(){}.getType();
    }
    
    if ("HttpAction".equalsIgnoreCase(className)) {
      return new TypeToken<List<HttpAction>>(){}.getType();
    }
    
    if ("IfMachine".equalsIgnoreCase(className)) {
      return new TypeToken<List<IfMachine>>(){}.getType();
    }
    
    if ("InterruptedCallStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<InterruptedCallStatus>>(){}.getType();
    }
    
    if ("MergeNumber".equalsIgnoreCase(className)) {
      return new TypeToken<List<MergeNumber>>(){}.getType();
    }
    
    if ("MergeNumberStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<MergeNumberStatus>>(){}.getType();
    }
    
    if ("Message".equalsIgnoreCase(className)) {
      return new TypeToken<List<Message>>(){}.getType();
    }
    
    if ("NumberType".equalsIgnoreCase(className)) {
      return new TypeToken<List<NumberType>>(){}.getType();
    }
    
    if ("Numbertype16".equalsIgnoreCase(className)) {
      return new TypeToken<List<Numbertype16>>(){}.getType();
    }
    
    if ("PlayDtmfDirection".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlayDtmfDirection>>(){}.getType();
    }
    
    if ("ProductCode".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductCode>>(){}.getType();
    }
    
    if ("ProductCode27".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductCode27>>(){}.getType();
    }
    
    if ("SendEmailAs".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailAs>>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<List<Status>>(){}.getType();
    }
    
    if ("Status24".equalsIgnoreCase(className)) {
      return new TypeToken<List<Status24>>(){}.getType();
    }
    
    if ("TemplateData".equalsIgnoreCase(className)) {
      return new TypeToken<List<TemplateData>>(){}.getType();
    }
    
    if ("Type".equalsIgnoreCase(className)) {
      return new TypeToken<List<Type>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Activate".equalsIgnoreCase(className)) {
      return new TypeToken<Activate>(){}.getType();
    }
    
    if ("ActivateStatus".equalsIgnoreCase(className)) {
      return new TypeToken<ActivateStatus>(){}.getType();
    }
    
    if ("AudioDirection".equalsIgnoreCase(className)) {
      return new TypeToken<AudioDirection>(){}.getType();
    }
    
    if ("AudioFormat".equalsIgnoreCase(className)) {
      return new TypeToken<AudioFormat>(){}.getType();
    }
    
    if ("AudioUrl".equalsIgnoreCase(className)) {
      return new TypeToken<AudioUrl>(){}.getType();
    }
    
    if ("Direction".equalsIgnoreCase(className)) {
      return new TypeToken<Direction>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("Errors".equalsIgnoreCase(className)) {
      return new TypeToken<Errors>(){}.getType();
    }
    
    if ("Fileformat".equalsIgnoreCase(className)) {
      return new TypeToken<Fileformat>(){}.getType();
    }
    
    if ("GroupConfirmFile".equalsIgnoreCase(className)) {
      return new TypeToken<GroupConfirmFile>(){}.getType();
    }
    
    if ("HttpAction".equalsIgnoreCase(className)) {
      return new TypeToken<HttpAction>(){}.getType();
    }
    
    if ("IfMachine".equalsIgnoreCase(className)) {
      return new TypeToken<IfMachine>(){}.getType();
    }
    
    if ("InterruptedCallStatus".equalsIgnoreCase(className)) {
      return new TypeToken<InterruptedCallStatus>(){}.getType();
    }
    
    if ("MergeNumber".equalsIgnoreCase(className)) {
      return new TypeToken<MergeNumber>(){}.getType();
    }
    
    if ("MergeNumberStatus".equalsIgnoreCase(className)) {
      return new TypeToken<MergeNumberStatus>(){}.getType();
    }
    
    if ("Message".equalsIgnoreCase(className)) {
      return new TypeToken<Message>(){}.getType();
    }
    
    if ("NumberType".equalsIgnoreCase(className)) {
      return new TypeToken<NumberType>(){}.getType();
    }
    
    if ("Numbertype16".equalsIgnoreCase(className)) {
      return new TypeToken<Numbertype16>(){}.getType();
    }
    
    if ("PlayDtmfDirection".equalsIgnoreCase(className)) {
      return new TypeToken<PlayDtmfDirection>(){}.getType();
    }
    
    if ("ProductCode".equalsIgnoreCase(className)) {
      return new TypeToken<ProductCode>(){}.getType();
    }
    
    if ("ProductCode27".equalsIgnoreCase(className)) {
      return new TypeToken<ProductCode27>(){}.getType();
    }
    
    if ("SendEmailAs".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailAs>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<Status>(){}.getType();
    }
    
    if ("Status24".equalsIgnoreCase(className)) {
      return new TypeToken<Status24>(){}.getType();
    }
    
    if ("TemplateData".equalsIgnoreCase(className)) {
      return new TypeToken<TemplateData>(){}.getType();
    }
    
    if ("Type".equalsIgnoreCase(className)) {
      return new TypeToken<Type>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
