/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AddressApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.AddressApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AddressApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AddressApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AddressApiBasePath')) :
                   'https://api.message360.com/api/v3/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AddressApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AddressApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AddressApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create Address
 * To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.
 * @param {!string} name Name of user
 * @param {!string} address Address of user.
 * @param {!string} country Must be a 2 letter country short-name code (ISO 3166)
 * @param {!string} state Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.
 * @param {!string} city City Name.
 * @param {!string} zip Zip code of city.
 * @param {!string=} opt_description Description of addresses.
 * @param {!string=} opt_email Email Id of user.
 * @param {!string=} opt_phone Phone number of user.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AddressApi.prototype.addressCreateaddress = function(name, address, country, state, city, zip, opt_description, opt_email, opt_phone, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/address/createaddress.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling addressCreateaddress');
  }
  // verify required parameter 'address' is set
  if (!address) {
    throw new Error('Missing required parameter address when calling addressCreateaddress');
  }
  // verify required parameter 'country' is set
  if (!country) {
    throw new Error('Missing required parameter country when calling addressCreateaddress');
  }
  // verify required parameter 'state' is set
  if (!state) {
    throw new Error('Missing required parameter state when calling addressCreateaddress');
  }
  // verify required parameter 'city' is set
  if (!city) {
    throw new Error('Missing required parameter city when calling addressCreateaddress');
  }
  // verify required parameter 'zip' is set
  if (!zip) {
    throw new Error('Missing required parameter zip when calling addressCreateaddress');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Name'] = name;

  formParams['Address'] = address;

  formParams['Country'] = country;

  formParams['State'] = state;

  formParams['City'] = city;

  formParams['Zip'] = zip;

  formParams['Description'] = opt_description;

  formParams['email'] = opt_email;

  formParams['Phone'] = opt_phone;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Address
 * To delete Address to your address book
 * @param {!string} addressid The identifier of the address to be deleted.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AddressApi.prototype.addressDeleteaddress = function(addressid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/address/deleteaddress.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'addressid' is set
  if (!addressid) {
    throw new Error('Missing required parameter addressid when calling addressDeleteaddress');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['addressid'] = addressid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Addresses
 * List All Address 
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pagesize How many results to return, default is 10, max is 100, must be an integer
 * @param {!string=} opt_addressid addresses Sid
 * @param {!string=} opt_dateCreated date created address.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AddressApi.prototype.addressListaddress = function(opt_page, opt_pagesize, opt_addressid, opt_dateCreated, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/address/listaddress.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  formParams['addressid'] = opt_addressid;

  formParams['dateCreated'] = opt_dateCreated;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Verify Address
 * Validates an address given.
 * @param {!string} addressid The identifier of the address to be verified.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AddressApi.prototype.addressVerifyaddress = function(addressid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/address/verifyaddress.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'addressid' is set
  if (!addressid) {
    throw new Error('Missing required parameter addressid when calling addressVerifyaddress');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['addressid'] = addressid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Address
 * View Address Specific address Book by providing the address id
 * @param {!string} addressid The identifier of the address to be retrieved.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AddressApi.prototype.addressViewaddress = function(addressid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/address/viewaddress.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'addressid' is set
  if (!addressid) {
    throw new Error('Missing required parameter addressid when calling addressViewaddress');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['addressid'] = addressid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
