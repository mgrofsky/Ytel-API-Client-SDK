/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TranscriptionApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.12
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.TranscriptionApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TranscriptionApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TranscriptionApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TranscriptionApiBasePath')) :
                   'https://api.ytel.com/api/v3';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TranscriptionApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TranscriptionApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TranscriptionApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Transcribe Audio URL
 * Transcribe an audio recording from a file.
 * @param {!string} audiourl URL pointing to the location of the audio file that is to be transcribed.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.TranscriptionApi.prototype.transcriptionsAudiourltranscription = function(audiourl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transcriptions/audiourltranscription.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'audiourl' is set
  if (!audiourl) {
    throw new Error('Missing required parameter audiourl when calling transcriptionsAudiourltranscription');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['audiourl'] = audiourl;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Transcriptions
 * Retrieve a list of transcription objects for your Ytel account.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pagesize The count of objects to return per page.
 * @param {!string=} opt_status The state of the transcription.
 * @param {!string=} opt_dateTranscribed The date the transcription took place.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.TranscriptionApi.prototype.transcriptionsListtranscription = function(opt_page, opt_pagesize, opt_status, opt_dateTranscribed, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transcriptions/listtranscription.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  formParams['status'] = opt_status;

  formParams['dateTranscribed'] = opt_dateTranscribed;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transcribe Recording
 * Transcribe a recording by its RecordingSid.
 * @param {!string} recordingSid The unique identifier for a recording object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.TranscriptionApi.prototype.transcriptionsRecordingtranscription = function(recordingSid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transcriptions/recordingtranscription.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'recordingSid' is set
  if (!recordingSid) {
    throw new Error('Missing required parameter recordingSid when calling transcriptionsRecordingtranscription');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['recordingSid'] = recordingSid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Transcription
 * Retrieve information about a transaction by its TranscriptionSid.
 * @param {!string} transcriptionsid The unique identifier for a transcription object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.TranscriptionApi.prototype.transcriptionsViewtranscription = function(transcriptionsid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transcriptions/viewtranscription.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'transcriptionsid' is set
  if (!transcriptionsid) {
    throw new Error('Missing required parameter transcriptionsid when calling transcriptionsViewtranscription');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['transcriptionsid'] = transcriptionsid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
