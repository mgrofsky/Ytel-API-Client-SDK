/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PostCardApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.12
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.PostCardApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PostCardApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PostCardApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PostCardApiBasePath')) :
                   'https://api.ytel.com/api/v3';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PostCardApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PostCardApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PostCardApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create Postcard
 * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
 * @param {!string} to The AddressId or an object structured when creating an address by addresses/Create.
 * @param {!string} from The AddressId or an object structured when creating an address by addresses/Create.
 * @param {!string} attachbyid Set an existing postcard by attaching its PostcardId.
 * @param {!string} front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
 * @param {!string} back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
 * @param {!string} message The message for the back of the postcard with a maximum of 350 characters.
 * @param {!string} setting Code for the dimensions of the media to be printed.
 * @param {!string=} opt_description A description for the postcard.
 * @param {!string=} opt_htmldata A string value that contains HTML markup.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.PostCardApi.prototype.postcardCreatepostcard = function(to, from, attachbyid, front, back, message, setting, opt_description, opt_htmldata, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Postcard/createpostcard.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling postcardCreatepostcard');
  }
  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling postcardCreatepostcard');
  }
  // verify required parameter 'attachbyid' is set
  if (!attachbyid) {
    throw new Error('Missing required parameter attachbyid when calling postcardCreatepostcard');
  }
  // verify required parameter 'front' is set
  if (!front) {
    throw new Error('Missing required parameter front when calling postcardCreatepostcard');
  }
  // verify required parameter 'back' is set
  if (!back) {
    throw new Error('Missing required parameter back when calling postcardCreatepostcard');
  }
  // verify required parameter 'message' is set
  if (!message) {
    throw new Error('Missing required parameter message when calling postcardCreatepostcard');
  }
  // verify required parameter 'setting' is set
  if (!setting) {
    throw new Error('Missing required parameter setting when calling postcardCreatepostcard');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['to'] = to;

  formParams['from'] = from;

  formParams['attachbyid'] = attachbyid;

  formParams['front'] = front;

  formParams['back'] = back;

  formParams['message'] = message;

  formParams['setting'] = setting;

  formParams['description'] = opt_description;

  formParams['htmldata'] = opt_htmldata;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Postcard
 * Remove a postcard object.
 * @param {!string} postcardid The unique identifier of a postcard object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.PostCardApi.prototype.postcardDeletepostcard = function(postcardid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Postcard/deletepostcard.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'postcardid' is set
  if (!postcardid) {
    throw new Error('Missing required parameter postcardid when calling postcardDeletepostcard');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['postcardid'] = postcardid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Postcards
 * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pagesize The count of objects to return per page.
 * @param {!string=} opt_postcardid The unique identifier for a postcard object.
 * @param {!string=} opt_dateCreated The date the postcard was created.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.PostCardApi.prototype.postcardListpostcard = function(opt_page, opt_pagesize, opt_postcardid, opt_dateCreated, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Postcard/listpostcard.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  formParams['postcardid'] = opt_postcardid;

  formParams['dateCreated'] = opt_dateCreated;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Postcard
 * Retrieve a postcard object by its PostcardId.
 * @param {!string} postcardid The unique identifier for a postcard object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.PostCardApi.prototype.postcardViewpostcard = function(postcardid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Postcard/viewpostcard.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'postcardid' is set
  if (!postcardid) {
    throw new Error('Missing required parameter postcardid when calling postcardViewpostcard');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['postcardid'] = postcardid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
