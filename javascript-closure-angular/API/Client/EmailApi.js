/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EmailApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.11
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.EmailApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EmailApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EmailApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EmailApiBasePath')) :
                   'https://api.message360.com/api/v3/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EmailApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EmailApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EmailApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add Email Unsubscribe
 * Add an email to the unsubscribe list
 * @param {!string} email A valid email address that is to be added to the unsubscribe list
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailAddunsubscribesemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/addunsubscribesemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailAddunsubscribesemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Blocked Address
 * Remove an email from blocked emails list.
 * @param {!string} email The email address to be remove from the blocked list.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailDeleteblocksemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/deleteblocksemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailDeleteblocksemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Bounced Email
 * Remove an email address from the bounced list.
 * @param {!string} email The email address to be remove from the bounced email list.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailDeletebouncesemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/deletebouncesemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailDeletebouncesemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Invalid Email
 * Remove an email from the invalid email list.
 * @param {!string} email A valid email address that is to be remove from the invalid email list.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailDeleteinvalidemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/deleteinvalidemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailDeleteinvalidemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Spam Address
 * Remove an email from the spam email list.
 * @param {!string} email A valid email address that is to be remove from the spam list.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailDeletespamemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/deletespamemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailDeletespamemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Remove Unsubscribed Email
 * Remove an email address from the list of unsubscribed emails.
 * @param {!string} email A valid email address that is to be remove from the unsubscribe list.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailDeleteunsubscribedemail = function(email, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/deleteunsubscribedemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'email' is set
  if (!email) {
    throw new Error('Missing required parameter email when calling emailDeleteunsubscribedemail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['email'] = email;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Blocked Emails
 * Retrieve a list of emails that have been blocked.
 * @param {!string=} opt_offset The starting point of the list of blocked emails that should be returned.
 * @param {!string=} opt_limit The count of results that should be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailListblockemail = function(opt_offset, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/listblockemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Offset'] = opt_offset;

  formParams['Limit'] = opt_limit;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Bounced Emails
 * Retrieve a list of emails that have bounced.
 * @param {!string=} opt_offset The starting point of the list of bounced emails that should be returned.
 * @param {!string=} opt_limit The count of results that should be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailListbounceemail = function(opt_offset, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/listbounceemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Offset'] = opt_offset;

  formParams['Limit'] = opt_limit;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invalid Emails
 * Retrieve a list of invalid email addresses.
 * @param {!string=} opt_offset The starting point of the list of invalid emails that should be returned.
 * @param {!string=} opt_limit The count of results that should be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailListinvalidemail = function(opt_offset, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/listinvalidemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Offset'] = opt_offset;

  formParams['Limit'] = opt_limit;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Spam Emails
 * Retrieve a list of emails that are on the spam list.
 * @param {!string=} opt_offset The starting point of the list of spam emails that should be returned.
 * @param {!string=} opt_limit The count of results that should be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailListspamemail = function(opt_offset, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/listspamemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Offset'] = opt_offset;

  formParams['Limit'] = opt_limit;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Unsubscribed Emails
 * Retrieve a list of email addresses from the unsubscribe list.
 * @param {!string=} opt_offset The starting point of the list of unsubscribed emails that should be returned.
 * @param {!string=} opt_limit The count of results that should be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailListunsubscribedemail = function(opt_offset, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/listunsubscribedemail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Offset'] = opt_offset;

  formParams['Limit'] = opt_limit;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Send Email
 * Create and submit an email message to one or more email addresses.
 * @param {!string} to A valid address that will receive the email. Multiple addresses can be separated by using commas.
 * @param {!string} type Specifies the type of email to be sent
 * @param {!string} subject The subject of the mail. Must be a valid string.
 * @param {!string} message The email message that is to be sent in the text.
 * @param {!string=} opt_from A valid address that will send the email.
 * @param {!string=} opt_cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
 * @param {!string=} opt_bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
 * @param {!string=} opt_attachment A file that is attached to the email. Must be less than 7 MB in size.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.EmailApi.prototype.emailSendemails = function(to, type, subject, message, opt_from, opt_cc, opt_bcc, opt_attachment, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/email/sendemails.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling emailSendemails');
  }
  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling emailSendemails');
  }
  // verify required parameter 'subject' is set
  if (!subject) {
    throw new Error('Missing required parameter subject when calling emailSendemails');
  }
  // verify required parameter 'message' is set
  if (!message) {
    throw new Error('Missing required parameter message when calling emailSendemails');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['To'] = to;

  formParams['Type'] = type;

  formParams['Subject'] = subject;

  formParams['Message'] = message;

  formParams['From'] = opt_from;

  formParams['Cc'] = opt_cc;

  formParams['Bcc'] = opt_bcc;

  formParams['Attachment'] = opt_attachment;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
