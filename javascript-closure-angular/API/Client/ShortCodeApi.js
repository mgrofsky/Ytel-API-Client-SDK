/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ShortCodeApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.ShortCodeApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ShortCodeApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ShortCodeApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ShortCodeApiBasePath')) :
                   'https://api.message360.com/api/v3/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ShortCodeApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ShortCodeApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ShortCodeApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * List Inbound SMS
 * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pagesize Number of individual resources listed in the response per page
 * @param {!string=} opt_from Only list SMS messages sent from this number
 * @param {!string=} opt_shortcode Only list SMS messages sent to Shortcode
 * @param {!string=} opt_datecreated Only list SMS messages sent in the specified date MAKE REQUEST
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.dedicatedshortcodeGetinboundsms = function(opt_page, opt_pagesize, opt_from, opt_shortcode, opt_datecreated, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dedicatedshortcode/getinboundsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  formParams['From'] = opt_from;

  formParams['Shortcode'] = opt_shortcode;

  formParams['Datecreated'] = opt_datecreated;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Shortcodes
 * Retrieve a list of Short Code assignment associated with your Ytel account.
 * @param {!string=} opt_shortcode Only list Short Code Assignment sent from this Short Code
 * @param {!string=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!string=} opt_pagesize The count of objects to return per page.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.dedicatedshortcodeListshortcode = function(opt_shortcode, opt_page, opt_pagesize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dedicatedshortcode/listshortcode.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Shortcode'] = opt_shortcode;

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Send SMS
 * Send Dedicated Shortcode
 * @param {!number} shortcode Your dedicated shortcode
 * @param {!number} to The number to send your SMS to
 * @param {!string} body The body of your message
 * @param {!string=} opt_method Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
 * @param {!string=} opt_messagestatuscallback URL that can be requested to receive notification when Short Code message was sent.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.dedicatedshortcodeSendsms = function(shortcode, to, body, opt_method, opt_messagestatuscallback, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dedicatedshortcode/sendsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'shortcode' is set
  if (!shortcode) {
    throw new Error('Missing required parameter shortcode when calling dedicatedshortcodeSendsms');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling dedicatedshortcodeSendsms');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling dedicatedshortcodeSendsms');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['shortcode'] = shortcode;

  formParams['to'] = to;

  formParams['body'] = body;

  formParams['method'] = opt_method;

  formParams['messagestatuscallback'] = opt_messagestatuscallback;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update Shortcode
 * Update a dedicated shortcode.
 * @param {!string} shortcode List of valid dedicated shortcode to your Ytel account.
 * @param {!string=} opt_friendlyName User generated name of the dedicated shortcode.
 * @param {!string=} opt_callbackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
 * @param {!string=} opt_callbackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
 * @param {!string=} opt_fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
 * @param {!string=} opt_fallbackUrl URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.dedicatedshortcodeUpdateshortcode = function(shortcode, opt_friendlyName, opt_callbackMethod, opt_callbackUrl, opt_fallbackMethod, opt_fallbackUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dedicatedshortcode/updateshortcode.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'shortcode' is set
  if (!shortcode) {
    throw new Error('Missing required parameter shortcode when calling dedicatedshortcodeUpdateshortcode');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Shortcode'] = shortcode;

  formParams['FriendlyName'] = opt_friendlyName;

  formParams['CallbackMethod'] = opt_callbackMethod;

  formParams['CallbackUrl'] = opt_callbackUrl;

  formParams['FallbackMethod'] = opt_fallbackMethod;

  formParams['FallbackUrl'] = opt_fallbackUrl;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View SMS
 * Retrieve a single Short Code object by its shortcode assignment.
 * @param {!string} shortcode List of valid Dedicated Short Code to your Ytel account
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.dedicatedshortcodeViewshortcode = function(shortcode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dedicatedshortcode/viewshortcode.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'shortcode' is set
  if (!shortcode) {
    throw new Error('Missing required parameter shortcode when calling dedicatedshortcodeViewshortcode');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Shortcode'] = shortcode;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List SMS
 * Retrieve a list of Short Code messages.
 * @param {!string=} opt_shortcode Only list messages sent from this Short Code
 * @param {!string=} opt_to Only list messages sent to this number
 * @param {!string=} opt_dateSent Only list messages sent with the specified date
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pageSize The count of objects to return per page.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.shortcodeListsms = function(opt_shortcode, opt_to, opt_dateSent, opt_page, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/shortcode/listsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Shortcode'] = opt_shortcode;

  formParams['To'] = opt_to;

  formParams['DateSent'] = opt_dateSent;

  formParams['Page'] = opt_page;

  formParams['PageSize'] = opt_pageSize;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View SMS
 * View a single Sms Short Code message.
 * @param {!string} messageSid The unique identifier for the sms resource
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ShortCodeApi.prototype.shortcodeViewsms = function(messageSid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/shortcode/viewsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'messageSid' is set
  if (!messageSid) {
    throw new Error('Missing required parameter messageSid when calling shortcodeViewsms');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['MessageSid'] = messageSid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
