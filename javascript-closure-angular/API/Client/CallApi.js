/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CallApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.12
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.CallApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CallApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CallApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CallApiBasePath')) :
                   'https://api.ytel.com/api/v3';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CallApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CallApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CallApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Group Call
 * Group Call
 * @param {!string} from This number to display on Caller ID as calling
 * @param {!string} to Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
 * @param {!string} url URL requested once the call connects
 * @param {!string} groupConfirmKey Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
 * @param {!string} groupConfirmFile Specify the audio file you want to play when the called party picks up the call
 * @param {!string=} opt_method Specifies the HTTP method used to request the required URL once call connects.
 * @param {!string=} opt_statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
 * @param {!string=} opt_statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
 * @param {!string=} opt_fallBackUrl URL requested if the initial Url parameter fails or encounters an error
 * @param {!string=} opt_fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
 * @param {!string=} opt_heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
 * @param {!string=} opt_heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.
 * @param {!number=} opt_timeout Time (in seconds) we should wait while the call is ringing before canceling the call
 * @param {!string=} opt_playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
 * @param {!string=} opt_hideCallerId Specifies if the caller id will be hidden
 * @param {!boolean=} opt_record Specifies if the call should be recorded
 * @param {!string=} opt_recordCallBackUrl Recording parameters will be sent here upon completion
 * @param {!string=} opt_recordCallBackMethod Method used to request the RecordCallback URL.
 * @param {!boolean=} opt_transcribe Specifies if the call recording should be transcribed
 * @param {!string=} opt_transcribeCallBackUrl Transcription parameters will be sent here upon completion
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsGroupcall = function(from, to, url, groupConfirmKey, groupConfirmFile, opt_method, opt_statusCallBackUrl, opt_statusCallBackMethod, opt_fallBackUrl, opt_fallBackMethod, opt_heartBeatUrl, opt_heartBeatMethod, opt_timeout, opt_playDtmf, opt_hideCallerId, opt_record, opt_recordCallBackUrl, opt_recordCallBackMethod, opt_transcribe, opt_transcribeCallBackUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/groupcall.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling callsGroupcall');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling callsGroupcall');
  }
  // verify required parameter 'url' is set
  if (!url) {
    throw new Error('Missing required parameter url when calling callsGroupcall');
  }
  // verify required parameter 'groupConfirmKey' is set
  if (!groupConfirmKey) {
    throw new Error('Missing required parameter groupConfirmKey when calling callsGroupcall');
  }
  // verify required parameter 'groupConfirmFile' is set
  if (!groupConfirmFile) {
    throw new Error('Missing required parameter groupConfirmFile when calling callsGroupcall');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['From'] = from;

  formParams['To'] = to;

  formParams['Url'] = url;

  formParams['GroupConfirmKey'] = groupConfirmKey;

  formParams['GroupConfirmFile'] = groupConfirmFile;

  formParams['Method'] = opt_method;

  formParams['StatusCallBackUrl'] = opt_statusCallBackUrl;

  formParams['StatusCallBackMethod'] = opt_statusCallBackMethod;

  formParams['FallBackUrl'] = opt_fallBackUrl;

  formParams['FallBackMethod'] = opt_fallBackMethod;

  formParams['HeartBeatUrl'] = opt_heartBeatUrl;

  formParams['HeartBeatMethod'] = opt_heartBeatMethod;

  formParams['Timeout'] = opt_timeout;

  formParams['PlayDtmf'] = opt_playDtmf;

  formParams['HideCallerId'] = opt_hideCallerId;

  formParams['Record'] = opt_record;

  formParams['RecordCallBackUrl'] = opt_recordCallBackUrl;

  formParams['RecordCallBackMethod'] = opt_recordCallBackMethod;

  formParams['Transcribe'] = opt_transcribe;

  formParams['TranscribeCallBackUrl'] = opt_transcribeCallBackUrl;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Interrupt Call
 * Interrupt the Call by Call Sid
 * @param {!string} callSid The unique identifier for voice call that is in progress.
 * @param {!string=} opt_url URL the in-progress call will be redirected to
 * @param {!string=} opt_method The method used to request the above Url parameter
 * @param {!string=} opt_status Status to set the in-progress call to
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsInterruptcalls = function(callSid, opt_url, opt_method, opt_status, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/interruptcalls.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsInterruptcalls');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['CallSid'] = callSid;

  formParams['Url'] = opt_url;

  formParams['Method'] = opt_method;

  formParams['Status'] = opt_status;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Calls
 * A list of calls associated with your Ytel account
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pageSize Number of individual resources listed in the response per page
 * @param {!string=} opt_to Filter calls that were sent to this 10-digit number (E.164 format).
 * @param {!string=} opt_from Filter calls that were sent from this 10-digit number (E.164 format).
 * @param {!string=} opt_dateCreated Return calls that are from a specified date.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsListcalls = function(opt_page, opt_pageSize, opt_to, opt_from, opt_dateCreated, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/listcalls.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Page'] = opt_page;

  formParams['PageSize'] = opt_pageSize;

  formParams['To'] = opt_to;

  formParams['From'] = opt_from;

  formParams['DateCreated'] = opt_dateCreated;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Make Call
 * You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
 * @param {!string} from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
 * @param {!string} to To number
 * @param {!string} url URL requested once the call connects
 * @param {!string=} opt_method Specifies the HTTP method used to request the required URL once call connects.
 * @param {!string=} opt_statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
 * @param {!string=} opt_statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
 * @param {!string=} opt_fallBackUrl URL requested if the initial Url parameter fails or encounters an error
 * @param {!string=} opt_fallBackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects.
 * @param {!string=} opt_heartBeatUrl URL that can be requested every 60 seconds during the call to notify of elapsed tim
 * @param {!string=} opt_heartBeatMethod Specifies the HTTP method used to request HeartbeatUrl.
 * @param {!number=} opt_timeout Time (in seconds) Ytel should wait while the call is ringing before canceling the call
 * @param {!string=} opt_playDtmf DTMF Digits to play to the call once it connects. 0-9, #, or *
 * @param {!boolean=} opt_hideCallerId Specifies if the caller id will be hidden
 * @param {!boolean=} opt_record Specifies if the call should be recorded
 * @param {!string=} opt_recordCallBackUrl Recording parameters will be sent here upon completion
 * @param {!string=} opt_recordCallBackMethod Method used to request the RecordCallback URL.
 * @param {!boolean=} opt_transcribe Specifies if the call recording should be transcribed
 * @param {!string=} opt_transcribeCallBackUrl Transcription parameters will be sent here upon completion
 * @param {!string=} opt_ifMachine How Ytel should handle the receiving numbers voicemail machine
 * @param {!string=} opt_ifMachineUrl URL requested when IfMachine&#x3D;continue
 * @param {!string=} opt_ifMachineMethod Method used to request the IfMachineUrl.
 * @param {!boolean=} opt_feedback Specify if survey should be enable or not
 * @param {!string=} opt_surveyId The unique identifier for the survey.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsMakecall = function(from, to, url, opt_method, opt_statusCallBackUrl, opt_statusCallBackMethod, opt_fallBackUrl, opt_fallBackMethod, opt_heartBeatUrl, opt_heartBeatMethod, opt_timeout, opt_playDtmf, opt_hideCallerId, opt_record, opt_recordCallBackUrl, opt_recordCallBackMethod, opt_transcribe, opt_transcribeCallBackUrl, opt_ifMachine, opt_ifMachineUrl, opt_ifMachineMethod, opt_feedback, opt_surveyId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/makecall.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling callsMakecall');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling callsMakecall');
  }
  // verify required parameter 'url' is set
  if (!url) {
    throw new Error('Missing required parameter url when calling callsMakecall');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['From'] = from;

  formParams['To'] = to;

  formParams['Url'] = url;

  formParams['Method'] = opt_method;

  formParams['StatusCallBackUrl'] = opt_statusCallBackUrl;

  formParams['StatusCallBackMethod'] = opt_statusCallBackMethod;

  formParams['FallBackUrl'] = opt_fallBackUrl;

  formParams['FallBackMethod'] = opt_fallBackMethod;

  formParams['HeartBeatUrl'] = opt_heartBeatUrl;

  formParams['HeartBeatMethod'] = opt_heartBeatMethod;

  formParams['Timeout'] = opt_timeout;

  formParams['PlayDtmf'] = opt_playDtmf;

  formParams['HideCallerId'] = opt_hideCallerId;

  formParams['Record'] = opt_record;

  formParams['RecordCallBackUrl'] = opt_recordCallBackUrl;

  formParams['RecordCallBackMethod'] = opt_recordCallBackMethod;

  formParams['Transcribe'] = opt_transcribe;

  formParams['TranscribeCallBackUrl'] = opt_transcribeCallBackUrl;

  formParams['IfMachine'] = opt_ifMachine;

  formParams['IfMachineUrl'] = opt_ifMachineUrl;

  formParams['IfMachineMethod'] = opt_ifMachineMethod;

  formParams['Feedback'] = opt_feedback;

  formParams['SurveyId'] = opt_surveyId;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Send RVM
 * Initiate an outbound Ringless Voicemail through Ytel.
 * @param {!string} from A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
 * @param {!string} rVMCallerId A required secondary Caller ID for RVM to work.
 * @param {!string} to A valid number (E.164 format) that will receive the phone call.
 * @param {!string} voiceMailURL The URL requested once the RVM connects. A set of default parameters will be sent here.
 * @param {!string=} opt_method Specifies the HTTP method used to request the required URL once call connects.
 * @param {!string=} opt_statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
 * @param {!string=} opt_statsCallBackMethod Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsMakervm = function(from, rVMCallerId, to, voiceMailURL, opt_method, opt_statusCallBackUrl, opt_statsCallBackMethod, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/makervm.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling callsMakervm');
  }
  // verify required parameter 'rVMCallerId' is set
  if (!rVMCallerId) {
    throw new Error('Missing required parameter rVMCallerId when calling callsMakervm');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling callsMakervm');
  }
  // verify required parameter 'voiceMailURL' is set
  if (!voiceMailURL) {
    throw new Error('Missing required parameter voiceMailURL when calling callsMakervm');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['From'] = from;

  formParams['RVMCallerId'] = rVMCallerId;

  formParams['To'] = to;

  formParams['VoiceMailURL'] = voiceMailURL;

  formParams['Method'] = opt_method;

  formParams['StatusCallBackUrl'] = opt_statusCallBackUrl;

  formParams['StatsCallBackMethod'] = opt_statsCallBackMethod;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Play Audio
 * Play Audio from a url
 * @param {!string} callSid The unique identifier of each call resource
 * @param {!string} audioUrl URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
 * @param {!string} sayText Valid alphanumeric string that should be played to the In-progress call.
 * @param {!number=} opt_length Time limit in seconds for audio play back
 * @param {!string=} opt_direction The leg of the call audio will be played to
 * @param {!boolean=} opt_mix If false, all other audio will be muted
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsPlayaudios = function(callSid, audioUrl, sayText, opt_length, opt_direction, opt_mix, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/playaudios.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsPlayaudios');
  }
  // verify required parameter 'audioUrl' is set
  if (!audioUrl) {
    throw new Error('Missing required parameter audioUrl when calling callsPlayaudios');
  }
  // verify required parameter 'sayText' is set
  if (!sayText) {
    throw new Error('Missing required parameter sayText when calling callsPlayaudios');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['CallSid'] = callSid;

  formParams['AudioUrl'] = audioUrl;

  formParams['SayText'] = sayText;

  formParams['Length'] = opt_length;

  formParams['Direction'] = opt_direction;

  formParams['Mix'] = opt_mix;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Record Call
 * Start or stop recording of an in-progress voice call.
 * @param {!string} callSid The unique identifier of each call resource
 * @param {!boolean} record Set true to initiate recording or false to terminate recording
 * @param {!string=} opt_direction The leg of the call to record
 * @param {!number=} opt_timeLimit Time in seconds the recording duration should not exceed
 * @param {!string=} opt_callBackUrl URL consulted after the recording completes
 * @param {!string=} opt_fileformat Format of the recording file. Can be .mp3 or .wav
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsRecordcalls = function(callSid, record, opt_direction, opt_timeLimit, opt_callBackUrl, opt_fileformat, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/recordcalls.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsRecordcalls');
  }
  // verify required parameter 'record' is set
  if (!record) {
    throw new Error('Missing required parameter record when calling callsRecordcalls');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['CallSid'] = callSid;

  formParams['Record'] = record;

  formParams['Direction'] = opt_direction;

  formParams['TimeLimit'] = opt_timeLimit;

  formParams['CallBackUrl'] = opt_callBackUrl;

  formParams['Fileformat'] = opt_fileformat;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Play DTMF
 * Play Dtmf and send the Digit
 * @param {!string} callSid The unique identifier of each call resource
 * @param {!string} playDtmf DTMF digits to play to the call. 0-9, #, *, W, or w
 * @param {!string=} opt_playDtmfDirection The leg of the call DTMF digits should be sent to
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsSenddigits = function(callSid, playDtmf, opt_playDtmfDirection, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/senddigits.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsSenddigits');
  }
  // verify required parameter 'playDtmf' is set
  if (!playDtmf) {
    throw new Error('Missing required parameter playDtmf when calling callsSenddigits');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['CallSid'] = callSid;

  formParams['PlayDtmf'] = playDtmf;

  formParams['PlayDtmfDirection'] = opt_playDtmfDirection;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Call
 * Retrieve a single voice call’s information by its CallSid.
 * @param {!string} callSid The unique identifier for the voice call.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsViewcalldetail = function(callSid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/viewcalldetail.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsViewcalldetail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['callSid'] = callSid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Call
 * Retrieve a single voice call’s information by its CallSid.
 * @param {!string} callsid The unique identifier for the voice call.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsViewcalls = function(callsid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/viewcalls.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callsid' is set
  if (!callsid) {
    throw new Error('Missing required parameter callsid when calling callsViewcalls');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['callsid'] = callsid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Voice Effect
 * Add audio voice effects to the an in-progress voice call.
 * @param {!string} callSid The unique identifier for the in-progress voice call.
 * @param {!string=} opt_audioDirection The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
 * @param {!number=} opt_pitchSemiTones Set the pitch in semitone (half-step) intervals. Value between -14 and 14
 * @param {!number=} opt_pitchOctaves Set the pitch in octave intervals.. Value between -1 and 1
 * @param {!number=} opt_pitch Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
 * @param {!number=} opt_rate Set the rate for audio. The lower the value, the lower the rate. value greater than 0
 * @param {!number=} opt_tempo Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CallApi.prototype.callsVoiceeffect = function(callSid, opt_audioDirection, opt_pitchSemiTones, opt_pitchOctaves, opt_pitch, opt_rate, opt_tempo, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/voiceeffect.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'callSid' is set
  if (!callSid) {
    throw new Error('Missing required parameter callSid when calling callsVoiceeffect');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['CallSid'] = callSid;

  formParams['AudioDirection'] = opt_audioDirection;

  formParams['PitchSemiTones'] = opt_pitchSemiTones;

  formParams['PitchOctaves'] = opt_pitchOctaves;

  formParams['Pitch'] = opt_pitch;

  formParams['Rate'] = opt_rate;

  formParams['Tempo'] = opt_tempo;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
