/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.LetterApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.11
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.LetterApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.LetterApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('LetterApiBasePath') ?
                   /** @type {!string} */ ($injector.get('LetterApiBasePath')) :
                   'https://api.message360.com/api/v3/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('LetterApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('LetterApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.LetterApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create Letter
 * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
 * @param {!string} to The AddressId or an object structured when creating an address by addresses/Create.
 * @param {!string} from The AddressId or an object structured when creating an address by addresses/Create.
 * @param {!string} attachbyid Set an existing letter by attaching its LetterId.
 * @param {!string} file File can be a 8.5\&quot;x11\&quot; PDF uploaded file or URL that links to a file.
 * @param {!string} color Specify if letter should be printed in color.
 * @param {!string=} opt_description A description for the letter.
 * @param {!string=} opt_extraservice Add an extra service to your letter. Options are \&quot;certified\&quot; or \&quot;registered\&quot;. Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
 * @param {!string=} opt_doublesided Specify if letter should be printed on both sides.
 * @param {!string=} opt_template Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
 * @param {!string=} opt_htmldata A string value that contains HTML markup.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.LetterApi.prototype.letterCreate = function(to, from, attachbyid, file, color, opt_description, opt_extraservice, opt_doublesided, opt_template, opt_htmldata, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/letter/create.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling letterCreate');
  }
  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling letterCreate');
  }
  // verify required parameter 'attachbyid' is set
  if (!attachbyid) {
    throw new Error('Missing required parameter attachbyid when calling letterCreate');
  }
  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling letterCreate');
  }
  // verify required parameter 'color' is set
  if (!color) {
    throw new Error('Missing required parameter color when calling letterCreate');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['to'] = to;

  formParams['from'] = from;

  formParams['attachbyid'] = attachbyid;

  formParams['file'] = file;

  formParams['color'] = color;

  formParams['description'] = opt_description;

  formParams['extraservice'] = opt_extraservice;

  formParams['doublesided'] = opt_doublesided;

  formParams['template'] = opt_template;

  formParams['htmldata'] = opt_htmldata;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete Letter
 * Remove a letter object by its LetterId.
 * @param {!string} lettersid The unique identifier for a letter object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.LetterApi.prototype.letterDelete = function(lettersid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/letter/delete.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'lettersid' is set
  if (!lettersid) {
    throw new Error('Missing required parameter lettersid when calling letterDelete');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['lettersid'] = lettersid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Letters
 * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pagesize The count of objects to return per page.
 * @param {!string=} opt_lettersid The unique identifier for a letter object.
 * @param {!string=} opt_dateCreated The date the letter was created.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.LetterApi.prototype.letterListsletter = function(opt_page, opt_pagesize, opt_lettersid, opt_dateCreated, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/letter/listsletter.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['page'] = opt_page;

  formParams['pagesize'] = opt_pagesize;

  formParams['lettersid'] = opt_lettersid;

  formParams['dateCreated'] = opt_dateCreated;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View Letter
 * Retrieve a letter object by its LetterSid.
 * @param {!string} lettersid The unique identifier for a letter object.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.LetterApi.prototype.letterViewletter = function(lettersid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/letter/viewletter.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'lettersid' is set
  if (!lettersid) {
    throw new Error('Missing required parameter lettersid when calling letterViewletter');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['lettersid'] = lettersid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
