/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SMSApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Ytel API version 3
 * Version: 3.12
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SMSApi');


/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SMSApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SMSApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SMSApiBasePath')) :
                   'https://api.ytel.com/api/v3';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SMSApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SMSApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SMSApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * List Inbound SMS
 * Retrieve a list of Inbound SMS message objects.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pageSize The count of objects to return per page.
 * @param {!string=} opt_from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
 * @param {!string=} opt_to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
 * @param {!string=} opt_dateSent Filter sms message objects by this date.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SMSApi.prototype.smsGetinboundsms = function(opt_page, opt_pageSize, opt_from, opt_to, opt_dateSent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sms/getinboundsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Page'] = opt_page;

  formParams['PageSize'] = opt_pageSize;

  formParams['From'] = opt_from;

  formParams['To'] = opt_to;

  formParams['DateSent'] = opt_dateSent;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List SMS
 * Retrieve a list of Outbound SMS message objects.
 * @param {!number=} opt_page The page count to retrieve from the total results in the collection. Page indexing starts at 1.
 * @param {!number=} opt_pageSize Number of individual resources listed in the response per page
 * @param {!string=} opt_from Filter SMS message objects from this valid 10-digit phone number (E.164 format).
 * @param {!string=} opt_to Filter SMS message objects to this valid 10-digit phone number (E.164 format).
 * @param {!string=} opt_dateSent Only list SMS messages sent in the specified date range
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SMSApi.prototype.smsListsms = function(opt_page, opt_pageSize, opt_from, opt_to, opt_dateSent, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sms/listsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Page'] = opt_page;

  formParams['PageSize'] = opt_pageSize;

  formParams['From'] = opt_from;

  formParams['To'] = opt_to;

  formParams['DateSent'] = opt_dateSent;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Send SMS
 * Send an SMS from a Ytel number
 * @param {!string} from The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
 * @param {!string} to The 10-digit phone number (E.164 format) that will receive the message.
 * @param {!string} body The body message that is to be sent in the text.
 * @param {!string=} opt_method Specifies the HTTP method used to request the required URL once SMS sent.
 * @param {!string=} opt_messageStatusCallback URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.
 * @param {!boolean=} opt_smartsms Check&#39;s &#39;to&#39; number can receive sms or not using Carrier API, if wireless &#x3D; true then text sms is sent, else wireless &#x3D; false then call is recieved to end user with audible message.
 * @param {!boolean=} opt_deliveryStatus Delivery reports are a method to tell your system if the message has arrived on the destination phone.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SMSApi.prototype.smsSendsms = function(from, to, body, opt_method, opt_messageStatusCallback, opt_smartsms, opt_deliveryStatus, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sms/sendsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling smsSendsms');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling smsSendsms');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling smsSendsms');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['From'] = from;

  formParams['To'] = to;

  formParams['Body'] = body;

  formParams['Method'] = opt_method;

  formParams['MessageStatusCallback'] = opt_messageStatusCallback;

  formParams['Smartsms'] = opt_smartsms;

  formParams['DeliveryStatus'] = opt_deliveryStatus;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View SMS
 * Retrieve a single SMS message object with details by its SmsSid.
 * @param {!string} messageSid The unique identifier for a sms message.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SMSApi.prototype.smsViewdetailsms = function(messageSid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sms/viewdetailsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'messageSid' is set
  if (!messageSid) {
    throw new Error('Missing required parameter messageSid when calling smsViewdetailsms');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['MessageSid'] = messageSid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * View SMS
 * Retrieve a single SMS message object by its SmsSid.
 * @param {!string} messageSid The unique identifier for a sms message.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.SMSApi.prototype.smsViewsms = function(messageSid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/sms/viewsms.json';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'messageSid' is set
  if (!messageSid) {
    throw new Error('Missing required parameter messageSid when calling smsViewsms');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['MessageSid'] = messageSid;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
