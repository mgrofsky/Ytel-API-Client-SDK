#import <Foundation/Foundation.h>
#import "SWGApi.h"

/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGPostCardApi: NSObject <SWGApi>

extern NSString* kSWGPostCardApiErrorDomain;
extern NSInteger kSWGPostCardApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create Postcard
/// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
///
/// @param to The AddressId or an object structured when creating an address by addresses/Create.
/// @param from The AddressId or an object structured when creating an address by addresses/Create.
/// @param attachbyid Set an existing postcard by attaching its PostcardId.
/// @param front A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.
/// @param back A 4.25\&quot;x6.25\&quot; or 6.25\&quot;x11.25\&quot; image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.
/// @param message The message for the back of the postcard with a maximum of 350 characters.
/// @param setting Code for the dimensions of the media to be printed.
/// @param _description A description for the postcard. (optional)
/// @param htmldata A string value that contains HTML markup. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) postcardCreatepostcardWithTo: (NSString*) to
    from: (NSString*) from
    attachbyid: (NSString*) attachbyid
    front: (NSString*) front
    back: (NSString*) back
    message: (NSString*) message
    setting: (NSString*) setting
    _description: (NSString*) _description
    htmldata: (NSString*) htmldata
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Delete Postcard
/// Remove a postcard object.
///
/// @param postcardid The unique identifier of a postcard object.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) postcardDeletepostcardWithPostcardid: (NSString*) postcardid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List Postcards
/// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
///
/// @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional) (default to 1)
/// @param pagesize The count of objects to return per page. (optional) (default to 10)
/// @param postcardid The unique identifier for a postcard object. (optional)
/// @param dateCreated The date the postcard was created. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) postcardListpostcardWithPage: (NSNumber*) page
    pagesize: (NSNumber*) pagesize
    postcardid: (NSString*) postcardid
    dateCreated: (NSString*) dateCreated
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// View Postcard
/// Retrieve a postcard object by its PostcardId.
///
/// @param postcardid The unique identifier for a postcard object.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) postcardViewpostcardWithPostcardid: (NSString*) postcardid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
