#import <Foundation/Foundation.h>
#import "SWGApi.h"

/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.11
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGEmailApi: NSObject <SWGApi>

extern NSString* kSWGEmailApiErrorDomain;
extern NSInteger kSWGEmailApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add Email Unsubscribe
/// Add an email to the unsubscribe list
///
/// @param email A valid email address that is to be added to the unsubscribe list
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailAddunsubscribesemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Remove Blocked Address
/// Remove an email from blocked emails list.
///
/// @param email The email address to be remove from the blocked list.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailDeleteblocksemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Remove Bounced Email
/// Remove an email address from the bounced list.
///
/// @param email The email address to be remove from the bounced email list.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailDeletebouncesemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Remove Invalid Email
/// Remove an email from the invalid email list.
///
/// @param email A valid email address that is to be remove from the invalid email list.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailDeleteinvalidemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Remove Spam Address
/// Remove an email from the spam email list.
///
/// @param email A valid email address that is to be remove from the spam list.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailDeletespamemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Remove Unsubscribed Email
/// Remove an email address from the list of unsubscribed emails.
///
/// @param email A valid email address that is to be remove from the unsubscribe list.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailDeleteunsubscribedemailWithEmail: (NSString*) email
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Blocked Emails
/// Retrieve a list of emails that have been blocked.
///
/// @param offset The starting point of the list of blocked emails that should be returned. (optional)
/// @param limit The count of results that should be returned. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailListblockemailWithOffset: (NSString*) offset
    limit: (NSString*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Bounced Emails
/// Retrieve a list of emails that have bounced.
///
/// @param offset The starting point of the list of bounced emails that should be returned. (optional)
/// @param limit The count of results that should be returned. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailListbounceemailWithOffset: (NSString*) offset
    limit: (NSString*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Invalid Emails
/// Retrieve a list of invalid email addresses.
///
/// @param offset The starting point of the list of invalid emails that should be returned. (optional)
/// @param limit The count of results that should be returned. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailListinvalidemailWithOffset: (NSString*) offset
    limit: (NSString*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Spam Emails
/// Retrieve a list of emails that are on the spam list.
///
/// @param offset The starting point of the list of spam emails that should be returned. (optional)
/// @param limit The count of results that should be returned. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailListspamemailWithOffset: (NSString*) offset
    limit: (NSString*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List Unsubscribed Emails
/// Retrieve a list of email addresses from the unsubscribe list.
///
/// @param offset The starting point of the list of unsubscribed emails that should be returned. (optional)
/// @param limit The count of results that should be returned. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailListunsubscribedemailWithOffset: (NSString*) offset
    limit: (NSString*) limit
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Send Email
/// Create and submit an email message to one or more email addresses.
///
/// @param to A valid address that will receive the email. Multiple addresses can be separated by using commas.
/// @param type Specifies the type of email to be sent
/// @param subject The subject of the mail. Must be a valid string.
/// @param message The email message that is to be sent in the text.
/// @param from A valid address that will send the email. (optional)
/// @param cc Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)
/// @param bcc Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas. (optional)
/// @param attachment A file that is attached to the email. Must be less than 7 MB in size. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) emailSendemailsWithTo: (NSString*) to
    type: (NSString*) type
    subject: (NSString*) subject
    message: (NSString*) message
    from: (NSString*) from
    cc: (NSString*) cc
    bcc: (NSString*) bcc
    attachment: (NSString*) attachment
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
