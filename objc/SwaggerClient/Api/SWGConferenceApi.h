#import <Foundation/Foundation.h>
#import "SWGApi.h"

/**
* Ytel API V3
* Ytel API version 3
*
* OpenAPI spec version: 3.11
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGConferenceApi: NSObject <SWGApi>

extern NSString* kSWGConferenceApiErrorDomain;
extern NSInteger kSWGConferenceApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add Participant
/// Add Participant in conference 
///
/// @param conferenceSid The unique identifier for a conference object.
/// @param participantNumber The phone number of the participant to be added.
/// @param muted Specifies if participant should be muted. (optional)
/// @param deaf Specifies if the participant should hear audio in the conference. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesAddParticipantWithConferenceSid: (NSString*) conferenceSid
    participantNumber: (NSString*) participantNumber
    muted: (NSNumber*) muted
    deaf: (NSNumber*) deaf
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Create Conference
/// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
///
/// @param from A valid 10-digit number (E.164 format) that will be initiating the conference call.
/// @param to A valid 10-digit number (E.164 format) that is to receive the conference call.
/// @param url URL requested once the conference connects
/// @param method Specifies the HTTP method used to request the required URL once call connects. (optional) (default to POST)
/// @param statusCallBackUrl URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished. (optional)
/// @param statusCallBackMethod Specifies the HTTP methodlinkclass used to request StatusCallbackUrl. (optional)
/// @param fallbackUrl URL requested if the initial Url parameter fails or encounters an error (optional)
/// @param fallbackMethod Specifies the HTTP method used to request the required FallbackUrl once call connects. (optional)
/// @param record Specifies if the conference should be recorded. (optional)
/// @param recordCallBackUrl Recording parameters will be sent here upon completion. (optional)
/// @param recordCallBackMethod Specifies the HTTP method used to request the required URL once conference connects. (optional)
/// @param scheduleTime Schedule conference in future. Schedule time must be greater than current time (optional)
/// @param timeout The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesCreateConferenceWithFrom: (NSString*) from
    to: (NSString*) to
    url: (NSString*) url
    method: (NSString*) method
    statusCallBackUrl: (NSString*) statusCallBackUrl
    statusCallBackMethod: (NSString*) statusCallBackMethod
    fallbackUrl: (NSString*) fallbackUrl
    fallbackMethod: (NSString*) fallbackMethod
    record: (NSNumber*) record
    recordCallBackUrl: (NSString*) recordCallBackUrl
    recordCallBackMethod: (NSString*) recordCallBackMethod
    scheduleTime: (NSString*) scheduleTime
    timeout: (NSNumber*) timeout
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Silence Participant
/// Deaf Mute Participant
///
/// @param conferenceSid ID of the active conference
/// @param participantSid ID of an active participant
/// @param muted Mute a participant (optional)
/// @param deaf Make it so a participant cant hear (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesDeafMuteParticipantWithConferenceSid: (NSString*) conferenceSid
    participantSid: (NSString*) participantSid
    muted: (NSNumber*) muted
    deaf: (NSNumber*) deaf
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Hangup Participant
/// Remove a participant from a conference.
///
/// @param conferenceSid The unique identifier for a conference object.
/// @param participantSid The unique identifier for a participant object.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesHangupParticipantWithConferenceSid: (NSString*) conferenceSid
    participantSid: (NSString*) participantSid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List Participants
/// Retrieve a list of participants for an in-progress conference.
///
/// @param conferenceSid The unique identifier for a conference.
/// @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional) (default to 1)
/// @param pagesize The count of objects to return per page. (optional) (default to 10)
/// @param muted Specifies if participant should be muted. (optional)
/// @param deaf Specifies if the participant should hear audio in the conference. (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesListParticipantWithConferenceSid: (NSString*) conferenceSid
    page: (NSNumber*) page
    pagesize: (NSNumber*) pagesize
    muted: (NSNumber*) muted
    deaf: (NSNumber*) deaf
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List Conferences
/// Retrieve a list of conference objects.
///
/// @param page The page count to retrieve from the total results in the collection. Page indexing starts at 1. (optional) (default to 1)
/// @param pagesize Number of individual resources listed in the response per page (optional) (default to 10)
/// @param friendlyName Only return conferences with the specified FriendlyName (optional)
/// @param dateCreated Conference created date (optional)
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesListconferenceWithPage: (NSNumber*) page
    pagesize: (NSNumber*) pagesize
    friendlyName: (NSString*) friendlyName
    dateCreated: (NSString*) dateCreated
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Play Audio
/// Play an audio file during a conference.
///
/// @param conferenceSid The unique identifier for a conference object.
/// @param participantSid The unique identifier for a participant object.
/// @param audioUrl The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesPlayAudioWithConferenceSid: (NSString*) conferenceSid
    participantSid: (NSString*) participantSid
    audioUrl: (NSString*) audioUrl
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// View Participant
/// Retrieve information about a participant by its ParticipantSid.
///
/// @param conferenceSid The unique identifier for a conference object.
/// @param participantSid The unique identifier for a participant object.
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesViewParticipantWithConferenceSid: (NSString*) conferenceSid
    participantSid: (NSString*) participantSid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// View Conference
/// Retrieve information about a conference by its ConferenceSid.
///
/// @param conferenceSid The unique identifier of each conference resource
/// 
///  code:200 message:""
///
/// @return NSString*
-(NSURLSessionTask*) conferencesViewconferenceWithConferenceSid: (NSString*) conferenceSid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
