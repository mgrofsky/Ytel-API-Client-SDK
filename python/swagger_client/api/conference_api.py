# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConferenceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def conferences_add_participant(self, conference_sid, participant_number, **kwargs):  # noqa: E501
        """Add Participant  # noqa: E501

        Add Participant in conference   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_add_participant(conference_sid, participant_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_number: The phone number of the participant to be added. (required)
        :param bool muted: Specifies if participant should be muted.
        :param bool deaf: Specifies if the participant should hear audio in the conference.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_add_participant_with_http_info(conference_sid, participant_number, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_add_participant_with_http_info(conference_sid, participant_number, **kwargs)  # noqa: E501
            return data

    def conferences_add_participant_with_http_info(self, conference_sid, participant_number, **kwargs):  # noqa: E501
        """Add Participant  # noqa: E501

        Add Participant in conference   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_add_participant_with_http_info(conference_sid, participant_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_number: The phone number of the participant to be added. (required)
        :param bool muted: Specifies if participant should be muted.
        :param bool deaf: Specifies if the participant should hear audio in the conference.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'participant_number', 'muted', 'deaf']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_add_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_add_participant`")  # noqa: E501
        # verify the required parameter 'participant_number' is set
        if ('participant_number' not in params or
                params['participant_number'] is None):
            raise ValueError("Missing the required parameter `participant_number` when calling `conferences_add_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501
        if 'participant_number' in params:
            form_params.append(('ParticipantNumber', params['participant_number']))  # noqa: E501
        if 'muted' in params:
            form_params.append(('Muted', params['muted']))  # noqa: E501
        if 'deaf' in params:
            form_params.append(('Deaf', params['deaf']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/addParticipant.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_create_conference(self, _from, to, url, **kwargs):  # noqa: E501
        """Create Conference  # noqa: E501

        Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_create_conference(_from, to, url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid 10-digit number (E.164 format) that will be initiating the conference call. (required)
        :param str to: A valid 10-digit number (E.164 format) that is to receive the conference call. (required)
        :param str url: URL requested once the conference connects (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fallback_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fallback_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param bool record: Specifies if the conference should be recorded.
        :param str record_call_back_url: Recording parameters will be sent here upon completion.
        :param str record_call_back_method: Specifies the HTTP method used to request the required URL once conference connects.
        :param str schedule_time: Schedule conference in future. Schedule time must be greater than current time
        :param int timeout: The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_create_conference_with_http_info(_from, to, url, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_create_conference_with_http_info(_from, to, url, **kwargs)  # noqa: E501
            return data

    def conferences_create_conference_with_http_info(self, _from, to, url, **kwargs):  # noqa: E501
        """Create Conference  # noqa: E501

        Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_create_conference_with_http_info(_from, to, url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid 10-digit number (E.164 format) that will be initiating the conference call. (required)
        :param str to: A valid 10-digit number (E.164 format) that is to receive the conference call. (required)
        :param str url: URL requested once the conference connects (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fallback_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fallback_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param bool record: Specifies if the conference should be recorded.
        :param str record_call_back_url: Recording parameters will be sent here upon completion.
        :param str record_call_back_method: Specifies the HTTP method used to request the required URL once conference connects.
        :param str schedule_time: Schedule conference in future. Schedule time must be greater than current time
        :param int timeout: The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'url', 'method', 'status_call_back_url', 'status_call_back_method', 'fallback_url', 'fallback_method', 'record', 'record_call_back_url', 'record_call_back_method', 'schedule_time', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_create_conference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `conferences_create_conference`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `conferences_create_conference`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `conferences_create_conference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in params:
            query_params.append(('Url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if 'method' in params:
            form_params.append(('Method', params['method']))  # noqa: E501
        if 'status_call_back_url' in params:
            form_params.append(('StatusCallBackUrl', params['status_call_back_url']))  # noqa: E501
        if 'status_call_back_method' in params:
            form_params.append(('StatusCallBackMethod', params['status_call_back_method']))  # noqa: E501
        if 'fallback_url' in params:
            form_params.append(('FallbackUrl', params['fallback_url']))  # noqa: E501
        if 'fallback_method' in params:
            form_params.append(('FallbackMethod', params['fallback_method']))  # noqa: E501
        if 'record' in params:
            form_params.append(('Record', params['record']))  # noqa: E501
        if 'record_call_back_url' in params:
            form_params.append(('RecordCallBackUrl', params['record_call_back_url']))  # noqa: E501
        if 'record_call_back_method' in params:
            form_params.append(('RecordCallBackMethod', params['record_call_back_method']))  # noqa: E501
        if 'schedule_time' in params:
            form_params.append(('ScheduleTime', params['schedule_time']))  # noqa: E501
        if 'timeout' in params:
            form_params.append(('Timeout', params['timeout']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/createConference.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_deaf_mute_participant(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """Silence Participant  # noqa: E501

        Deaf Mute Participant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_deaf_mute_participant(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: ID of the active conference (required)
        :param str participant_sid: ID of an active participant (required)
        :param bool muted: Mute a participant
        :param bool deaf: Make it so a participant cant hear
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_deaf_mute_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_deaf_mute_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
            return data

    def conferences_deaf_mute_participant_with_http_info(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """Silence Participant  # noqa: E501

        Deaf Mute Participant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_deaf_mute_participant_with_http_info(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: ID of the active conference (required)
        :param str participant_sid: ID of an active participant (required)
        :param bool muted: Mute a participant
        :param bool deaf: Make it so a participant cant hear
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'participant_sid', 'muted', 'deaf']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_deaf_mute_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_deaf_mute_participant`")  # noqa: E501
        # verify the required parameter 'participant_sid' is set
        if ('participant_sid' not in params or
                params['participant_sid'] is None):
            raise ValueError("Missing the required parameter `participant_sid` when calling `conferences_deaf_mute_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('conferenceSid', params['conference_sid']))  # noqa: E501
        if 'participant_sid' in params:
            form_params.append(('ParticipantSid', params['participant_sid']))  # noqa: E501
        if 'muted' in params:
            form_params.append(('Muted', params['muted']))  # noqa: E501
        if 'deaf' in params:
            form_params.append(('Deaf', params['deaf']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/deafMuteParticipant.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_hangup_participant(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """Hangup Participant  # noqa: E501

        Remove a participant from a conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_hangup_participant(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_hangup_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_hangup_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
            return data

    def conferences_hangup_participant_with_http_info(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """Hangup Participant  # noqa: E501

        Remove a participant from a conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_hangup_participant_with_http_info(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'participant_sid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_hangup_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_hangup_participant`")  # noqa: E501
        # verify the required parameter 'participant_sid' is set
        if ('participant_sid' not in params or
                params['participant_sid'] is None):
            raise ValueError("Missing the required parameter `participant_sid` when calling `conferences_hangup_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'participant_sid' in params:
            query_params.append(('ParticipantSid', params['participant_sid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/hangupParticipant.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_list_participant(self, conference_sid, **kwargs):  # noqa: E501
        """List Participants  # noqa: E501

        Retrieve a list of participants for an in-progress conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_list_participant(conference_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference. (required)
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param bool muted: Specifies if participant should be muted.
        :param bool deaf: Specifies if the participant should hear audio in the conference.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_list_participant_with_http_info(conference_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_list_participant_with_http_info(conference_sid, **kwargs)  # noqa: E501
            return data

    def conferences_list_participant_with_http_info(self, conference_sid, **kwargs):  # noqa: E501
        """List Participants  # noqa: E501

        Retrieve a list of participants for an in-progress conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_list_participant_with_http_info(conference_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference. (required)
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param bool muted: Specifies if participant should be muted.
        :param bool deaf: Specifies if the participant should hear audio in the conference.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'page', 'pagesize', 'muted', 'deaf']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_list_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_list_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501
        if 'page' in params:
            form_params.append(('Page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('Pagesize', params['pagesize']))  # noqa: E501
        if 'muted' in params:
            form_params.append(('Muted', params['muted']))  # noqa: E501
        if 'deaf' in params:
            form_params.append(('Deaf', params['deaf']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/listParticipant.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_listconference(self, **kwargs):  # noqa: E501
        """List Conferences  # noqa: E501

        Retrieve a list of conference objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_listconference(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: Number of individual resources listed in the response per page
        :param str friendly_name: Only return conferences with the specified FriendlyName
        :param str date_created: Conference created date
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_listconference_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.conferences_listconference_with_http_info(**kwargs)  # noqa: E501
            return data

    def conferences_listconference_with_http_info(self, **kwargs):  # noqa: E501
        """List Conferences  # noqa: E501

        Retrieve a list of conference objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_listconference_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: Number of individual resources listed in the response per page
        :param str friendly_name: Only return conferences with the specified FriendlyName
        :param str date_created: Conference created date
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'pagesize', 'friendly_name', 'date_created']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_listconference" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'friendly_name' in params:
            form_params.append(('FriendlyName', params['friendly_name']))  # noqa: E501
        if 'date_created' in params:
            form_params.append(('DateCreated', params['date_created']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/listconference.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_play_audio(self, conference_sid, participant_sid, audio_url, **kwargs):  # noqa: E501
        """Play Audio  # noqa: E501

        Play an audio file during a conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_play_audio(conference_sid, participant_sid, audio_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :param str audio_url: The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_play_audio_with_http_info(conference_sid, participant_sid, audio_url, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_play_audio_with_http_info(conference_sid, participant_sid, audio_url, **kwargs)  # noqa: E501
            return data

    def conferences_play_audio_with_http_info(self, conference_sid, participant_sid, audio_url, **kwargs):  # noqa: E501
        """Play Audio  # noqa: E501

        Play an audio file during a conference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_play_audio_with_http_info(conference_sid, participant_sid, audio_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :param str audio_url: The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'participant_sid', 'audio_url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_play_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_play_audio`")  # noqa: E501
        # verify the required parameter 'participant_sid' is set
        if ('participant_sid' not in params or
                params['participant_sid'] is None):
            raise ValueError("Missing the required parameter `participant_sid` when calling `conferences_play_audio`")  # noqa: E501
        # verify the required parameter 'audio_url' is set
        if ('audio_url' not in params or
                params['audio_url'] is None):
            raise ValueError("Missing the required parameter `audio_url` when calling `conferences_play_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501
        if 'participant_sid' in params:
            form_params.append(('ParticipantSid', params['participant_sid']))  # noqa: E501
        if 'audio_url' in params:
            form_params.append(('AudioUrl', params['audio_url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/playAudio.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_view_participant(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """View Participant  # noqa: E501

        Retrieve information about a participant by its ParticipantSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_view_participant(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_view_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_view_participant_with_http_info(conference_sid, participant_sid, **kwargs)  # noqa: E501
            return data

    def conferences_view_participant_with_http_info(self, conference_sid, participant_sid, **kwargs):  # noqa: E501
        """View Participant  # noqa: E501

        Retrieve information about a participant by its ParticipantSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_view_participant_with_http_info(conference_sid, participant_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier for a conference object. (required)
        :param str participant_sid: The unique identifier for a participant object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid', 'participant_sid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_view_participant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_view_participant`")  # noqa: E501
        # verify the required parameter 'participant_sid' is set
        if ('participant_sid' not in params or
                params['participant_sid'] is None):
            raise ValueError("Missing the required parameter `participant_sid` when calling `conferences_view_participant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501
        if 'participant_sid' in params:
            form_params.append(('ParticipantSid', params['participant_sid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/viewParticipant.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conferences_viewconference(self, conference_sid, **kwargs):  # noqa: E501
        """View Conference  # noqa: E501

        Retrieve information about a conference by its ConferenceSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_viewconference(conference_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier of each conference resource (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.conferences_viewconference_with_http_info(conference_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.conferences_viewconference_with_http_info(conference_sid, **kwargs)  # noqa: E501
            return data

    def conferences_viewconference_with_http_info(self, conference_sid, **kwargs):  # noqa: E501
        """View Conference  # noqa: E501

        Retrieve information about a conference by its ConferenceSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.conferences_viewconference_with_http_info(conference_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str conference_sid: The unique identifier of each conference resource (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conference_sid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conferences_viewconference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conference_sid' is set
        if ('conference_sid' not in params or
                params['conference_sid'] is None):
            raise ValueError("Missing the required parameter `conference_sid` when calling `conferences_viewconference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'conference_sid' in params:
            form_params.append(('ConferenceSid', params['conference_sid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/conferences/viewconference.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
