# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CallApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def calls_groupcall(self, _from, to, url, group_confirm_key, group_confirm_file, **kwargs):  # noqa: E501
        """Group Call  # noqa: E501

        Group Call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_groupcall(_from, to, url, group_confirm_key, group_confirm_file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: This number to display on Caller ID as calling (required)
        :param str to: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
        :param str url: URL requested once the call connects (required)
        :param str group_confirm_key: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
        :param str group_confirm_file: Specify the audio file you want to play when the called party picks up the call (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fall_back_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fall_back_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param str heart_beat_url: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
        :param str heart_beat_method: Specifies the HTTP method used to request HeartbeatUrl.
        :param int timeout: Time (in seconds) we should wait while the call is ringing before canceling the call
        :param str play_dtmf: DTMF Digits to play to the call once it connects. 0-9, #, or *
        :param str hide_caller_id: Specifies if the caller id will be hidden
        :param bool record: Specifies if the call should be recorded
        :param str record_call_back_url: Recording parameters will be sent here upon completion
        :param str record_call_back_method: Method used to request the RecordCallback URL.
        :param bool transcribe: Specifies if the call recording should be transcribed
        :param str transcribe_call_back_url: Transcription parameters will be sent here upon completion
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_groupcall_with_http_info(_from, to, url, group_confirm_key, group_confirm_file, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_groupcall_with_http_info(_from, to, url, group_confirm_key, group_confirm_file, **kwargs)  # noqa: E501
            return data

    def calls_groupcall_with_http_info(self, _from, to, url, group_confirm_key, group_confirm_file, **kwargs):  # noqa: E501
        """Group Call  # noqa: E501

        Group Call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_groupcall_with_http_info(_from, to, url, group_confirm_key, group_confirm_file, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: This number to display on Caller ID as calling (required)
        :param str to: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222 (required)
        :param str url: URL requested once the call connects (required)
        :param str group_confirm_key: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, * (required)
        :param str group_confirm_file: Specify the audio file you want to play when the called party picks up the call (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fall_back_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fall_back_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param str heart_beat_url: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
        :param str heart_beat_method: Specifies the HTTP method used to request HeartbeatUrl.
        :param int timeout: Time (in seconds) we should wait while the call is ringing before canceling the call
        :param str play_dtmf: DTMF Digits to play to the call once it connects. 0-9, #, or *
        :param str hide_caller_id: Specifies if the caller id will be hidden
        :param bool record: Specifies if the call should be recorded
        :param str record_call_back_url: Recording parameters will be sent here upon completion
        :param str record_call_back_method: Method used to request the RecordCallback URL.
        :param bool transcribe: Specifies if the call recording should be transcribed
        :param str transcribe_call_back_url: Transcription parameters will be sent here upon completion
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'url', 'group_confirm_key', 'group_confirm_file', 'method', 'status_call_back_url', 'status_call_back_method', 'fall_back_url', 'fall_back_method', 'heart_beat_url', 'heart_beat_method', 'timeout', 'play_dtmf', 'hide_caller_id', 'record', 'record_call_back_url', 'record_call_back_method', 'transcribe', 'transcribe_call_back_url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_groupcall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `calls_groupcall`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `calls_groupcall`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `calls_groupcall`")  # noqa: E501
        # verify the required parameter 'group_confirm_key' is set
        if ('group_confirm_key' not in params or
                params['group_confirm_key'] is None):
            raise ValueError("Missing the required parameter `group_confirm_key` when calling `calls_groupcall`")  # noqa: E501
        # verify the required parameter 'group_confirm_file' is set
        if ('group_confirm_file' not in params or
                params['group_confirm_file'] is None):
            raise ValueError("Missing the required parameter `group_confirm_file` when calling `calls_groupcall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if 'url' in params:
            form_params.append(('Url', params['url']))  # noqa: E501
        if 'group_confirm_key' in params:
            form_params.append(('GroupConfirmKey', params['group_confirm_key']))  # noqa: E501
        if 'group_confirm_file' in params:
            form_params.append(('GroupConfirmFile', params['group_confirm_file']))  # noqa: E501
        if 'method' in params:
            form_params.append(('Method', params['method']))  # noqa: E501
        if 'status_call_back_url' in params:
            form_params.append(('StatusCallBackUrl', params['status_call_back_url']))  # noqa: E501
        if 'status_call_back_method' in params:
            form_params.append(('StatusCallBackMethod', params['status_call_back_method']))  # noqa: E501
        if 'fall_back_url' in params:
            form_params.append(('FallBackUrl', params['fall_back_url']))  # noqa: E501
        if 'fall_back_method' in params:
            form_params.append(('FallBackMethod', params['fall_back_method']))  # noqa: E501
        if 'heart_beat_url' in params:
            form_params.append(('HeartBeatUrl', params['heart_beat_url']))  # noqa: E501
        if 'heart_beat_method' in params:
            form_params.append(('HeartBeatMethod', params['heart_beat_method']))  # noqa: E501
        if 'timeout' in params:
            form_params.append(('Timeout', params['timeout']))  # noqa: E501
        if 'play_dtmf' in params:
            form_params.append(('PlayDtmf', params['play_dtmf']))  # noqa: E501
        if 'hide_caller_id' in params:
            form_params.append(('HideCallerId', params['hide_caller_id']))  # noqa: E501
        if 'record' in params:
            form_params.append(('Record', params['record']))  # noqa: E501
        if 'record_call_back_url' in params:
            form_params.append(('RecordCallBackUrl', params['record_call_back_url']))  # noqa: E501
        if 'record_call_back_method' in params:
            form_params.append(('RecordCallBackMethod', params['record_call_back_method']))  # noqa: E501
        if 'transcribe' in params:
            form_params.append(('Transcribe', params['transcribe']))  # noqa: E501
        if 'transcribe_call_back_url' in params:
            form_params.append(('TranscribeCallBackUrl', params['transcribe_call_back_url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/groupcall.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_interruptcalls(self, call_sid, **kwargs):  # noqa: E501
        """Interrupt Call  # noqa: E501

        Interrupt the Call by Call Sid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_interruptcalls(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for voice call that is in progress. (required)
        :param str url: URL the in-progress call will be redirected to
        :param str method: The method used to request the above Url parameter
        :param str status: Status to set the in-progress call to
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_interruptcalls_with_http_info(call_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_interruptcalls_with_http_info(call_sid, **kwargs)  # noqa: E501
            return data

    def calls_interruptcalls_with_http_info(self, call_sid, **kwargs):  # noqa: E501
        """Interrupt Call  # noqa: E501

        Interrupt the Call by Call Sid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_interruptcalls_with_http_info(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for voice call that is in progress. (required)
        :param str url: URL the in-progress call will be redirected to
        :param str method: The method used to request the above Url parameter
        :param str status: Status to set the in-progress call to
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid', 'url', 'method', 'status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_interruptcalls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_interruptcalls`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('CallSid', params['call_sid']))  # noqa: E501
        if 'url' in params:
            form_params.append(('Url', params['url']))  # noqa: E501
        if 'method' in params:
            form_params.append(('Method', params['method']))  # noqa: E501
        if 'status' in params:
            form_params.append(('Status', params['status']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/interruptcalls.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_listcalls(self, **kwargs):  # noqa: E501
        """List Calls  # noqa: E501

        A list of calls associated with your Ytel account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_listcalls(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int page_size: Number of individual resources listed in the response per page
        :param str to: Filter calls that were sent to this 10-digit number (E.164 format).
        :param str _from: Filter calls that were sent from this 10-digit number (E.164 format).
        :param str date_created: Return calls that are from a specified date.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_listcalls_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calls_listcalls_with_http_info(**kwargs)  # noqa: E501
            return data

    def calls_listcalls_with_http_info(self, **kwargs):  # noqa: E501
        """List Calls  # noqa: E501

        A list of calls associated with your Ytel account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_listcalls_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int page_size: Number of individual resources listed in the response per page
        :param str to: Filter calls that were sent to this 10-digit number (E.164 format).
        :param str _from: Filter calls that were sent from this 10-digit number (E.164 format).
        :param str date_created: Return calls that are from a specified date.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'to', '_from', 'date_created']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_listcalls" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('Page', params['page']))  # noqa: E501
        if 'page_size' in params:
            form_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'date_created' in params:
            form_params.append(('DateCreated', params['date_created']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/listcalls.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_makecall(self, _from, to, url, **kwargs):  # noqa: E501
        """Make Call  # noqa: E501

        You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_makecall(_from, to, url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
        :param str to: To number (required)
        :param str url: URL requested once the call connects (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fall_back_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fall_back_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param str heart_beat_url: URL that can be requested every 60 seconds during the call to notify of elapsed tim
        :param str heart_beat_method: Specifies the HTTP method used to request HeartbeatUrl.
        :param int timeout: Time (in seconds) Ytel should wait while the call is ringing before canceling the call
        :param str play_dtmf: DTMF Digits to play to the call once it connects. 0-9, #, or *
        :param bool hide_caller_id: Specifies if the caller id will be hidden
        :param bool record: Specifies if the call should be recorded
        :param str record_call_back_url: Recording parameters will be sent here upon completion
        :param str record_call_back_method: Method used to request the RecordCallback URL.
        :param bool transcribe: Specifies if the call recording should be transcribed
        :param str transcribe_call_back_url: Transcription parameters will be sent here upon completion
        :param str if_machine: How Ytel should handle the receiving numbers voicemail machine
        :param str if_machine_url: URL requested when IfMachine=continue
        :param str if_machine_method: Method used to request the IfMachineUrl.
        :param bool feedback: Specify if survey should be enable or not
        :param str survey_id: The unique identifier for the survey.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_makecall_with_http_info(_from, to, url, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_makecall_with_http_info(_from, to, url, **kwargs)  # noqa: E501
            return data

    def calls_makecall_with_http_info(self, _from, to, url, **kwargs):  # noqa: E501
        """Make Call  # noqa: E501

        You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_makecall_with_http_info(_from, to, url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
        :param str to: To number (required)
        :param str url: URL requested once the call connects (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str status_call_back_method: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
        :param str fall_back_url: URL requested if the initial Url parameter fails or encounters an error
        :param str fall_back_method: Specifies the HTTP method used to request the required FallbackUrl once call connects.
        :param str heart_beat_url: URL that can be requested every 60 seconds during the call to notify of elapsed tim
        :param str heart_beat_method: Specifies the HTTP method used to request HeartbeatUrl.
        :param int timeout: Time (in seconds) Ytel should wait while the call is ringing before canceling the call
        :param str play_dtmf: DTMF Digits to play to the call once it connects. 0-9, #, or *
        :param bool hide_caller_id: Specifies if the caller id will be hidden
        :param bool record: Specifies if the call should be recorded
        :param str record_call_back_url: Recording parameters will be sent here upon completion
        :param str record_call_back_method: Method used to request the RecordCallback URL.
        :param bool transcribe: Specifies if the call recording should be transcribed
        :param str transcribe_call_back_url: Transcription parameters will be sent here upon completion
        :param str if_machine: How Ytel should handle the receiving numbers voicemail machine
        :param str if_machine_url: URL requested when IfMachine=continue
        :param str if_machine_method: Method used to request the IfMachineUrl.
        :param bool feedback: Specify if survey should be enable or not
        :param str survey_id: The unique identifier for the survey.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'url', 'method', 'status_call_back_url', 'status_call_back_method', 'fall_back_url', 'fall_back_method', 'heart_beat_url', 'heart_beat_method', 'timeout', 'play_dtmf', 'hide_caller_id', 'record', 'record_call_back_url', 'record_call_back_method', 'transcribe', 'transcribe_call_back_url', 'if_machine', 'if_machine_url', 'if_machine_method', 'feedback', 'survey_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_makecall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `calls_makecall`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `calls_makecall`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `calls_makecall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if 'url' in params:
            form_params.append(('Url', params['url']))  # noqa: E501
        if 'method' in params:
            form_params.append(('Method', params['method']))  # noqa: E501
        if 'status_call_back_url' in params:
            form_params.append(('StatusCallBackUrl', params['status_call_back_url']))  # noqa: E501
        if 'status_call_back_method' in params:
            form_params.append(('StatusCallBackMethod', params['status_call_back_method']))  # noqa: E501
        if 'fall_back_url' in params:
            form_params.append(('FallBackUrl', params['fall_back_url']))  # noqa: E501
        if 'fall_back_method' in params:
            form_params.append(('FallBackMethod', params['fall_back_method']))  # noqa: E501
        if 'heart_beat_url' in params:
            form_params.append(('HeartBeatUrl', params['heart_beat_url']))  # noqa: E501
        if 'heart_beat_method' in params:
            form_params.append(('HeartBeatMethod', params['heart_beat_method']))  # noqa: E501
        if 'timeout' in params:
            form_params.append(('Timeout', params['timeout']))  # noqa: E501
        if 'play_dtmf' in params:
            form_params.append(('PlayDtmf', params['play_dtmf']))  # noqa: E501
        if 'hide_caller_id' in params:
            form_params.append(('HideCallerId', params['hide_caller_id']))  # noqa: E501
        if 'record' in params:
            form_params.append(('Record', params['record']))  # noqa: E501
        if 'record_call_back_url' in params:
            form_params.append(('RecordCallBackUrl', params['record_call_back_url']))  # noqa: E501
        if 'record_call_back_method' in params:
            form_params.append(('RecordCallBackMethod', params['record_call_back_method']))  # noqa: E501
        if 'transcribe' in params:
            form_params.append(('Transcribe', params['transcribe']))  # noqa: E501
        if 'transcribe_call_back_url' in params:
            form_params.append(('TranscribeCallBackUrl', params['transcribe_call_back_url']))  # noqa: E501
        if 'if_machine' in params:
            form_params.append(('IfMachine', params['if_machine']))  # noqa: E501
        if 'if_machine_url' in params:
            form_params.append(('IfMachineUrl', params['if_machine_url']))  # noqa: E501
        if 'if_machine_method' in params:
            form_params.append(('IfMachineMethod', params['if_machine_method']))  # noqa: E501
        if 'feedback' in params:
            form_params.append(('Feedback', params['feedback']))  # noqa: E501
        if 'survey_id' in params:
            form_params.append(('SurveyId', params['survey_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/makecall.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_makervm(self, _from, rvm_caller_id, to, voice_mail_url, **kwargs):  # noqa: E501
        """Send RVM  # noqa: E501

        Initiate an outbound Ringless Voicemail through Ytel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_makervm(_from, rvm_caller_id, to, voice_mail_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
        :param str rvm_caller_id: A required secondary Caller ID for RVM to work. (required)
        :param str to: A valid number (E.164 format) that will receive the phone call. (required)
        :param str voice_mail_url: The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str stats_call_back_method: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_makervm_with_http_info(_from, rvm_caller_id, to, voice_mail_url, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_makervm_with_http_info(_from, rvm_caller_id, to, voice_mail_url, **kwargs)  # noqa: E501
            return data

    def calls_makervm_with_http_info(self, _from, rvm_caller_id, to, voice_mail_url, **kwargs):  # noqa: E501
        """Send RVM  # noqa: E501

        Initiate an outbound Ringless Voicemail through Ytel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_makervm_with_http_info(_from, rvm_caller_id, to, voice_mail_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call. (required)
        :param str rvm_caller_id: A required secondary Caller ID for RVM to work. (required)
        :param str to: A valid number (E.164 format) that will receive the phone call. (required)
        :param str voice_mail_url: The URL requested once the RVM connects. A set of default parameters will be sent here. (required)
        :param str method: Specifies the HTTP method used to request the required URL once call connects.
        :param str status_call_back_url: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
        :param str stats_call_back_method: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'rvm_caller_id', 'to', 'voice_mail_url', 'method', 'status_call_back_url', 'stats_call_back_method']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_makervm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `calls_makervm`")  # noqa: E501
        # verify the required parameter 'rvm_caller_id' is set
        if ('rvm_caller_id' not in params or
                params['rvm_caller_id'] is None):
            raise ValueError("Missing the required parameter `rvm_caller_id` when calling `calls_makervm`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `calls_makervm`")  # noqa: E501
        # verify the required parameter 'voice_mail_url' is set
        if ('voice_mail_url' not in params or
                params['voice_mail_url'] is None):
            raise ValueError("Missing the required parameter `voice_mail_url` when calling `calls_makervm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'rvm_caller_id' in params:
            form_params.append(('RVMCallerId', params['rvm_caller_id']))  # noqa: E501
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if 'voice_mail_url' in params:
            form_params.append(('VoiceMailURL', params['voice_mail_url']))  # noqa: E501
        if 'method' in params:
            form_params.append(('Method', params['method']))  # noqa: E501
        if 'status_call_back_url' in params:
            form_params.append(('StatusCallBackUrl', params['status_call_back_url']))  # noqa: E501
        if 'stats_call_back_method' in params:
            form_params.append(('StatsCallBackMethod', params['stats_call_back_method']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/makervm.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_playaudios(self, call_sid, audio_url, say_text, **kwargs):  # noqa: E501
        """Play Audio  # noqa: E501

        Play Audio from a url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_playaudios(call_sid, audio_url, say_text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param str audio_url: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
        :param str say_text: Valid alphanumeric string that should be played to the In-progress call. (required)
        :param int length: Time limit in seconds for audio play back
        :param str direction: The leg of the call audio will be played to
        :param bool mix: If false, all other audio will be muted
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_playaudios_with_http_info(call_sid, audio_url, say_text, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_playaudios_with_http_info(call_sid, audio_url, say_text, **kwargs)  # noqa: E501
            return data

    def calls_playaudios_with_http_info(self, call_sid, audio_url, say_text, **kwargs):  # noqa: E501
        """Play Audio  # noqa: E501

        Play Audio from a url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_playaudios_with_http_info(call_sid, audio_url, say_text, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param str audio_url: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav (required)
        :param str say_text: Valid alphanumeric string that should be played to the In-progress call. (required)
        :param int length: Time limit in seconds for audio play back
        :param str direction: The leg of the call audio will be played to
        :param bool mix: If false, all other audio will be muted
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid', 'audio_url', 'say_text', 'length', 'direction', 'mix']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_playaudios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_playaudios`")  # noqa: E501
        # verify the required parameter 'audio_url' is set
        if ('audio_url' not in params or
                params['audio_url'] is None):
            raise ValueError("Missing the required parameter `audio_url` when calling `calls_playaudios`")  # noqa: E501
        # verify the required parameter 'say_text' is set
        if ('say_text' not in params or
                params['say_text'] is None):
            raise ValueError("Missing the required parameter `say_text` when calling `calls_playaudios`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('CallSid', params['call_sid']))  # noqa: E501
        if 'audio_url' in params:
            form_params.append(('AudioUrl', params['audio_url']))  # noqa: E501
        if 'say_text' in params:
            form_params.append(('SayText', params['say_text']))  # noqa: E501
        if 'length' in params:
            form_params.append(('Length', params['length']))  # noqa: E501
        if 'direction' in params:
            form_params.append(('Direction', params['direction']))  # noqa: E501
        if 'mix' in params:
            form_params.append(('Mix', params['mix']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/playaudios.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_recordcalls(self, call_sid, record, **kwargs):  # noqa: E501
        """Record Call  # noqa: E501

        Start or stop recording of an in-progress voice call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_recordcalls(call_sid, record, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param bool record: Set true to initiate recording or false to terminate recording (required)
        :param str direction: The leg of the call to record
        :param int time_limit: Time in seconds the recording duration should not exceed
        :param str call_back_url: URL consulted after the recording completes
        :param str fileformat: Format of the recording file. Can be .mp3 or .wav
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_recordcalls_with_http_info(call_sid, record, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_recordcalls_with_http_info(call_sid, record, **kwargs)  # noqa: E501
            return data

    def calls_recordcalls_with_http_info(self, call_sid, record, **kwargs):  # noqa: E501
        """Record Call  # noqa: E501

        Start or stop recording of an in-progress voice call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_recordcalls_with_http_info(call_sid, record, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param bool record: Set true to initiate recording or false to terminate recording (required)
        :param str direction: The leg of the call to record
        :param int time_limit: Time in seconds the recording duration should not exceed
        :param str call_back_url: URL consulted after the recording completes
        :param str fileformat: Format of the recording file. Can be .mp3 or .wav
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid', 'record', 'direction', 'time_limit', 'call_back_url', 'fileformat']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_recordcalls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_recordcalls`")  # noqa: E501
        # verify the required parameter 'record' is set
        if ('record' not in params or
                params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `calls_recordcalls`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('CallSid', params['call_sid']))  # noqa: E501
        if 'record' in params:
            form_params.append(('Record', params['record']))  # noqa: E501
        if 'direction' in params:
            form_params.append(('Direction', params['direction']))  # noqa: E501
        if 'time_limit' in params:
            form_params.append(('TimeLimit', params['time_limit']))  # noqa: E501
        if 'call_back_url' in params:
            form_params.append(('CallBackUrl', params['call_back_url']))  # noqa: E501
        if 'fileformat' in params:
            form_params.append(('Fileformat', params['fileformat']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/recordcalls.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_senddigits(self, call_sid, play_dtmf, **kwargs):  # noqa: E501
        """Play DTMF  # noqa: E501

        Play Dtmf and send the Digit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_senddigits(call_sid, play_dtmf, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param str play_dtmf: DTMF digits to play to the call. 0-9, #, *, W, or w (required)
        :param str play_dtmf_direction: The leg of the call DTMF digits should be sent to
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_senddigits_with_http_info(call_sid, play_dtmf, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_senddigits_with_http_info(call_sid, play_dtmf, **kwargs)  # noqa: E501
            return data

    def calls_senddigits_with_http_info(self, call_sid, play_dtmf, **kwargs):  # noqa: E501
        """Play DTMF  # noqa: E501

        Play Dtmf and send the Digit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_senddigits_with_http_info(call_sid, play_dtmf, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier of each call resource (required)
        :param str play_dtmf: DTMF digits to play to the call. 0-9, #, *, W, or w (required)
        :param str play_dtmf_direction: The leg of the call DTMF digits should be sent to
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid', 'play_dtmf', 'play_dtmf_direction']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_senddigits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_senddigits`")  # noqa: E501
        # verify the required parameter 'play_dtmf' is set
        if ('play_dtmf' not in params or
                params['play_dtmf'] is None):
            raise ValueError("Missing the required parameter `play_dtmf` when calling `calls_senddigits`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('CallSid', params['call_sid']))  # noqa: E501
        if 'play_dtmf' in params:
            form_params.append(('PlayDtmf', params['play_dtmf']))  # noqa: E501
        if 'play_dtmf_direction' in params:
            form_params.append(('PlayDtmfDirection', params['play_dtmf_direction']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/senddigits.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_viewcalldetail(self, call_sid, **kwargs):  # noqa: E501
        """View Call  # noqa: E501

        Retrieve a single voice call’s information by its CallSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_viewcalldetail(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for the voice call. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_viewcalldetail_with_http_info(call_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_viewcalldetail_with_http_info(call_sid, **kwargs)  # noqa: E501
            return data

    def calls_viewcalldetail_with_http_info(self, call_sid, **kwargs):  # noqa: E501
        """View Call  # noqa: E501

        Retrieve a single voice call’s information by its CallSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_viewcalldetail_with_http_info(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for the voice call. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_viewcalldetail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_viewcalldetail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('callSid', params['call_sid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/viewcalldetail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_viewcalls(self, callsid, **kwargs):  # noqa: E501
        """View Call  # noqa: E501

        Retrieve a single voice call’s information by its CallSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_viewcalls(callsid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str callsid: The unique identifier for the voice call. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_viewcalls_with_http_info(callsid, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_viewcalls_with_http_info(callsid, **kwargs)  # noqa: E501
            return data

    def calls_viewcalls_with_http_info(self, callsid, **kwargs):  # noqa: E501
        """View Call  # noqa: E501

        Retrieve a single voice call’s information by its CallSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_viewcalls_with_http_info(callsid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str callsid: The unique identifier for the voice call. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callsid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_viewcalls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callsid' is set
        if ('callsid' not in params or
                params['callsid'] is None):
            raise ValueError("Missing the required parameter `callsid` when calling `calls_viewcalls`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'callsid' in params:
            form_params.append(('callsid', params['callsid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/viewcalls.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calls_voiceeffect(self, call_sid, **kwargs):  # noqa: E501
        """Voice Effect  # noqa: E501

        Add audio voice effects to the an in-progress voice call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_voiceeffect(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for the in-progress voice call. (required)
        :param str audio_direction: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
        :param float pitch_semi_tones: Set the pitch in semitone (half-step) intervals. Value between -14 and 14
        :param float pitch_octaves: Set the pitch in octave intervals.. Value between -1 and 1
        :param float pitch: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
        :param float rate: Set the rate for audio. The lower the value, the lower the rate. value greater than 0
        :param float tempo: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.calls_voiceeffect_with_http_info(call_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.calls_voiceeffect_with_http_info(call_sid, **kwargs)  # noqa: E501
            return data

    def calls_voiceeffect_with_http_info(self, call_sid, **kwargs):  # noqa: E501
        """Voice Effect  # noqa: E501

        Add audio voice effects to the an in-progress voice call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.calls_voiceeffect_with_http_info(call_sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str call_sid: The unique identifier for the in-progress voice call. (required)
        :param str audio_direction: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
        :param float pitch_semi_tones: Set the pitch in semitone (half-step) intervals. Value between -14 and 14
        :param float pitch_octaves: Set the pitch in octave intervals.. Value between -1 and 1
        :param float pitch: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
        :param float rate: Set the rate for audio. The lower the value, the lower the rate. value greater than 0
        :param float tempo: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_sid', 'audio_direction', 'pitch_semi_tones', 'pitch_octaves', 'pitch', 'rate', 'tempo']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calls_voiceeffect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_sid' is set
        if ('call_sid' not in params or
                params['call_sid'] is None):
            raise ValueError("Missing the required parameter `call_sid` when calling `calls_voiceeffect`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'call_sid' in params:
            form_params.append(('CallSid', params['call_sid']))  # noqa: E501
        if 'audio_direction' in params:
            form_params.append(('AudioDirection', params['audio_direction']))  # noqa: E501
        if 'pitch_semi_tones' in params:
            form_params.append(('PitchSemiTones', params['pitch_semi_tones']))  # noqa: E501
        if 'pitch_octaves' in params:
            form_params.append(('PitchOctaves', params['pitch_octaves']))  # noqa: E501
        if 'pitch' in params:
            form_params.append(('Pitch', params['pitch']))  # noqa: E501
        if 'rate' in params:
            form_params.append(('Rate', params['rate']))  # noqa: E501
        if 'tempo' in params:
            form_params.append(('Tempo', params['tempo']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/calls/voiceeffect.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
