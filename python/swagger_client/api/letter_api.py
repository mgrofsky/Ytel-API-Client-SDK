# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LetterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def letter_create(self, to, _from, attachbyid, file, color, **kwargs):  # noqa: E501
        """Create Letter  # noqa: E501

        Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_create(to, _from, attachbyid, file, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str to: The AddressId or an object structured when creating an address by addresses/Create. (required)
        :param str _from: The AddressId or an object structured when creating an address by addresses/Create. (required)
        :param str attachbyid: Set an existing letter by attaching its LetterId. (required)
        :param str file: File can be a 8.5\"x11\" PDF uploaded file or URL that links to a file. (required)
        :param str color: Specify if letter should be printed in color. (required)
        :param str description: A description for the letter.
        :param str extraservice: Add an extra service to your letter. Options are \"certified\" or \"registered\". Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
        :param str doublesided: Specify if letter should be printed on both sides.
        :param str template: Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
        :param str htmldata: A string value that contains HTML markup.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.letter_create_with_http_info(to, _from, attachbyid, file, color, **kwargs)  # noqa: E501
        else:
            (data) = self.letter_create_with_http_info(to, _from, attachbyid, file, color, **kwargs)  # noqa: E501
            return data

    def letter_create_with_http_info(self, to, _from, attachbyid, file, color, **kwargs):  # noqa: E501
        """Create Letter  # noqa: E501

        Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_create_with_http_info(to, _from, attachbyid, file, color, async=True)
        >>> result = thread.get()

        :param async bool
        :param str to: The AddressId or an object structured when creating an address by addresses/Create. (required)
        :param str _from: The AddressId or an object structured when creating an address by addresses/Create. (required)
        :param str attachbyid: Set an existing letter by attaching its LetterId. (required)
        :param str file: File can be a 8.5\"x11\" PDF uploaded file or URL that links to a file. (required)
        :param str color: Specify if letter should be printed in color. (required)
        :param str description: A description for the letter.
        :param str extraservice: Add an extra service to your letter. Options are \"certified\" or \"registered\". Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.
        :param str doublesided: Specify if letter should be printed on both sides.
        :param str template: Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.
        :param str htmldata: A string value that contains HTML markup.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to', '_from', 'attachbyid', 'file', 'color', 'description', 'extraservice', 'doublesided', 'template', 'htmldata']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method letter_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `letter_create`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `letter_create`")  # noqa: E501
        # verify the required parameter 'attachbyid' is set
        if ('attachbyid' not in params or
                params['attachbyid'] is None):
            raise ValueError("Missing the required parameter `attachbyid` when calling `letter_create`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `letter_create`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `letter_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'attachbyid' in params:
            form_params.append(('attachbyid', params['attachbyid']))  # noqa: E501
        if 'file' in params:
            form_params.append(('file', params['file']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'extraservice' in params:
            form_params.append(('extraservice', params['extraservice']))  # noqa: E501
        if 'doublesided' in params:
            form_params.append(('doublesided', params['doublesided']))  # noqa: E501
        if 'template' in params:
            form_params.append(('template', params['template']))  # noqa: E501
        if 'htmldata' in params:
            form_params.append(('htmldata', params['htmldata']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/letter/create.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def letter_delete(self, lettersid, **kwargs):  # noqa: E501
        """Delete Letter  # noqa: E501

        Remove a letter object by its LetterId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_delete(lettersid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lettersid: The unique identifier for a letter object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.letter_delete_with_http_info(lettersid, **kwargs)  # noqa: E501
        else:
            (data) = self.letter_delete_with_http_info(lettersid, **kwargs)  # noqa: E501
            return data

    def letter_delete_with_http_info(self, lettersid, **kwargs):  # noqa: E501
        """Delete Letter  # noqa: E501

        Remove a letter object by its LetterId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_delete_with_http_info(lettersid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lettersid: The unique identifier for a letter object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lettersid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method letter_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lettersid' is set
        if ('lettersid' not in params or
                params['lettersid'] is None):
            raise ValueError("Missing the required parameter `lettersid` when calling `letter_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'lettersid' in params:
            form_params.append(('lettersid', params['lettersid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/letter/delete.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def letter_listsletter(self, **kwargs):  # noqa: E501
        """List Letters  # noqa: E501

        Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_listsletter(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param str lettersid: The unique identifier for a letter object.
        :param str date_created: The date the letter was created.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.letter_listsletter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.letter_listsletter_with_http_info(**kwargs)  # noqa: E501
            return data

    def letter_listsletter_with_http_info(self, **kwargs):  # noqa: E501
        """List Letters  # noqa: E501

        Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_listsletter_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param str lettersid: The unique identifier for a letter object.
        :param str date_created: The date the letter was created.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'pagesize', 'lettersid', 'date_created']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method letter_listsletter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'lettersid' in params:
            form_params.append(('lettersid', params['lettersid']))  # noqa: E501
        if 'date_created' in params:
            form_params.append(('dateCreated', params['date_created']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/letter/listsletter.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def letter_viewletter(self, lettersid, **kwargs):  # noqa: E501
        """View Letter  # noqa: E501

        Retrieve a letter object by its LetterSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_viewletter(lettersid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lettersid: The unique identifier for a letter object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.letter_viewletter_with_http_info(lettersid, **kwargs)  # noqa: E501
        else:
            (data) = self.letter_viewletter_with_http_info(lettersid, **kwargs)  # noqa: E501
            return data

    def letter_viewletter_with_http_info(self, lettersid, **kwargs):  # noqa: E501
        """View Letter  # noqa: E501

        Retrieve a letter object by its LetterSid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.letter_viewletter_with_http_info(lettersid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str lettersid: The unique identifier for a letter object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lettersid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method letter_viewletter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lettersid' is set
        if ('lettersid' not in params or
                params['lettersid'] is None):
            raise ValueError("Missing the required parameter `lettersid` when calling `letter_viewletter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'lettersid' in params:
            form_params.append(('lettersid', params['lettersid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/letter/viewletter.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
