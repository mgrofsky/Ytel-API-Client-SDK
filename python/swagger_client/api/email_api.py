# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EmailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def email_addunsubscribesemail(self, email, **kwargs):  # noqa: E501
        """Add Email Unsubscribe  # noqa: E501

        Add an email to the unsubscribe list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_addunsubscribesemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be added to the unsubscribe list (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_addunsubscribesemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_addunsubscribesemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_addunsubscribesemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Add Email Unsubscribe  # noqa: E501

        Add an email to the unsubscribe list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_addunsubscribesemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be added to the unsubscribe list (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_addunsubscribesemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_addunsubscribesemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/addunsubscribesemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_deleteblocksemail(self, email, **kwargs):  # noqa: E501
        """Remove Blocked Address  # noqa: E501

        Remove an email from blocked emails list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteblocksemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email address to be remove from the blocked list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_deleteblocksemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_deleteblocksemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_deleteblocksemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Remove Blocked Address  # noqa: E501

        Remove an email from blocked emails list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteblocksemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email address to be remove from the blocked list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_deleteblocksemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_deleteblocksemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('Email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/deleteblocksemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_deletebouncesemail(self, email, **kwargs):  # noqa: E501
        """Remove Bounced Email  # noqa: E501

        Remove an email address from the bounced list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deletebouncesemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email address to be remove from the bounced email list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_deletebouncesemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_deletebouncesemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_deletebouncesemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Remove Bounced Email  # noqa: E501

        Remove an email address from the bounced list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deletebouncesemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: The email address to be remove from the bounced email list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_deletebouncesemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_deletebouncesemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('Email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/deletebouncesemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_deleteinvalidemail(self, email, **kwargs):  # noqa: E501
        """Remove Invalid Email  # noqa: E501

        Remove an email from the invalid email list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteinvalidemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the invalid email list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_deleteinvalidemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_deleteinvalidemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_deleteinvalidemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Remove Invalid Email  # noqa: E501

        Remove an email from the invalid email list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteinvalidemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the invalid email list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_deleteinvalidemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_deleteinvalidemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('Email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/deleteinvalidemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_deletespamemail(self, email, **kwargs):  # noqa: E501
        """Remove Spam Address  # noqa: E501

        Remove an email from the spam email list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deletespamemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the spam list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_deletespamemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_deletespamemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_deletespamemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Remove Spam Address  # noqa: E501

        Remove an email from the spam email list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deletespamemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the spam list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_deletespamemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_deletespamemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('Email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/deletespamemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_deleteunsubscribedemail(self, email, **kwargs):  # noqa: E501
        """Remove Unsubscribed Email  # noqa: E501

        Remove an email address from the list of unsubscribed emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteunsubscribedemail(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the unsubscribe list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_deleteunsubscribedemail_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.email_deleteunsubscribedemail_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def email_deleteunsubscribedemail_with_http_info(self, email, **kwargs):  # noqa: E501
        """Remove Unsubscribed Email  # noqa: E501

        Remove an email address from the list of unsubscribed emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_deleteunsubscribedemail_with_http_info(email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str email: A valid email address that is to be remove from the unsubscribe list. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_deleteunsubscribedemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `email_deleteunsubscribedemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/deleteunsubscribedemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_listblockemail(self, **kwargs):  # noqa: E501
        """Blocked Emails  # noqa: E501

        Retrieve a list of emails that have been blocked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listblockemail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of blocked emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_listblockemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_listblockemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_listblockemail_with_http_info(self, **kwargs):  # noqa: E501
        """Blocked Emails  # noqa: E501

        Retrieve a list of emails that have been blocked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listblockemail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of blocked emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_listblockemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('Limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/listblockemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_listbounceemail(self, **kwargs):  # noqa: E501
        """Bounced Emails  # noqa: E501

        Retrieve a list of emails that have bounced.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listbounceemail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of bounced emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_listbounceemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_listbounceemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_listbounceemail_with_http_info(self, **kwargs):  # noqa: E501
        """Bounced Emails  # noqa: E501

        Retrieve a list of emails that have bounced.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listbounceemail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of bounced emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_listbounceemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('Limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/listbounceemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_listinvalidemail(self, **kwargs):  # noqa: E501
        """Invalid Emails  # noqa: E501

        Retrieve a list of invalid email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listinvalidemail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of invalid emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_listinvalidemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_listinvalidemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_listinvalidemail_with_http_info(self, **kwargs):  # noqa: E501
        """Invalid Emails  # noqa: E501

        Retrieve a list of invalid email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listinvalidemail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of invalid emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_listinvalidemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('Limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/listinvalidemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_listspamemail(self, **kwargs):  # noqa: E501
        """Spam Emails  # noqa: E501

        Retrieve a list of emails that are on the spam list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listspamemail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of spam emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_listspamemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_listspamemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_listspamemail_with_http_info(self, **kwargs):  # noqa: E501
        """Spam Emails  # noqa: E501

        Retrieve a list of emails that are on the spam list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listspamemail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of spam emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_listspamemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('Limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/listspamemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_listunsubscribedemail(self, **kwargs):  # noqa: E501
        """List Unsubscribed Emails  # noqa: E501

        Retrieve a list of email addresses from the unsubscribe list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listunsubscribedemail(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of unsubscribed emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_listunsubscribedemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.email_listunsubscribedemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def email_listunsubscribedemail_with_http_info(self, **kwargs):  # noqa: E501
        """List Unsubscribed Emails  # noqa: E501

        Retrieve a list of email addresses from the unsubscribe list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_listunsubscribedemail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str offset: The starting point of the list of unsubscribed emails that should be returned.
        :param str limit: The count of results that should be returned.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_listunsubscribedemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'offset' in params:
            form_params.append(('Offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('Limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/listunsubscribedemail.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def email_sendemails(self, to, type, subject, message, **kwargs):  # noqa: E501
        """Send Email  # noqa: E501

        Create and submit an email message to one or more email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_sendemails(to, type, subject, message, async=True)
        >>> result = thread.get()

        :param async bool
        :param str to: A valid address that will receive the email. Multiple addresses can be separated by using commas. (required)
        :param str type: Specifies the type of email to be sent (required)
        :param str subject: The subject of the mail. Must be a valid string. (required)
        :param str message: The email message that is to be sent in the text. (required)
        :param str _from: A valid address that will send the email.
        :param str cc: Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
        :param str bcc: Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
        :param str attachment: A file that is attached to the email. Must be less than 7 MB in size.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.email_sendemails_with_http_info(to, type, subject, message, **kwargs)  # noqa: E501
        else:
            (data) = self.email_sendemails_with_http_info(to, type, subject, message, **kwargs)  # noqa: E501
            return data

    def email_sendemails_with_http_info(self, to, type, subject, message, **kwargs):  # noqa: E501
        """Send Email  # noqa: E501

        Create and submit an email message to one or more email addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.email_sendemails_with_http_info(to, type, subject, message, async=True)
        >>> result = thread.get()

        :param async bool
        :param str to: A valid address that will receive the email. Multiple addresses can be separated by using commas. (required)
        :param str type: Specifies the type of email to be sent (required)
        :param str subject: The subject of the mail. Must be a valid string. (required)
        :param str message: The email message that is to be sent in the text. (required)
        :param str _from: A valid address that will send the email.
        :param str cc: Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
        :param str bcc: Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.
        :param str attachment: A file that is attached to the email. Must be less than 7 MB in size.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to', 'type', 'subject', 'message', '_from', 'cc', 'bcc', 'attachment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_sendemails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `email_sendemails`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `email_sendemails`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `email_sendemails`")  # noqa: E501
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `email_sendemails`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('To', params['to']))  # noqa: E501
        if 'type' in params:
            form_params.append(('Type', params['type']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('Subject', params['subject']))  # noqa: E501
        if 'message' in params:
            form_params.append(('Message', params['message']))  # noqa: E501
        if '_from' in params:
            form_params.append(('From', params['_from']))  # noqa: E501
        if 'cc' in params:
            form_params.append(('Cc', params['cc']))  # noqa: E501
        if 'bcc' in params:
            form_params.append(('Bcc', params['bcc']))  # noqa: E501
        if 'attachment' in params:
            form_params.append(('Attachment', params['attachment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/email/sendemails.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
