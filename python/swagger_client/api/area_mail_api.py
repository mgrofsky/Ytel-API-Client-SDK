# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AreaMailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def areamail_create(self, routes, attachbyid, front, back, **kwargs):  # noqa: E501
        """Create AreaMail  # noqa: E501

        Create a new AreaMail object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_create(routes, attachbyid, front, back, async=True)
        >>> result = thread.get()

        :param async bool
        :param str routes: List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043 (required)
        :param str attachbyid: Set an existing areamail by attaching its AreamailId. (required)
        :param str front: The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required (required)
        :param str back: The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. (required)
        :param str description: A string value to use as a description for this AreaMail item.
        :param str targettype: The delivery location type.
        :param str htmldata: A string value that contains HTML markup.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.areamail_create_with_http_info(routes, attachbyid, front, back, **kwargs)  # noqa: E501
        else:
            (data) = self.areamail_create_with_http_info(routes, attachbyid, front, back, **kwargs)  # noqa: E501
            return data

    def areamail_create_with_http_info(self, routes, attachbyid, front, back, **kwargs):  # noqa: E501
        """Create AreaMail  # noqa: E501

        Create a new AreaMail object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_create_with_http_info(routes, attachbyid, front, back, async=True)
        >>> result = thread.get()

        :param async bool
        :param str routes: List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043 (required)
        :param str attachbyid: Set an existing areamail by attaching its AreamailId. (required)
        :param str front: The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required (required)
        :param str back: The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. (required)
        :param str description: A string value to use as a description for this AreaMail item.
        :param str targettype: The delivery location type.
        :param str htmldata: A string value that contains HTML markup.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['routes', 'attachbyid', 'front', 'back', 'description', 'targettype', 'htmldata']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method areamail_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'routes' is set
        if ('routes' not in params or
                params['routes'] is None):
            raise ValueError("Missing the required parameter `routes` when calling `areamail_create`")  # noqa: E501
        # verify the required parameter 'attachbyid' is set
        if ('attachbyid' not in params or
                params['attachbyid'] is None):
            raise ValueError("Missing the required parameter `attachbyid` when calling `areamail_create`")  # noqa: E501
        # verify the required parameter 'front' is set
        if ('front' not in params or
                params['front'] is None):
            raise ValueError("Missing the required parameter `front` when calling `areamail_create`")  # noqa: E501
        # verify the required parameter 'back' is set
        if ('back' not in params or
                params['back'] is None):
            raise ValueError("Missing the required parameter `back` when calling `areamail_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'routes' in params:
            form_params.append(('routes', params['routes']))  # noqa: E501
        if 'attachbyid' in params:
            form_params.append(('attachbyid', params['attachbyid']))  # noqa: E501
        if 'front' in params:
            form_params.append(('front', params['front']))  # noqa: E501
        if 'back' in params:
            form_params.append(('back', params['back']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'targettype' in params:
            form_params.append(('targettype', params['targettype']))  # noqa: E501
        if 'htmldata' in params:
            form_params.append(('htmldata', params['htmldata']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/areamail/create.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def areamail_delete(self, areamailid, **kwargs):  # noqa: E501
        """Delete AreaMail  # noqa: E501

        Remove an AreaMail object by its AreaMailId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_delete(areamailid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str areamailid: The unique identifier for an AreaMail object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.areamail_delete_with_http_info(areamailid, **kwargs)  # noqa: E501
        else:
            (data) = self.areamail_delete_with_http_info(areamailid, **kwargs)  # noqa: E501
            return data

    def areamail_delete_with_http_info(self, areamailid, **kwargs):  # noqa: E501
        """Delete AreaMail  # noqa: E501

        Remove an AreaMail object by its AreaMailId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_delete_with_http_info(areamailid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str areamailid: The unique identifier for an AreaMail object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['areamailid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method areamail_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'areamailid' is set
        if ('areamailid' not in params or
                params['areamailid'] is None):
            raise ValueError("Missing the required parameter `areamailid` when calling `areamail_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'areamailid' in params:
            form_params.append(('areamailid', params['areamailid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/areamail/delete.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def areamail_lists(self, **kwargs):  # noqa: E501
        """List AreaMails  # noqa: E501

        Retrieve a list of AreaMail objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_lists(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param str areamailsid: The unique identifier for an AreaMail object.
        :param str date_created: The date the AreaMail was created.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.areamail_lists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.areamail_lists_with_http_info(**kwargs)  # noqa: E501
            return data

    def areamail_lists_with_http_info(self, **kwargs):  # noqa: E501
        """List AreaMails  # noqa: E501

        Retrieve a list of AreaMail objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_lists_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: The count of objects to return per page.
        :param str areamailsid: The unique identifier for an AreaMail object.
        :param str date_created: The date the AreaMail was created.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'pagesize', 'areamailsid', 'date_created']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method areamail_lists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'areamailsid' in params:
            form_params.append(('areamailsid', params['areamailsid']))  # noqa: E501
        if 'date_created' in params:
            form_params.append(('dateCreated', params['date_created']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/areamail/lists.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def areamail_view(self, areamailid, **kwargs):  # noqa: E501
        """View AreaMail  # noqa: E501

        Retrieve an AreaMail object by its AreaMailId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_view(areamailid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str areamailid: The unique identifier for an AreaMail object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.areamail_view_with_http_info(areamailid, **kwargs)  # noqa: E501
        else:
            (data) = self.areamail_view_with_http_info(areamailid, **kwargs)  # noqa: E501
            return data

    def areamail_view_with_http_info(self, areamailid, **kwargs):  # noqa: E501
        """View AreaMail  # noqa: E501

        Retrieve an AreaMail object by its AreaMailId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.areamail_view_with_http_info(areamailid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str areamailid: The unique identifier for an AreaMail object. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['areamailid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method areamail_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'areamailid' is set
        if ('areamailid' not in params or
                params['areamailid'] is None):
            raise ValueError("Missing the required parameter `areamailid` when calling `areamail_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'areamailid' in params:
            form_params.append(('areamailid', params['areamailid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/areamail/view.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
