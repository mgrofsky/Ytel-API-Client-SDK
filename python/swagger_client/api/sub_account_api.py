# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SubAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_createsubaccount(self, first_name, last_name, email, friendly_name, password, **kwargs):  # noqa: E501
        """Create Subaccount  # noqa: E501

        Create a sub user account under the parent account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_createsubaccount(first_name, last_name, email, friendly_name, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str first_name: Sub account user first name (required)
        :param str last_name: sub account user last name (required)
        :param str email: Sub account email address (required)
        :param str friendly_name: Descriptive name of the sub account (required)
        :param str password: The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_createsubaccount_with_http_info(first_name, last_name, email, friendly_name, password, **kwargs)  # noqa: E501
        else:
            (data) = self.user_createsubaccount_with_http_info(first_name, last_name, email, friendly_name, password, **kwargs)  # noqa: E501
            return data

    def user_createsubaccount_with_http_info(self, first_name, last_name, email, friendly_name, password, **kwargs):  # noqa: E501
        """Create Subaccount  # noqa: E501

        Create a sub user account under the parent account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_createsubaccount_with_http_info(first_name, last_name, email, friendly_name, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str first_name: Sub account user first name (required)
        :param str last_name: sub account user last name (required)
        :param str email: Sub account email address (required)
        :param str friendly_name: Descriptive name of the sub account (required)
        :param str password: The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['first_name', 'last_name', 'email', 'friendly_name', 'password']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_createsubaccount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params or
                params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `user_createsubaccount`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params or
                params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `user_createsubaccount`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `user_createsubaccount`")  # noqa: E501
        # verify the required parameter 'friendly_name' is set
        if ('friendly_name' not in params or
                params['friendly_name'] is None):
            raise ValueError("Missing the required parameter `friendly_name` when calling `user_createsubaccount`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `user_createsubaccount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'first_name' in params:
            form_params.append(('FirstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LastName', params['last_name']))  # noqa: E501
        if 'email' in params:
            form_params.append(('Email', params['email']))  # noqa: E501
        if 'friendly_name' in params:
            form_params.append(('FriendlyName', params['friendly_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/createsubaccount.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_deletesubaccount(self, sub_account_sid, merge_number, **kwargs):  # noqa: E501
        """Delete Subaccount  # noqa: E501

        Delete sub account or merge numbers into parent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_deletesubaccount(sub_account_sid, merge_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sub_account_sid: The SubaccountSid to be deleted (required)
        :param str merge_number: 0 to delete or 1 to merge numbers to parent account. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_deletesubaccount_with_http_info(sub_account_sid, merge_number, **kwargs)  # noqa: E501
        else:
            (data) = self.user_deletesubaccount_with_http_info(sub_account_sid, merge_number, **kwargs)  # noqa: E501
            return data

    def user_deletesubaccount_with_http_info(self, sub_account_sid, merge_number, **kwargs):  # noqa: E501
        """Delete Subaccount  # noqa: E501

        Delete sub account or merge numbers into parent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_deletesubaccount_with_http_info(sub_account_sid, merge_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sub_account_sid: The SubaccountSid to be deleted (required)
        :param str merge_number: 0 to delete or 1 to merge numbers to parent account. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_account_sid', 'merge_number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_deletesubaccount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_account_sid' is set
        if ('sub_account_sid' not in params or
                params['sub_account_sid'] is None):
            raise ValueError("Missing the required parameter `sub_account_sid` when calling `user_deletesubaccount`")  # noqa: E501
        # verify the required parameter 'merge_number' is set
        if ('merge_number' not in params or
                params['merge_number'] is None):
            raise ValueError("Missing the required parameter `merge_number` when calling `user_deletesubaccount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sub_account_sid' in params:
            form_params.append(('SubAccountSID', params['sub_account_sid']))  # noqa: E501
        if 'merge_number' in params:
            form_params.append(('MergeNumber', params['merge_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/deletesubaccount.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_subaccountactivation(self, sub_account_sid, activate, **kwargs):  # noqa: E501
        """Toggle Subaccount Status  # noqa: E501

        Suspend or unsuspend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_subaccountactivation(sub_account_sid, activate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sub_account_sid: The SubaccountSid to be activated or suspended (required)
        :param str activate: 0 to suspend or 1 to activate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_subaccountactivation_with_http_info(sub_account_sid, activate, **kwargs)  # noqa: E501
        else:
            (data) = self.user_subaccountactivation_with_http_info(sub_account_sid, activate, **kwargs)  # noqa: E501
            return data

    def user_subaccountactivation_with_http_info(self, sub_account_sid, activate, **kwargs):  # noqa: E501
        """Toggle Subaccount Status  # noqa: E501

        Suspend or unsuspend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_subaccountactivation_with_http_info(sub_account_sid, activate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sub_account_sid: The SubaccountSid to be activated or suspended (required)
        :param str activate: 0 to suspend or 1 to activate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_account_sid', 'activate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_subaccountactivation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_account_sid' is set
        if ('sub_account_sid' not in params or
                params['sub_account_sid'] is None):
            raise ValueError("Missing the required parameter `sub_account_sid` when calling `user_subaccountactivation`")  # noqa: E501
        # verify the required parameter 'activate' is set
        if ('activate' not in params or
                params['activate'] is None):
            raise ValueError("Missing the required parameter `activate` when calling `user_subaccountactivation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sub_account_sid' in params:
            form_params.append(('SubAccountSID', params['sub_account_sid']))  # noqa: E501
        if 'activate' in params:
            form_params.append(('Activate', params['activate']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/user/subaccountactivation.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
