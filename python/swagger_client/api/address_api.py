# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AddressApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def address_createaddress(self, name, address, country, state, city, zip, **kwargs):  # noqa: E501
        """Create Address  # noqa: E501

        To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_createaddress(name, address, country, state, city, zip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of user (required)
        :param str address: Address of user. (required)
        :param str country: Must be a 2 letter country short-name code (ISO 3166) (required)
        :param str state: Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
        :param str city: City Name. (required)
        :param str zip: Zip code of city. (required)
        :param str description: Description of addresses.
        :param str email: Email Id of user.
        :param str phone: Phone number of user.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.address_createaddress_with_http_info(name, address, country, state, city, zip, **kwargs)  # noqa: E501
        else:
            (data) = self.address_createaddress_with_http_info(name, address, country, state, city, zip, **kwargs)  # noqa: E501
            return data

    def address_createaddress_with_http_info(self, name, address, country, state, city, zip, **kwargs):  # noqa: E501
        """Create Address  # noqa: E501

        To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_createaddress_with_http_info(name, address, country, state, city, zip, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of user (required)
        :param str address: Address of user. (required)
        :param str country: Must be a 2 letter country short-name code (ISO 3166) (required)
        :param str state: Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters. (required)
        :param str city: City Name. (required)
        :param str zip: Zip code of city. (required)
        :param str description: Description of addresses.
        :param str email: Email Id of user.
        :param str phone: Phone number of user.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'address', 'country', 'state', 'city', 'zip', 'description', 'email', 'phone']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_createaddress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `address_createaddress`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `address_createaddress`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `address_createaddress`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `address_createaddress`")  # noqa: E501
        # verify the required parameter 'city' is set
        if ('city' not in params or
                params['city'] is None):
            raise ValueError("Missing the required parameter `city` when calling `address_createaddress`")  # noqa: E501
        # verify the required parameter 'zip' is set
        if ('zip' not in params or
                params['zip'] is None):
            raise ValueError("Missing the required parameter `zip` when calling `address_createaddress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'address' in params:
            form_params.append(('Address', params['address']))  # noqa: E501
        if 'country' in params:
            form_params.append(('Country', params['country']))  # noqa: E501
        if 'state' in params:
            form_params.append(('State', params['state']))  # noqa: E501
        if 'city' in params:
            form_params.append(('City', params['city']))  # noqa: E501
        if 'zip' in params:
            form_params.append(('Zip', params['zip']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'phone' in params:
            form_params.append(('Phone', params['phone']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/address/createaddress.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_deleteaddress(self, addressid, **kwargs):  # noqa: E501
        """Delete Address  # noqa: E501

        To delete Address to your address book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_deleteaddress(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be deleted. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.address_deleteaddress_with_http_info(addressid, **kwargs)  # noqa: E501
        else:
            (data) = self.address_deleteaddress_with_http_info(addressid, **kwargs)  # noqa: E501
            return data

    def address_deleteaddress_with_http_info(self, addressid, **kwargs):  # noqa: E501
        """Delete Address  # noqa: E501

        To delete Address to your address book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_deleteaddress_with_http_info(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be deleted. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addressid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_deleteaddress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addressid' is set
        if ('addressid' not in params or
                params['addressid'] is None):
            raise ValueError("Missing the required parameter `addressid` when calling `address_deleteaddress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'addressid' in params:
            form_params.append(('addressid', params['addressid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/address/deleteaddress.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_listaddress(self, **kwargs):  # noqa: E501
        """List Addresses  # noqa: E501

        List All Address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_listaddress(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: How many results to return, default is 10, max is 100, must be an integer
        :param str addressid: addresses Sid
        :param str date_created: date created address.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.address_listaddress_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.address_listaddress_with_http_info(**kwargs)  # noqa: E501
            return data

    def address_listaddress_with_http_info(self, **kwargs):  # noqa: E501
        """List Addresses  # noqa: E501

        List All Address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_listaddress_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param int pagesize: How many results to return, default is 10, max is 100, must be an integer
        :param str addressid: addresses Sid
        :param str date_created: date created address.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'pagesize', 'addressid', 'date_created']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_listaddress" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'addressid' in params:
            form_params.append(('addressid', params['addressid']))  # noqa: E501
        if 'date_created' in params:
            form_params.append(('dateCreated', params['date_created']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/address/listaddress.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_verifyaddress(self, addressid, **kwargs):  # noqa: E501
        """Verify Address  # noqa: E501

        Validates an address given.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_verifyaddress(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be verified. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.address_verifyaddress_with_http_info(addressid, **kwargs)  # noqa: E501
        else:
            (data) = self.address_verifyaddress_with_http_info(addressid, **kwargs)  # noqa: E501
            return data

    def address_verifyaddress_with_http_info(self, addressid, **kwargs):  # noqa: E501
        """Verify Address  # noqa: E501

        Validates an address given.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_verifyaddress_with_http_info(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be verified. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addressid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_verifyaddress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addressid' is set
        if ('addressid' not in params or
                params['addressid'] is None):
            raise ValueError("Missing the required parameter `addressid` when calling `address_verifyaddress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'addressid' in params:
            form_params.append(('addressid', params['addressid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/address/verifyaddress.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_viewaddress(self, addressid, **kwargs):  # noqa: E501
        """View Address  # noqa: E501

        View Address Specific address Book by providing the address id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_viewaddress(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be retrieved. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.address_viewaddress_with_http_info(addressid, **kwargs)  # noqa: E501
        else:
            (data) = self.address_viewaddress_with_http_info(addressid, **kwargs)  # noqa: E501
            return data

    def address_viewaddress_with_http_info(self, addressid, **kwargs):  # noqa: E501
        """View Address  # noqa: E501

        View Address Specific address Book by providing the address id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.address_viewaddress_with_http_info(addressid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str addressid: The identifier of the address to be retrieved. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addressid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_viewaddress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addressid' is set
        if ('addressid' not in params or
                params['addressid'] is None):
            raise ValueError("Missing the required parameter `addressid` when calling `address_viewaddress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'addressid' in params:
            form_params.append(('addressid', params['addressid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/address/viewaddress.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
