# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhoneNumberApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def incomingphone_availablenumber(self, numbertype, areacode, **kwargs):  # noqa: E501
        """Available Numbers  # noqa: E501

        Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_availablenumber(numbertype, areacode, async=True)
        >>> result = thread.get()

        :param async bool
        :param str numbertype: Number type either SMS,Voice or all (required)
        :param str areacode: Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
        :param int pagesize: The count of objects to return.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_availablenumber_with_http_info(numbertype, areacode, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_availablenumber_with_http_info(numbertype, areacode, **kwargs)  # noqa: E501
            return data

    def incomingphone_availablenumber_with_http_info(self, numbertype, areacode, **kwargs):  # noqa: E501
        """Available Numbers  # noqa: E501

        Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_availablenumber_with_http_info(numbertype, areacode, async=True)
        >>> result = thread.get()

        :param async bool
        :param str numbertype: Number type either SMS,Voice or all (required)
        :param str areacode: Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
        :param int pagesize: The count of objects to return.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numbertype', 'areacode', 'pagesize']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_availablenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'numbertype' is set
        if ('numbertype' not in params or
                params['numbertype'] is None):
            raise ValueError("Missing the required parameter `numbertype` when calling `incomingphone_availablenumber`")  # noqa: E501
        # verify the required parameter 'areacode' is set
        if ('areacode' not in params or
                params['areacode'] is None):
            raise ValueError("Missing the required parameter `areacode` when calling `incomingphone_availablenumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'numbertype' in params:
            form_params.append(('numbertype', params['numbertype']))  # noqa: E501
        if 'areacode' in params:
            form_params.append(('areacode', params['areacode']))  # noqa: E501
        if 'pagesize' in params:
            form_params.append(('pagesize', params['pagesize']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/availablenumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_bulkbuy(self, number_type, area_code, quantity, **kwargs):  # noqa: E501
        """Bulk Buy Numbers  # noqa: E501

        Purchase a selected number of DID's from specific area codes to be used with your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_bulkbuy(number_type, area_code, quantity, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number_type: The capability the number supports. (required)
        :param str area_code: Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
        :param str quantity: A positive integer that tells how many number you want to buy at a time. (required)
        :param str leftover: If desired quantity is unavailable purchase what is available .
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_bulkbuy_with_http_info(number_type, area_code, quantity, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_bulkbuy_with_http_info(number_type, area_code, quantity, **kwargs)  # noqa: E501
            return data

    def incomingphone_bulkbuy_with_http_info(self, number_type, area_code, quantity, **kwargs):  # noqa: E501
        """Bulk Buy Numbers  # noqa: E501

        Purchase a selected number of DID's from specific area codes to be used with your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_bulkbuy_with_http_info(number_type, area_code, quantity, async=True)
        >>> result = thread.get()

        :param async bool
        :param str number_type: The capability the number supports. (required)
        :param str area_code: Specifies the area code for the returned list of available numbers. Only available for North American numbers. (required)
        :param str quantity: A positive integer that tells how many number you want to buy at a time. (required)
        :param str leftover: If desired quantity is unavailable purchase what is available .
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number_type', 'area_code', 'quantity', 'leftover']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_bulkbuy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number_type' is set
        if ('number_type' not in params or
                params['number_type'] is None):
            raise ValueError("Missing the required parameter `number_type` when calling `incomingphone_bulkbuy`")  # noqa: E501
        # verify the required parameter 'area_code' is set
        if ('area_code' not in params or
                params['area_code'] is None):
            raise ValueError("Missing the required parameter `area_code` when calling `incomingphone_bulkbuy`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `incomingphone_bulkbuy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'number_type' in params:
            form_params.append(('NumberType', params['number_type']))  # noqa: E501
        if 'area_code' in params:
            form_params.append(('AreaCode', params['area_code']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('Quantity', params['quantity']))  # noqa: E501
        if 'leftover' in params:
            form_params.append(('Leftover', params['leftover']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/bulkbuy.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_buynumber(self, phone_number, **kwargs):  # noqa: E501
        """Purchase Number  # noqa: E501

        Purchase a phone number to be used with your Ytel account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_buynumber(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid 10-digit Ytel number (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_buynumber_with_http_info(phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_buynumber_with_http_info(phone_number, **kwargs)  # noqa: E501
            return data

    def incomingphone_buynumber_with_http_info(self, phone_number, **kwargs):  # noqa: E501
        """Purchase Number  # noqa: E501

        Purchase a phone number to be used with your Ytel account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_buynumber_with_http_info(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid 10-digit Ytel number (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_buynumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_buynumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/buynumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_getdidscore(self, phonenumber, **kwargs):  # noqa: E501
        """Get DID Score  # noqa: E501

        Get DID Score Number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_getdidscore(phonenumber, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phonenumber: Specifies the multiple phone numbers for check updated spamscore . (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_getdidscore_with_http_info(phonenumber, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_getdidscore_with_http_info(phonenumber, **kwargs)  # noqa: E501
            return data

    def incomingphone_getdidscore_with_http_info(self, phonenumber, **kwargs):  # noqa: E501
        """Get DID Score  # noqa: E501

        Get DID Score Number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_getdidscore_with_http_info(phonenumber, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phonenumber: Specifies the multiple phone numbers for check updated spamscore . (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phonenumber']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_getdidscore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phonenumber' is set
        if ('phonenumber' not in params or
                params['phonenumber'] is None):
            raise ValueError("Missing the required parameter `phonenumber` when calling `incomingphone_getdidscore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phonenumber' in params:
            form_params.append(('Phonenumber', params['phonenumber']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/getdidscore.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_listnumber(self, **kwargs):  # noqa: E501
        """List Numbers  # noqa: E501

        Retrieve a list of purchased phones numbers associated with your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_listnumber(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Which page of the overall response will be returned. Page indexing starts at 1.
        :param int page_size: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param str number_type: The capability supported by the number.Number type either SMS,Voice or all
        :param str friendly_name: A human-readable label added to the number object.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_listnumber_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_listnumber_with_http_info(**kwargs)  # noqa: E501
            return data

    def incomingphone_listnumber_with_http_info(self, **kwargs):  # noqa: E501
        """List Numbers  # noqa: E501

        Retrieve a list of purchased phones numbers associated with your Ytel account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_listnumber_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page: Which page of the overall response will be returned. Page indexing starts at 1.
        :param int page_size: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
        :param str number_type: The capability supported by the number.Number type either SMS,Voice or all
        :param str friendly_name: A human-readable label added to the number object.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'number_type', 'friendly_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_listnumber" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('Page', params['page']))  # noqa: E501
        if 'page_size' in params:
            form_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'number_type' in params:
            form_params.append(('NumberType', params['number_type']))  # noqa: E501
        if 'friendly_name' in params:
            form_params.append(('FriendlyName', params['friendly_name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/listnumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_massreleasenumber(self, phone_number, **kwargs):  # noqa: E501
        """Bulk Release  # noqa: E501

        Remove a purchased Ytel number from your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_massreleasenumber(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel comma separated numbers (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_massreleasenumber_with_http_info(phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_massreleasenumber_with_http_info(phone_number, **kwargs)  # noqa: E501
            return data

    def incomingphone_massreleasenumber_with_http_info(self, phone_number, **kwargs):  # noqa: E501
        """Bulk Release  # noqa: E501

        Remove a purchased Ytel number from your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_massreleasenumber_with_http_info(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel comma separated numbers (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_massreleasenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_massreleasenumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/massreleasenumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_massupdatenumber(self, phone_number, voice_url, **kwargs):  # noqa: E501
        """Bulk Update Numbers  # noqa: E501

        Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_massupdatenumber(phone_number, voice_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid comma(,) separated Ytel numbers. (E.164 format). (required)
        :param str voice_url: The URL returning InboundXML incoming calls should execute when connected. (required)
        :param str friendly_name: A human-readable value for labeling the number.
        :param str voice_method: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
        :param str voice_fallback_url: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
        :param str voice_fallback_method: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
        :param str hangup_callback: URL that can be requested to receive notification when and how incoming call has ended.
        :param str hangup_callback_method: The HTTP method Ytel will use when requesting the HangupCallback URL.
        :param str heartbeat_url: URL that can be used to monitor the phone number.
        :param str heartbeat_method: The HTTP method Ytel will use when requesting the HeartbeatUrl.
        :param str sms_url: URL requested when an SMS is received.
        :param str sms_method: The HTTP method Ytel will use when requesting the SmsUrl.
        :param str sms_fallback_url: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
        :param str sms_fallback_method: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_massupdatenumber_with_http_info(phone_number, voice_url, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_massupdatenumber_with_http_info(phone_number, voice_url, **kwargs)  # noqa: E501
            return data

    def incomingphone_massupdatenumber_with_http_info(self, phone_number, voice_url, **kwargs):  # noqa: E501
        """Bulk Update Numbers  # noqa: E501

        Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_massupdatenumber_with_http_info(phone_number, voice_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid comma(,) separated Ytel numbers. (E.164 format). (required)
        :param str voice_url: The URL returning InboundXML incoming calls should execute when connected. (required)
        :param str friendly_name: A human-readable value for labeling the number.
        :param str voice_method: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
        :param str voice_fallback_url: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
        :param str voice_fallback_method: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
        :param str hangup_callback: URL that can be requested to receive notification when and how incoming call has ended.
        :param str hangup_callback_method: The HTTP method Ytel will use when requesting the HangupCallback URL.
        :param str heartbeat_url: URL that can be used to monitor the phone number.
        :param str heartbeat_method: The HTTP method Ytel will use when requesting the HeartbeatUrl.
        :param str sms_url: URL requested when an SMS is received.
        :param str sms_method: The HTTP method Ytel will use when requesting the SmsUrl.
        :param str sms_fallback_url: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
        :param str sms_fallback_method: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'voice_url', 'friendly_name', 'voice_method', 'voice_fallback_url', 'voice_fallback_method', 'hangup_callback', 'hangup_callback_method', 'heartbeat_url', 'heartbeat_method', 'sms_url', 'sms_method', 'sms_fallback_url', 'sms_fallback_method']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_massupdatenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_massupdatenumber`")  # noqa: E501
        # verify the required parameter 'voice_url' is set
        if ('voice_url' not in params or
                params['voice_url'] is None):
            raise ValueError("Missing the required parameter `voice_url` when calling `incomingphone_massupdatenumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501
        if 'voice_url' in params:
            form_params.append(('VoiceUrl', params['voice_url']))  # noqa: E501
        if 'friendly_name' in params:
            form_params.append(('FriendlyName', params['friendly_name']))  # noqa: E501
        if 'voice_method' in params:
            form_params.append(('VoiceMethod', params['voice_method']))  # noqa: E501
        if 'voice_fallback_url' in params:
            form_params.append(('VoiceFallbackUrl', params['voice_fallback_url']))  # noqa: E501
        if 'voice_fallback_method' in params:
            form_params.append(('VoiceFallbackMethod', params['voice_fallback_method']))  # noqa: E501
        if 'hangup_callback' in params:
            form_params.append(('HangupCallback', params['hangup_callback']))  # noqa: E501
        if 'hangup_callback_method' in params:
            form_params.append(('HangupCallbackMethod', params['hangup_callback_method']))  # noqa: E501
        if 'heartbeat_url' in params:
            form_params.append(('HeartbeatUrl', params['heartbeat_url']))  # noqa: E501
        if 'heartbeat_method' in params:
            form_params.append(('HeartbeatMethod', params['heartbeat_method']))  # noqa: E501
        if 'sms_url' in params:
            form_params.append(('SmsUrl', params['sms_url']))  # noqa: E501
        if 'sms_method' in params:
            form_params.append(('SmsMethod', params['sms_method']))  # noqa: E501
        if 'sms_fallback_url' in params:
            form_params.append(('SmsFallbackUrl', params['sms_fallback_url']))  # noqa: E501
        if 'sms_fallback_method' in params:
            form_params.append(('SmsFallbackMethod', params['sms_fallback_method']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/massupdatenumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_releasenumber_by_response_type_post(self, phone_number, response_type, **kwargs):  # noqa: E501
        """Release Number  # noqa: E501

        Remove a purchased Ytel number from your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_releasenumber_by_response_type_post(phone_number, response_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid 10-digit Ytel number (E.164 format). (required)
        :param str response_type: Response type format xml or json (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_releasenumber_by_response_type_post_with_http_info(phone_number, response_type, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_releasenumber_by_response_type_post_with_http_info(phone_number, response_type, **kwargs)  # noqa: E501
            return data

    def incomingphone_releasenumber_by_response_type_post_with_http_info(self, phone_number, response_type, **kwargs):  # noqa: E501
        """Release Number  # noqa: E501

        Remove a purchased Ytel number from your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_releasenumber_by_response_type_post_with_http_info(phone_number, response_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid 10-digit Ytel number (E.164 format). (required)
        :param str response_type: Response type format xml or json (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'response_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_releasenumber_by_response_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_releasenumber_by_response_type_post`")  # noqa: E501
        # verify the required parameter 'response_type' is set
        if ('response_type' not in params or
                params['response_type'] is None):
            raise ValueError("Missing the required parameter `response_type` when calling `incomingphone_releasenumber_by_response_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'response_type' in params:
            path_params['ResponseType'] = params['response_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/releasenumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_transferphonenumbers(self, phonenumber, fromaccountsid, toaccountsid, **kwargs):  # noqa: E501
        """Move Number  # noqa: E501

        Transfer phone number that has been purchased for from one account to another account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_transferphonenumbers(phonenumber, fromaccountsid, toaccountsid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phonenumber: A valid 10-digit Ytel number (E.164 format). (required)
        :param str fromaccountsid: A specific Accountsid from where Number is getting transfer. (required)
        :param str toaccountsid: A specific Accountsid to which Number is getting transfer. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_transferphonenumbers_with_http_info(phonenumber, fromaccountsid, toaccountsid, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_transferphonenumbers_with_http_info(phonenumber, fromaccountsid, toaccountsid, **kwargs)  # noqa: E501
            return data

    def incomingphone_transferphonenumbers_with_http_info(self, phonenumber, fromaccountsid, toaccountsid, **kwargs):  # noqa: E501
        """Move Number  # noqa: E501

        Transfer phone number that has been purchased for from one account to another account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_transferphonenumbers_with_http_info(phonenumber, fromaccountsid, toaccountsid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phonenumber: A valid 10-digit Ytel number (E.164 format). (required)
        :param str fromaccountsid: A specific Accountsid from where Number is getting transfer. (required)
        :param str toaccountsid: A specific Accountsid to which Number is getting transfer. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phonenumber', 'fromaccountsid', 'toaccountsid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_transferphonenumbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phonenumber' is set
        if ('phonenumber' not in params or
                params['phonenumber'] is None):
            raise ValueError("Missing the required parameter `phonenumber` when calling `incomingphone_transferphonenumbers`")  # noqa: E501
        # verify the required parameter 'fromaccountsid' is set
        if ('fromaccountsid' not in params or
                params['fromaccountsid'] is None):
            raise ValueError("Missing the required parameter `fromaccountsid` when calling `incomingphone_transferphonenumbers`")  # noqa: E501
        # verify the required parameter 'toaccountsid' is set
        if ('toaccountsid' not in params or
                params['toaccountsid'] is None):
            raise ValueError("Missing the required parameter `toaccountsid` when calling `incomingphone_transferphonenumbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phonenumber' in params:
            form_params.append(('phonenumber', params['phonenumber']))  # noqa: E501
        if 'fromaccountsid' in params:
            form_params.append(('fromaccountsid', params['fromaccountsid']))  # noqa: E501
        if 'toaccountsid' in params:
            form_params.append(('toaccountsid', params['toaccountsid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/transferphonenumbers.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_updatenumber(self, phone_number, voice_url, **kwargs):  # noqa: E501
        """Update Number  # noqa: E501

        Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_updatenumber(phone_number, voice_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel number (E.164 format). (required)
        :param str voice_url: URL requested once the call connects (required)
        :param str friendly_name: Phone number friendly name description
        :param str voice_method: Post or Get
        :param str voice_fallback_url: URL requested if the voice URL is not available
        :param str voice_fallback_method: Post or Get
        :param str hangup_callback: callback url after a hangup occurs
        :param str hangup_callback_method: Post or Get
        :param str heartbeat_url: URL requested once the call connects
        :param str heartbeat_method: URL that can be requested every 60 seconds during the call to notify of elapsed time
        :param str sms_url: URL requested when an SMS is received
        :param str sms_method: Post or Get
        :param str sms_fallback_url: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
        :param str sms_fallback_method: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_updatenumber_with_http_info(phone_number, voice_url, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_updatenumber_with_http_info(phone_number, voice_url, **kwargs)  # noqa: E501
            return data

    def incomingphone_updatenumber_with_http_info(self, phone_number, voice_url, **kwargs):  # noqa: E501
        """Update Number  # noqa: E501

        Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_updatenumber_with_http_info(phone_number, voice_url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel number (E.164 format). (required)
        :param str voice_url: URL requested once the call connects (required)
        :param str friendly_name: Phone number friendly name description
        :param str voice_method: Post or Get
        :param str voice_fallback_url: URL requested if the voice URL is not available
        :param str voice_fallback_method: Post or Get
        :param str hangup_callback: callback url after a hangup occurs
        :param str hangup_callback_method: Post or Get
        :param str heartbeat_url: URL requested once the call connects
        :param str heartbeat_method: URL that can be requested every 60 seconds during the call to notify of elapsed time
        :param str sms_url: URL requested when an SMS is received
        :param str sms_method: Post or Get
        :param str sms_fallback_url: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
        :param str sms_fallback_method: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'voice_url', 'friendly_name', 'voice_method', 'voice_fallback_url', 'voice_fallback_method', 'hangup_callback', 'hangup_callback_method', 'heartbeat_url', 'heartbeat_method', 'sms_url', 'sms_method', 'sms_fallback_url', 'sms_fallback_method']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_updatenumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_updatenumber`")  # noqa: E501
        # verify the required parameter 'voice_url' is set
        if ('voice_url' not in params or
                params['voice_url'] is None):
            raise ValueError("Missing the required parameter `voice_url` when calling `incomingphone_updatenumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501
        if 'voice_url' in params:
            form_params.append(('VoiceUrl', params['voice_url']))  # noqa: E501
        if 'friendly_name' in params:
            form_params.append(('FriendlyName', params['friendly_name']))  # noqa: E501
        if 'voice_method' in params:
            form_params.append(('VoiceMethod', params['voice_method']))  # noqa: E501
        if 'voice_fallback_url' in params:
            form_params.append(('VoiceFallbackUrl', params['voice_fallback_url']))  # noqa: E501
        if 'voice_fallback_method' in params:
            form_params.append(('VoiceFallbackMethod', params['voice_fallback_method']))  # noqa: E501
        if 'hangup_callback' in params:
            form_params.append(('HangupCallback', params['hangup_callback']))  # noqa: E501
        if 'hangup_callback_method' in params:
            form_params.append(('HangupCallbackMethod', params['hangup_callback_method']))  # noqa: E501
        if 'heartbeat_url' in params:
            form_params.append(('HeartbeatUrl', params['heartbeat_url']))  # noqa: E501
        if 'heartbeat_method' in params:
            form_params.append(('HeartbeatMethod', params['heartbeat_method']))  # noqa: E501
        if 'sms_url' in params:
            form_params.append(('SmsUrl', params['sms_url']))  # noqa: E501
        if 'sms_method' in params:
            form_params.append(('SmsMethod', params['sms_method']))  # noqa: E501
        if 'sms_fallback_url' in params:
            form_params.append(('SmsFallbackUrl', params['sms_fallback_url']))  # noqa: E501
        if 'sms_fallback_method' in params:
            form_params.append(('SmsFallbackMethod', params['sms_fallback_method']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/updatenumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incomingphone_viewnumber(self, phone_number, **kwargs):  # noqa: E501
        """View Details  # noqa: E501

        Retrieve the details for a phone number by its number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_viewnumber(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel 10-digit phone number (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incomingphone_viewnumber_with_http_info(phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.incomingphone_viewnumber_with_http_info(phone_number, **kwargs)  # noqa: E501
            return data

    def incomingphone_viewnumber_with_http_info(self, phone_number, **kwargs):  # noqa: E501
        """View Details  # noqa: E501

        Retrieve the details for a phone number by its number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incomingphone_viewnumber_with_http_info(phone_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str phone_number: A valid Ytel 10-digit phone number (E.164 format). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incomingphone_viewnumber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `incomingphone_viewnumber`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'phone_number' in params:
            form_params.append(('PhoneNumber', params['phone_number']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/incomingphone/viewnumber.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
