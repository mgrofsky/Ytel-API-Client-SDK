# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.template_data import TemplateData  # noqa: F401,E501


class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'message_sid': 'str',
        '_from': 'str',
        'to': 'str',
        'message_price': 'str',
        'body': 'str',
        'date_sent': 'str',
        'status': 'str',
        'template_id': 'str',
        'template_data': 'TemplateData'
    }

    attribute_map = {
        'api_version': 'ApiVersion',
        'message_sid': 'MessageSid',
        '_from': 'From',
        'to': 'To',
        'message_price': 'MessagePrice',
        'body': 'Body',
        'date_sent': 'DateSent',
        'status': 'Status',
        'template_id': 'TemplateId',
        'template_data': 'TemplateData'
    }

    def __init__(self, api_version=None, message_sid=None, _from=None, to=None, message_price=None, body=None, date_sent=None, status=None, template_id=None, template_data=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501

        self._api_version = None
        self._message_sid = None
        self.__from = None
        self._to = None
        self._message_price = None
        self._body = None
        self._date_sent = None
        self._status = None
        self._template_id = None
        self._template_data = None
        self.discriminator = None

        self.api_version = api_version
        self.message_sid = message_sid
        self._from = _from
        self.to = to
        self.message_price = message_price
        self.body = body
        self.date_sent = date_sent
        self.status = status
        self.template_id = template_id
        self.template_data = template_data

    @property
    def api_version(self):
        """Gets the api_version of this Message.  # noqa: E501

          # noqa: E501

        :return: The api_version of this Message.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Message.

          # noqa: E501

        :param api_version: The api_version of this Message.  # noqa: E501
        :type: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def message_sid(self):
        """Gets the message_sid of this Message.  # noqa: E501

          # noqa: E501

        :return: The message_sid of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_sid

    @message_sid.setter
    def message_sid(self, message_sid):
        """Sets the message_sid of this Message.

          # noqa: E501

        :param message_sid: The message_sid of this Message.  # noqa: E501
        :type: str
        """
        if message_sid is None:
            raise ValueError("Invalid value for `message_sid`, must not be `None`")  # noqa: E501

        self._message_sid = message_sid

    @property
    def _from(self):
        """Gets the _from of this Message.  # noqa: E501

          # noqa: E501

        :return: The _from of this Message.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Message.

          # noqa: E501

        :param _from: The _from of this Message.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Message.  # noqa: E501

          # noqa: E501

        :return: The to of this Message.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Message.

          # noqa: E501

        :param to: The to of this Message.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def message_price(self):
        """Gets the message_price of this Message.  # noqa: E501

          # noqa: E501

        :return: The message_price of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_price

    @message_price.setter
    def message_price(self, message_price):
        """Sets the message_price of this Message.

          # noqa: E501

        :param message_price: The message_price of this Message.  # noqa: E501
        :type: str
        """
        if message_price is None:
            raise ValueError("Invalid value for `message_price`, must not be `None`")  # noqa: E501

        self._message_price = message_price

    @property
    def body(self):
        """Gets the body of this Message.  # noqa: E501

          # noqa: E501

        :return: The body of this Message.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.

          # noqa: E501

        :param body: The body of this Message.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def date_sent(self):
        """Gets the date_sent of this Message.  # noqa: E501

          # noqa: E501

        :return: The date_sent of this Message.  # noqa: E501
        :rtype: str
        """
        return self._date_sent

    @date_sent.setter
    def date_sent(self, date_sent):
        """Sets the date_sent of this Message.

          # noqa: E501

        :param date_sent: The date_sent of this Message.  # noqa: E501
        :type: str
        """
        if date_sent is None:
            raise ValueError("Invalid value for `date_sent`, must not be `None`")  # noqa: E501

        self._date_sent = date_sent

    @property
    def status(self):
        """Gets the status of this Message.  # noqa: E501

          # noqa: E501

        :return: The status of this Message.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Message.

          # noqa: E501

        :param status: The status of this Message.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def template_id(self):
        """Gets the template_id of this Message.  # noqa: E501

          # noqa: E501

        :return: The template_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Message.

          # noqa: E501

        :param template_id: The template_id of this Message.  # noqa: E501
        :type: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def template_data(self):
        """Gets the template_data of this Message.  # noqa: E501


        :return: The template_data of this Message.  # noqa: E501
        :rtype: TemplateData
        """
        return self._template_data

    @template_data.setter
    def template_data(self, template_data):
        """Sets the template_data of this Message.


        :param template_data: The template_data of this Message.  # noqa: E501
        :type: TemplateData
        """
        if template_data is None:
            raise ValueError("Invalid value for `template_data`, must not be `None`")  # noqa: E501

        self._template_data = template_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
