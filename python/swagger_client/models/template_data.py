# coding: utf-8

"""
    Ytel API V3

    Ytel API version 3  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class TemplateData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'companyname': 'str',
        'otpcode': 'str'
    }

    attribute_map = {
        'companyname': 'companyname',
        'otpcode': 'otpcode'
    }

    def __init__(self, companyname=None, otpcode=None):  # noqa: E501
        """TemplateData - a model defined in Swagger"""  # noqa: E501

        self._companyname = None
        self._otpcode = None
        self.discriminator = None

        self.companyname = companyname
        self.otpcode = otpcode

    @property
    def companyname(self):
        """Gets the companyname of this TemplateData.  # noqa: E501

          # noqa: E501

        :return: The companyname of this TemplateData.  # noqa: E501
        :rtype: str
        """
        return self._companyname

    @companyname.setter
    def companyname(self, companyname):
        """Sets the companyname of this TemplateData.

          # noqa: E501

        :param companyname: The companyname of this TemplateData.  # noqa: E501
        :type: str
        """
        if companyname is None:
            raise ValueError("Invalid value for `companyname`, must not be `None`")  # noqa: E501

        self._companyname = companyname

    @property
    def otpcode(self):
        """Gets the otpcode of this TemplateData.  # noqa: E501

          # noqa: E501

        :return: The otpcode of this TemplateData.  # noqa: E501
        :rtype: str
        """
        return self._otpcode

    @otpcode.setter
    def otpcode(self, otpcode):
        """Sets the otpcode of this TemplateData.

          # noqa: E501

        :param otpcode: The otpcode of this TemplateData.  # noqa: E501
        :type: str
        """
        if otpcode is None:
            raise ValueError("Invalid value for `otpcode`, must not be `None`")  # noqa: E501

        self._otpcode = otpcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
